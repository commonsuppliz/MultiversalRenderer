using System;
using System.Xml;
using System.Collections;
using System.Threading;
using System.Text;
using System.Text.Json;
using System.Drawing;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Runtime.InteropServices;
using MultiversalRenderer.Interfaces;

namespace MultiversalRenderer.Core
{
    [ComVisible(true)]   
    public class CHtmlDocument : CHtmlBase, ICommonObjectInterface, ICHtmlDocumentInterface
    {
        internal bool ___IsMultiversalDocument = false;
        /// <summary>
        /// Weak Reference for Owner MultiversalWindow
        /// </summary>
        internal System.WeakReference ___MultiversalWindowWeakReference = null;
        /// <summary>
        /// Instance for Multiversal window for this document
        /// which is used only for pase time.
        /// </summary>
        internal CHtmlMultiversalWindow ___MultiversalWindow = null;
        
        internal CHtmlWindowInstanceReference ___WindowReferenceContainer = null;
        
        internal CHtmlAttributeList ___attributes = null;
        
        internal CHtmlAttributeList ___attributesForWindow = null;
        
        internal CHtmlDomModeType ___documentDomType;
        
        public CHtmlElementType ___WindowFrameType = CHtmlElementType.HTML;


        internal CHtmlFontFaceStotage ___fontfaceDocumentStorage = null;
        
        internal int ClassInterface = 0;
        /// <summary>
        /// Number of Items can be requested for page. [QUEUE_MAX_LIMIT_MULTIPLY ] x [allinernal.Count] = PAGE MAX
        /// </summary>
        internal const int QUEUE_MAX_LIMIT_MULTIPLY = 4;
        internal const int QUEUE_MAX_SAFE_LINE = 175;
        internal string ___charset = null;
        internal string ___defaultCharset = null;
        private int ___charset_position_in_html = -1;
        private string ___charset_HttpHeader = null;
        //private bool _IsAnyHighByteFound = false;
        
        internal short ___DBCSCharLength = 2;
        
        internal CHtmlElement ___body = null;
        
        internal CHtmlElement ___head = null;
        
        internal CHtmlElement ___bodyDummyElement = null;
        
        internal CHtmlElement ___headDummyElement = null;
        internal bool ___isMultiversalTopLevelDocument = false;
        public static int ___HTMLBuilder_READ_SAFE_MARGIN = 10;
        /// <summary>
        /// If document only contains image, audio, video
        /// </summary>
        public bool ___isAutomaticContentHandlingHTMLDocument = false;

        
        internal int ___DocumentTimerMimimunIntervalOrTimeout = int.MaxValue;


        internal const int ___FontCache_MAX_LIMIT_PER_DOCUMENT = 3600;

        internal int ___FontCacheNewCount = 0;
        internal int ___FontCacheHitCount = 0;
        internal object ___FontCacheLockingObject = new object();

      
        /// <summary>
        /// element has been created in this document
        /// note: this number is not accurate, use recursion to get precise element count
        /// </summary>
        internal int ___documentElementTotalCount = 0;



        /// <summary>
        /// Store Element ID as Key (OrdinalIgnoreCase) and Element as Value
        /// </summary>
        internal System.Collections.Generic.Dictionary<string, CHtmlElement> ___DocumentElementIDList = null;

        internal object ___DocumentElementIDLockingObject = new object();
        /// <summary>
        /// scripts only contains HTMLElement objects use scriptEventList to store Events
        /// </summary>
        private CHtmlCollection ___scripts = null;
        /// <summary>
        /// scriptEventList holds CHtmlEvent objects not Element
        /// </summary>
        internal CHtmlCollection ___scriptEventList = null;
        private Bitmap ___TemporayBitmap = null;

        
        private System.Threading.Thread ___threadDOMParse = null;
        internal bool ___isDOMParseThreadStarted = false;
        
        internal System.Text.StringBuilder ___HtmlBuilder = null;
        internal int ___HtmlBuilderLength;
        
        internal string ___HtmlBuilderText = null;
        
        private object ___HtmlBuilderLockObject = new object();
        
        public bool ___IsHtmlResponseCompleted = false;
        
        public bool ___IsHtm1stHttpResponseCompleted = false;
        
        public DateTime ___HtmlResponseComleteTime = DateTime.Today;

        
        public bool ___isHtmlNotUsePrefetchThread = false;
        
        public bool ___isPrefetchThreadStarted = false;

        private double ___PrefetchThreadResultTime = 0;
        
        public bool ___IsHtmlParseCompleted = false;

        
        public bool ___IsHtmlCharSetDetectionCompleted = false;
        
        public bool ___IsHtmlBodyTagPassed = false;
        public int ___HeaderChasetDetectionBytesLimit = 1024 * 5;
        //
        //private AutoResetEvent ThreadParseCharSetDetectCompleteEvent = null;
        
        /// <summary>
        /// absolute 
        /// </summary>
        internal AutoResetEvent ___ThreadParseSuspendEvent = null;
        /// <summary>
        /// absolute
        /// </summary>
        internal AutoResetEvent ___ThreadParseCompleteEvent = null;
        /// <summary>
        /// absolute
        /// </summary>
        internal AutoResetEvent ___ThreadStylesheetCompleteEvent = null;



        
        private CHtmlElement ___currentParentElement = null;

        /// <summary>
        ///  "&lt;BODY" exists in HTMLBuilder String. (Use ___bodyStartTagPositionInHTMLBuilder for Position)
        /// </summary>
        public bool ___isBodyStartTagExistsInHTMLBuilder = false;
        /// <summary>
        ///  "&lt;/BODY" exists in HTMLBuilder String.  (Use ___bodyEndTagPositionInHTMLBuilder for Position)
        /// </summary>
        public bool ___isBodyEndTagExistsInHTMLBuilder = false;
        /// <summary>
        /// "&lt;HEAD" exists in HTMLBuilder String.  (Use ___headStartTagPositionInHTMLBuilder for Position)
        /// </summary>
        public bool ___isHeadStartTagExistsInHTMLBuilder = false;
        /// <summary>
        /// "&lt;/HEAD" exists in HTMLBuilder String. (Use ___headEndTagPositionInHTMLBuilder for Position)
        /// </summary>
        public bool ___isHeadEndTagExistsInHTMLBuilder = false;
        /// <summary>
        /// "&lt;BODY" appears position
        /// </summary>
        public int ___bodyStartTagPositionInHTMLBuilder;
        /// <summary>
        ///  "&lt;/BODY" appears position
        /// </summary>
        public int ___bodyEndTagPositionInHTMLBuilder;

        /// <summary>
        ///  "&lt;HEAD" appears position
        /// </summary>
        public int ___headStartTagPositionInHTMLBuilder;

        /// <summary>
        ///  "&lt;/HEAD" appears position
        /// </summary>
        public int ___headEndTagPositionInHTMLBuilder;

        public int ___curHTMLParsePosition = 0;
        private int ___PreviousParseStartPosition = 0;
        
        internal System.IntPtr ___ManagedControlHandle;
        
        internal System.WeakReference ___ownerWindowWeakReference = null;

        /// <summary>
        /// SCRIPT tag which has attribute "async = true";
        /// </summary>
        internal int ___DeferredEnqueuedScriptCount = 0;
        private object ___DeferEnqueueProcessEnqueuedLockingObject = new object();
        private System.Collections.Generic.List<CHtmlScriptResultElement> ___EnqueuedScriptList = null;
        internal string ___contentType;

        public string ___rawHttpHeaders = null;

        internal string ___URL = null;
        internal string ___HttpResponseRedierctLocationURL = null;
        internal string ___referrer = null;
        internal string ___keywords = null;
        /// <summary>
        /// DOM document.styleSheets collection of CSSStyleSheet (element.___sheet)
        /// </summary>
        private CHtmlCollection ___styleSheets = null;
        /// <summary>
        /// List of CHtmlStyleElements
        /// </summary>
        internal CHtmlCSSRuleGroundList ___cssRuleGroundList = null;
        /// <summary>
        /// Just Number of CHtmlStyleElementLists Item Count
        /// </summary>
        public int ___cssRuleGourndItemsCount = 0;
        /// <summary>
        /// Number of CHtmlStyleElementLists Item Count When Body Tag Passed.
        /// </summary>
        public int ___CHtmlStyleElementListsCountAtBodyTagPassed = 0;

        internal object ___CHtmlStyleElementListsLockingObject = new object();
        internal CHtmlCSSRuleMergeQueue ___StyleQueue = null;
        internal bool ___isStyleQueueShouldBeStopedAfterBodyTag = false;
        internal System.Collections.Generic.List<CHtmlCSSRule> ___cssRuleBlackList = null;
        private CHtmlDictionaryWithIndexEasyAssigned ___forms = null;
        internal CHtmlDictionaryWithIndexEasyAssigned ___framesAsMultiversalWindow = null;
        private CHtmlDictionaryWithIndexEasyAssigned ___anchors = null;
        private CHtmlDictionaryWithIndexEasyAssigned ___embeds = null;
        private CHtmlDictionaryWithIndexEasyAssigned ___frames = null;
        /// <summary>
        /// Link is normally access by indexer. so use Arraylist.
        /// </summary>
		private CHtmlCollection ___links = null;

        private CHtmlCollection ___tagStyles = null;
        internal System.IO.MemoryStream ___documentMemStream = null;
        internal System.Text.Encoding ___encText = null;
        public int ___StyleSheetOnlyFileDownloadPendingCount = 0;
        public int ___StyleScriptFileDownloadPendingCount = 0;
        public int ___StyleScriptFileDownloadRequestedTotalCount = 0;
        public System.Collections.Generic.Dictionary<string, CHtmlDownloadInfomation> ___PageRequestedUrlList = null;
        internal readonly object ___PageRequestedUrlList_LockingObject = new object();
        private CHtmlElement ___currentClosedElement = null;
        
        internal bool ___Disposing = false;


        /// <summary>
        /// DocumentMin Size is not static 2011/09/22
        /// </summary>
        public SizeF ___DocumentMinSize = new SizeF(1000, 800);
        private SizeF ___TagMinSize = new SizeF(1, 12);
        public GraphicCotainer ___HtmlGraphics = null;


        internal string ___strStatusCode = null;
        internal string ___strServer = null;
        internal string ___strStatusDescrption = null;
        internal long ___ContentLength = 0;
        public bool ___IsContentLengthSetByResponse = false;
        private bool ___NoProgressReport = false;


        /// <summary>
        /// document._images is a SortedList contains [url, System.Drawing.Image] not CHtmlElement.
        /// Note) keep this list to SortedList, because it easy to disponse.... Distionary list is not good solution.
        /// </summary>
        internal System.Collections.Generic.SortedList<string, System.Drawing.Image> ___images = null;
        internal object ___ImageRawListLockingObject = new object();
        internal System.Collections.Generic.SortedList<string, System.Drawing.Bitmap> ___pargbConvertedBitmapList = null;
        internal readonly object ___pargbConvertedBitmapListLokingObject = new object();
        /// <summary>
        /// imageElements should contains CHTML Images not image it self, not System.Drawing.Image
        /// </summary>
        private CHtmlCollection ___imageElements = null;
        private CHtmlDictionaryWithIndexEasyAssigned ___layers = null;
        //private CHtmlNameSpaceSortedList ___namespaces = null;

        
        public DOMCSSApplyModeType ___StylesheetProcessMode = DOMCSSApplyModeType.BOF;
        //internal int StylesheetMaximumWaitMilliseconds = 30000;
        public RectangleF ___PaintRectangle = RectangleF.Empty;// new Rectangle(0,0, ___DocumentMinSize.Width, ___DocumentMinSize.Height);

        public RectangleF ___BodyElementBounds = RectangleF.Empty;//new Rectangle(0,0, ___DocumentMinSize.Width, ___DocumentMinSize.Height);

        public delegate void TagElementEventHandler(CHtmlElement ___tagElement, string ___URL, CHtmlThreadPoolQueueObjectType ___drawType);
        
        public bool ___IsRenderingHasStarted = false;
        
        public bool ___IsRenderingFirstCompleted = false;
        
        public bool ___IsThreadAbortOccurred = false;
        
        public bool ___IsNavigationStopped = false;
        
        public bool ___NoMoreManagedControlCreation = false;
        
        public volatile uint ___documentPaintedCount = 0;
        internal bool ___IsDocumentMultiversalCompleteProcessDoneAndReadyToPaint = false;
        public bool ___willSkipDocumentPainting = false;

        /// <summary>
        /// Latest DocumentPaintTime
        /// </summary>
        
        public DateTime ___documentPaintedLatestTime;

        public int ___DocumentPendingFunctionExecuteCount = 0;
        public DateTime ___DocumentPendingFunctionExecuteLastTime;

        /// <summary>
        /// Sets or retrieves a value indicating whether arbitrary variables can be created within the object.
        /// </summary>
        internal bool ___expando = true;

        /// <summary>
        /// Elements list needs to perform 'deep' CSS Lookup
        /// Warning: Keep this list as "SortedList" not Dictionary.
        /// </summary>
        internal System.Collections.Generic.SortedList<int, System.WeakReference> ___CSSSearchDeepPendingElementList = null;
        internal readonly object ___CSSSearchDeepPendingElementList_LockingObject = new object();
        private System.Threading.Thread ___CSSSearchDeepExecutionThread = null;
        internal uint ___CSSSearchDeepExecutionThreadStartupCount = 0;
        internal bool ___isCSSSearchDeepExecutionThreadRunning = false;

        internal new System.Collections.Generic.Dictionary<string, object> ___getterProperties;
        internal new System.Collections.Generic.Dictionary<string, object> ___setterProperties;


        public int ___MouseMoveOriginRandomNumber = -1;
        /// <summary>
        /// DocumentWriteBuilder is document writer
        /// </summary>
        
        private System.Text.StringBuilder ___DocumentWriteBuilder = null;
        
        private object ___DocumentWriteBuilderLockObject = new object();
        private int ___DocumentWriteCharsTotal = 0;
        internal string ___lastModified = null;
        //private CHtmlCookieList _cookie = null;
        internal System.Collections.Generic.List<CHtmlCookie> ___cookieList;
        internal object ___cookieLockingObject = new object();
        internal DateTime ___cookieUpdatedTime = DateTime.Now;
        internal DateTime ___cookieLastSavedTime = DateTime.Now;


        /// <summary>
        /// Flag DOM Will be prebuild before css and script
        /// </summary>
        public bool ___isHttpSyncMode = false;




        /// <summary>
        /// Flag if ___parseDocument has been entered in this document
        /// </summary>
        internal bool ___isParseDocumentEntered = false;

        //private uint MeasureRegionCount = 0;
        /// <summary>
        /// To Quick Access Lease this as 'internal'
        /// </summary>
        // internal string _readyState = "uninitialized";

        internal CHtmlReadytStateType ___readyStateType = CHtmlReadytStateType.uninitialized;

        //private readonly int ___documentMode = 10;
        internal CHtmlElement ___documentElement = null;
        internal System.Collections.Generic.SortedList<int, CHtmlElement> ___ManagedControlPendingElementList = null;
        internal System.Collections.Generic.Dictionary<int, CHtmlElement> ___ManagedControlJobDoneList = null;
        public bool ___IsDocumentTimerThreadRunning = false;
        private System.Threading.Timer ___DocumentTimerThread = null;
        internal bool ___IsDocumentTimerStatedBeforeDocumentComelete = false;
        private int ___DocumentTimerOriginalInterval = 1000;
        //private object ___DocumentTimerLockingObject = new object();
        public int ___DocumentTimerPollingInterval = 1000;
        public static readonly int ___ImgTagMaxWaitDraw = 3000;
        /// <summary>
        /// Force document.all to returns null 
        /// </summary>
        public bool ___DisableDocumentAllFunctionality = false;
        private string ___link = "#ff00";
        private string ___vlink = "#fff0";
        private string ___alink = "#fff0";
        private string ___dir = "ltr";
        /// <summary>
        /// Flag to Ignore HTML tag Element entirely after body started
        /// ex. document.write may write html body unintentionally
        /// </summary>
        //private bool ___SkipHTMLTagAfterBodyStarts = true;
        /// <summary>
        /// If ParseTimeout Value is not -1, Timeout issue in document
        /// </summary>
        public double ___domParseTimeout = -1;

        public System.IntPtr ___HTMLViewNodeHandle = IntPtr.Zero;
        private Color ___vlinkColorNative = Color.Purple;
        private Color ___alinkColorNative = Color.Blue;
        private Color ___linkColorNative = Color.Blue;
        //public FrameType FrameType = FrameType.Normal;

        internal string ___UrlShortName = null;

        internal bool ___is1stHtmlTagFound = false;
        internal bool ___is1stBodyTagFound = false;
        internal bool ___is1stHeadTagFound = false;
        CHtmlTagReadSkipModeType ___tagSkipMode = CHtmlTagReadSkipModeType.none;
        System.Collections.Generic.List<string> ___skipTagStack = new System.Collections.Generic.List<string>();
        private CHtmlRectangle ___DrawingRectangle = new CHtmlRectangle();
        private object ___ParseThreadLockObject = new object();

        /// <summary>
        /// Meta Refresh Intervals
        /// </summary>
        internal string ___MetaRefreshUrl = null;
        public bool ___HasMetaRefresh = false;
        public int ___MetaRefreshSeconds = 0;
        internal System.WeakReference ___MetaRefreshBaseElement = null;

        private string ___BGColorString = null;
        private string ___FGColorString = "black";
        internal string ___mimeType = "text/html";
        internal string ___prefix = null;


        //private string _uniqueID = "";
        internal string ___baseUrl = null;

        public CHtmlElement ___x_selectedElement = null;
        internal float ___DocumentParseProgress = -1F;

       
        internal static readonly int ___ElementClosedLookupLimit = 3;

        //
        //public CHtmlPseudoClassType ___CSSPseudoClassAccumulated = CHtmlPseudoClassType.None;
        
        public CHtmlPseudoClassType ___CSSDocumentTotalPseudoClass = CHtmlPseudoClassType.None;
        
        internal System.Collections.Generic.List<System.WeakReference> ___ElementsNeedsEventFireOnLoadQueueWeakReferenceList = null;

        internal System.Collections.Generic.Dictionary<int, int> ___ElementPedingWorkDoneOIDList = null;
        
        internal object ___ElementsNeedsEventFireLockingObject = new object();

        
        private object ___DocumentLockingObject = new object();

        /// <summary>
        /// Function Reference Window OnScroll
        /// </summary>
        internal System.WeakReference ___WindowScrollFunctionWeakReference = null;

        /// <summary>
        /// Function Reference Window OnMouseWheel
        /// </summary>
        internal System.WeakReference ___WindowMouseWheelFunctionWeakReference = null;

        internal System.WeakReference ___WindowVisibilityChangeFunctionWeakReference = null;

        internal System.WeakReference ___WindowMouseMoveFunctionWeakReference = null;

        internal System.WeakReference ___WindowMouseEnterFunctionWeakReference = null;

        internal System.WeakReference ___WindowMouseLeaveFunctionWeakReference = null;

        internal System.WeakReference ___WindowMouseOutFunctionWeakReference = null;

        internal System.WeakReference ___WindowMouseOverFunctionWeakReference = null;

        internal System.WeakReference ___WindowMouseDownFunctionWeakReference = null;

        internal System.WeakReference ___WindowMouseUpFunctionWeakReference = null;

        internal System.WeakReference ___WindowKeyDownFunctionWeakReference = null;

        internal System.WeakReference ___WindowKeyUpFunctionWeakReference = null;

        internal System.WeakReference ___WindowKeyPressFunctionWeakReference = null;

        internal System.WeakReference ___WindowTouchStartFunctionWeakReference = null;

        internal System.WeakReference ___WindowTouchEndFunctionWeakReference = null;

        internal System.WeakReference ___WindowTouchMoveFunctionWeakReference = null;

        internal System.WeakReference ___WindowTouchCancelFunctionWeakReference = null;
        internal System.WeakReference ___WindowTouchEnterFunctionWeakReference = null;

        internal System.WeakReference ___WindowTouchLeaveFunctionWeakReference = null;

        internal System.WeakReference ___WindowFocusFunctionWeakReference = null;

        internal System.WeakReference ___WindowFocusInFunctionWeakReference = null;

        internal System.WeakReference ___WindowFocusOutFunctionWeakReference = null;

        internal System.WeakReference ___WindowReizeFunctionWeakReference = null;

        internal System.WeakReference ___WindowOrientationChangeFunctionWeakReference = null;

        internal System.WeakReference ___WindowErrorFunctionWeakReference = null;

        internal System.WeakReference ___WindowPlayFunctionWeakReference = null;

        internal System.WeakReference ___WindowPlayingFunctionWeakReference = null;

        internal System.WeakReference ___WindowReadyStateChangeFunctionWeakReference = null;

        internal System.WeakReference ___WindowMessageFunctionWeakReference = null;

        internal System.WeakReference ___WindowLoadFunctionWeakReference = null;
        internal System.Collections.SortedList ___WindowLoadFunctionQueue = null;
        internal System.WeakReference ___WindowUnloadFunctionWeakReference = null;

        internal System.WeakReference ___WindowDOMContentLoadedFunctionWeakReference = null;
        internal System.Collections.SortedList ___WindowDOMCotentLoadedFunctionQueue = null;

        internal System.WeakReference ___DocumentLoadFunctionWeakReference = null;
        internal System.Collections.SortedList ___DocumentLoadFunctionQueue = null;
        internal System.WeakReference ___DocumentUnloadFunctionWeakReference = null;

        internal System.WeakReference ___DocumentDOMCotentLoadedFunctionWeakReference = null;

        internal System.Collections.SortedList ___DocumentDOMCotentLoadedFunctionQueue = null;

        internal System.WeakReference ___DocumentVisibilityChangeFunctionWeakReference = null;

        internal System.WeakReference ___DocumentReadyStateChangeFunctionWeakReference = null;


        internal System.Collections.Generic.List<WeakReference> ___CurrentParentNodeStackList = null;

        internal int ___ElementCountAffectedByCSSRecaluculation = 0;


        internal System.Collections.Hashtable ___CalledFunctionHashtable = new Hashtable();


        internal static bool ___EnableIdenticalStylePreviousSiblingCloning = true;

        
        public bool ___IsIdenticalStylePreviousSiblingCloningEnabled = false;

        public int ___IdenticalElementStyleSiblingCloneCount = 0;

        internal double ___TotalCSSListLookupTime = 0;
        internal double ___TotalCSSParentLookupTime = 0;

        internal bool ___IsOnLoadWindowDocumentCompletedCalled = false;

        internal bool ___DisableDocumentTimer = false;
        internal bool ___IsDocumentTimerTooksTooLong = false;

        /// <summary>
        /// Flag if the document is full screen. Default False;
        /// </summary>
        private bool ___IsFullScreen = false;

        /// <summary>
        /// WeakReference for fullscreenElement
        /// </summary>
        internal System.WeakReference ___fullscreenElementWeakReference = null;

        /// <summary>
        /// WeakReference for pointerLockElement
        /// </summary>
        internal System.WeakReference ___pointerLockElementWeakReference = null;
        /// <summary>
        /// Flag if the document can make to be full screen. Default true
        /// </summary>
        internal bool ___IsFullScreenEnabled = true;



        
        private System.Threading.Thread ___TagPrefetchThread = null;

        internal bool ___IsPrefetchReloadComlete = false;

        internal System.Collections.Generic.Dictionary<string, ushort> ___CSSAttributeLookupFieldList = null;

        internal System.Collections.Generic.Dictionary<string, ushort> ___CSSNthOfTypeTagTypesList = null;

        internal CHtmlCollection ___getElementsByTagNameWildCardSearchLastResult = null;
        internal int ___getElementsByTagNameWildCardSearchLastResult_ALL_COUNT = -1;
        /// <summary>
        /// ContentEncoding From HttpWebResponse
        /// </summary>
        internal string ___ContentEncoding = "";
        private const int STATUS_REPORT_INTERVAL = 100;
        /// <summary>
        /// WeakReference for documentFragment Element Nodes List
        /// </summary>
        private System.Collections.Generic.List<WeakReference> ___DocumentFragmentElementReferenceList = null;

        internal System.Collections.Generic.Dictionary<string, System.Drawing.Size> ___imageSizeQuickLookupSucessList = null;
        // =================================================================================
        // Global Variable objects
        //
        // window.Event 
        // window.
        // =================================================================================


        public CHtmlWindowURL ___WindowURLObjectInstance = null;



        #region XML DOM Related
        private string ___localName = null;
        private string ___xmlEncoding = "utf-8";
        private bool ___xmlStandalone = true;
        private string ___xmlVersion = "1.0";
        /// <summary>
        /// Root Element for XML Support
        /// </summary>
        private CHtmlElement ___rootElement = null;

        #endregion

        private System.Collections.Generic.Dictionary<string, int> ___BadQueryList = null;
        internal CHtmlDOMImplementation ___implementation = null;
        private CHtmlDocumentSelection ___selection = null;
        /// <summary>
        /// Time when parseDocumentMethod Entered
        /// </summary>
		internal DateTime ___parseStartTime;
        /// <summary>
        /// Time when first Response Arrived
        /// </summary>
        internal DateTime ___responseStartTime;
        /// <summary>
        /// HTML5 Web Storage Classes
        /// </summary>
        internal CHtmlWebStorage ___localStorage = null;
        internal CHtmlWebStorage ___sessionStorage = null;


        /// <summary>
        /// List of Found Font Name in FontFamily string array
        /// Gerinc string, string IgnoreCaseOrdinal
        /// </summary>
        internal System.Collections.Generic.Dictionary<string, string> ___FontFamilyFoundList = null;

        private const int DRAW_ELEMENT_STACK_LIMIT = 360;

        private bool ___IsParentWindowUnicusWebBrower = false;
        internal volatile  int  ___documentTimerTickCount = 0;
        private CHtmlCSSRuleGroundKeyComparer ___GroundStyleSheetSorter = null;
        private CHtmlCSSRuleSearchHitForThisNodeClassComparer ___DocumentStyleHitForThisClassSorteter = null;
        internal bool ___IsCreateManagedControlRootCompleted = false;
        /// <summary>
        /// Latest Image Arrival Time
        /// </summary>
        public DateTime ___ImageArrivalLatestTime;


        /// <summary>
        /// On Paint is unser process on this document
        /// </summary>
        public bool ___IsDocumentPaintProgress = false;

        /// <summary>
        /// CookieString Composed
        /// </summary>
        private string ___CurrentCookieString = "";
        /// <summary>
        /// Flag if new CookieString Is Required
        /// </summary>
        private bool ___CheckNewCookieValueRequired = true;


        /// <summary>
        /// List of Document Timer Live List
        /// Should keep as SortedList
        /// </summary>
        internal System.Collections.Generic.SortedList<int, CHtmlEventInfo> ___DocumentTimerLiveList = null;
        internal readonly object ___DocumentTimerLiveLockingObject = new object();
        internal System.Collections.Generic.Dictionary<int, object> ___DocumentTimerBrandNewIDList = null;
        /// <summary>
        /// List of Document Timer Complete List
        /// </summary>
        internal System.Collections.Generic.List<CHtmlEventInfo> ___DocumentTimerCompleteList = null;

        internal System.Collections.Generic.Dictionary<string, int> ___OpacityChangeFailedUrlSortedList = null;

        /// <summary>
        /// This class contains Opacity Changed Image Ur, Opacity and System.Drawing.Image
        /// </summary>
        internal System.Collections.Generic.Dictionary<CHtmlOpacityImageInfo, System.Drawing.Image> ___DocumentOpacityChangedImageStrongReferenceList = null;


        internal int ___DocumentPrototypeMethodPropertyCount = 0;

        internal int ___PropertyMeargedCount = 0;

        /// <summary>
        /// CHtmlWindowEvent event 
        /// </summary>
        public CHtmlWindowEvent ___event = null;

        /// <summary>
        /// List to hold css font-face information
        /// lower case as key
        /// </summary>
        internal System.Collections.Generic.SortedDictionary<string, CHtmlCSSRule> ___fontFaceList = new System.Collections.Generic.SortedDictionary<string, CHtmlCSSRule>();

        internal object ___fontFaceListLockingObject = new object();


        private class FiredEventTrackedListComparer : System.Collections.Generic.IComparer<CHtmlElement>
        {
            public int Compare(CHtmlElement elemX, CHtmlElement elemY)
            {
                if (elemX == null && elemY == null)
                {
                    return 0;
                }
                if (elemX == null)
                {
                    return -1;
                }
                if (elemY == null)
                {
                    return 1;
                }
                return elemX.___elementOID.CompareTo(elemY.___elementOID);
            }
        }

        internal bool ___IsDocumentWriteOpen = false;

        internal System.Collections.Generic.Dictionary<CHtmlCanvasContext, object> ___CanvasContextElement2DDrawingPendingList = null;

        /// <summary>
        /// WeakReferenceFor Focused Element in document
        /// </summary>
        internal System.Collections.Generic.List<WeakReference> ___ElementsContainsKeyUpOrKeyDownOrKeyPressList = null;

        /// <summary>
        /// Keep Track Strong Reference for Dynamically Created Elements
        /// such as Image(), Audio(), Video()
        /// Those are disposed when document.Dispose()
        /// </summary>
        internal System.Collections.Generic.List<CHtmlElement> ___ElementDynamicallyCreatedList = null;
        /// <summary>
        /// Keep Track Strong Reference for Dynamically Created Elements
        /// such as Image(), Audio(), Video()
        /// Those are disposed when document.Dispose()
        /// </summary>
        internal System.Collections.Generic.List<System.WeakReference> ___ElementImgAudioVideoDynamicallyCreatedWorkingQueueList = null;
        internal System.Collections.Generic.SortedList<string, object> ___WindowPropertiesList = null;

        internal System.Collections.Generic.Dictionary<int, int> ___ElementOnLoadAttemptedOIDList = null;

        /// <summary>
        /// this field is used for document.implementation.createDocument()
        /// </summary>
        internal System.WeakReference ___originDocumentWeakReference = null;

        internal CHtmlHostStorageData ___hostStorageData = null;
        /// <summary>
        /// Adhoc Bitmap List Locking Object
        /// </summary>
        internal object ___AdHocBitmapGraphicListLockingObject = null;
        //internal System.Collections.Generic.List<CHtmlAdhocBitmapInformation> ___AdHocBitmapGraphicList = null;

        /// <summary>
        /// Flag To Recaluculate Maximun Screen Bounds
        /// </summary>
        internal bool ___IsCalucuateScreenMaximunBoundsRequired = false;

        internal bool ___IsElementCreationNeedsToBeDynamic = false;
        internal System.Collections.Generic.Dictionary<string, string> ___BadImageSizeLookupList = null;

        internal int ___DocumentTimerClearTotalMissCount = 0;
        internal int ___DocumentTimerClearSequentailMissCount = 0;

        /// <summary>
        /// Document Suspend Event Wait Time
        /// </summary>
        internal int ___ThreadSuspentCurrentWaitTime = commonHTML.DOCUMENT_THREADSUSPEND_INITAL_INTERVAL;
        /// <summary>
        /// List of Disabled Link ex.style List
        /// </summary>
        internal System.Collections.Generic.Dictionary<string, string> ___LinkDisabledHerfList = null;
        internal readonly object ___LinkDisabledLockingObject = new object();
        /// <summary>
        /// Size of Rem Size of HTML Element
        /// default : -1
        /// </summary>
        internal double ___HTMLTagRemUnitSize = -1;

        internal CHtmlCollection ___getElementsByTagNameWildCardSearchIncludingITextLastResult = null;
        internal int ___getElementsByTagNameWildCardSearchIncludingITextLastResultElementOID = -1;
        internal int ___getElementsByTagNameWildCardSearchIncludingITextLastResult_ALL_Count = -1;
        internal DateTime ___getElementsByTagNameWildCardSearchIncludingITextLastResultUpdateTime;
        internal void ___enqueueElementToElementNeedsToEventFireOnLoad(CHtmlElement ____element)
        {
            if (this.___Disposing == false && this.___IsDomModeFullParseMode() == true)
            {
                if (this.___ElementsNeedsEventFireOnLoadQueueWeakReferenceList != null)
                {
                    if (System.Threading.Monitor.TryEnter(this.___ElementsNeedsEventFireLockingObject, 100))
                    {
                        try
                        {
                            this.___ElementsNeedsEventFireOnLoadQueueWeakReferenceList.Add(new WeakReference(____element, false));
                        }
                        finally
                        {
                            System.Threading.Monitor.Exit(this.___ElementsNeedsEventFireLockingObject);
                        }
                    }
                }
            }
        }
        
        internal void ___loadFontFaceFont(string strFileLocation, CSSFontFaceFormatType format, CHtmlCSSRule ___rule)
        {
            if (this.___IsDisposing == true)
                return;
            if (this.___fontfaceDocumentStorage == null)
            {
                this.___fontfaceDocumentStorage = new CHtmlFontFaceStotage(this);
            }
            /*
            CHtmlFontFaceStotage.loadFontFaceFontDelegate ___loadDelegate = new CHtmlFontFaceStotage.loadFontFaceFontDelegate(this.___fontfaceDocumentStorage.loadFontFaceFont);
            ___loadDelegate.BeginInvoke(strFileLocation, format, ___rule, null, null);
            */
            this.___fontfaceDocumentStorage.loadFontFaceFont(strFileLocation, format, ___rule);
        }
        public CHtmlDocument(CHtmlDomModeType _docType, string url) : this(_docType, url, null)
        {
            this.___documentDomType = _docType;

        }


        public CHtmlDocument(CHtmlDomModeType _docType) : this(_docType, null, null)
        {
            this.___documentDomType = _docType;

        }
        
        public static CHtmlDocument createDocument(CHtmlDomModeType _docType, string url, string html, CHtmlMultiversalWindow win, MultivasalContentData contentData)
        {
            CHtmlDocument doc = new CHtmlDocument(_docType, url, html);
            doc.___ownerWindowWeakReference = new WeakReference(win, false);
            doc.___HtmlBuilder.Append(html);
            doc.___ContentLength = contentData.ContentLength;
            if(commonHTML.IsNotNull(contentData.LastModified))
                doc.___lastModified = contentData.LastModified.Value.DateTime.ToString();
            doc.___IsHtmlResponseCompleted = true;  
            doc.___contentType = contentData.ContentType; 
            doc.___MultiversalWindow = win;
            doc.___parseDocument();
            return doc;
        }


        public CHtmlDocument(CHtmlDomModeType _docType, string url, string html) 
        {
            this.___documentDomType = _docType;
            if (url != null)
            {
                this.___URL = url;
            }
            else
            {
                this.___URL = "about:blank";
            }
            this.___locationBase.___ownerObjectType = this.GetType();
            this.___event = new CHtmlWindowEvent();
            this.___event.___eventSourceType = CHtmlWindowEvent.CHtmlWindowEventEventType.staticwindow;
            this.___BackgroundSysColor = Color.White;
            this.___ForegroundSysColor = Color.Black;
            this.___documentDomType = _docType;
            this.___ImageArrivalLatestTime = DateTime.Now;
 
            this.___HtmlBuilder = new System.Text.StringBuilder(1000);
            if(html != null)
            {
                this.___HtmlBuilder.Append(html);
                this.___ContentLength = html.Length;
                this.___IsHtmlResponseCompleted = true;
                
            }
           

            if (this.___PageRequestedUrlList == null)
            {
                this.___PageRequestedUrlList = new System.Collections.Generic.Dictionary<string, CHtmlDownloadInfomation>(StringComparer.Ordinal);
            }
            this.___IsHtmlResponseCompleted = false;
            this.___IsHtmlParseCompleted = false;
            this.___IsHtmlCharSetDetectionCompleted = false;
            this.___currentParentElement = null;
            this.___parseStartTime = DateTime.Now;

            this.___ElementDynamicallyCreatedList = new System.Collections.Generic.List<CHtmlElement>();
            this.___ElementImgAudioVideoDynamicallyCreatedWorkingQueueList = new System.Collections.Generic.List<WeakReference>();
            this.___WindowURLObjectInstance = new CHtmlWindowURL();
            this.___WindowURLObjectInstance.___ownerDocumentWeakReference = new WeakReference(this, false);
            this.___WindowPropertiesList = new System.Collections.Generic.SortedList<string, object>(StringComparer.Ordinal);
            this.___getterProperties = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
            this.___setterProperties = new System.Collections.Generic.Dictionary<string, object>(StringComparer.Ordinal);
            switch (this.___documentDomType)
            {
                case CHtmlDomModeType.HTMLDOM:
                case CHtmlDomModeType.HTMLDOM_NoGUI:
                case CHtmlDomModeType.SVGDOM:
                    this.___pargbConvertedBitmapList = new System.Collections.Generic.SortedList<string, Bitmap>(StringComparer.Ordinal);
                    this.___event.___ownerDocumentWeakReference = new WeakReference(this, false);

                    this.___DocumentElementIDList = new System.Collections.Generic.Dictionary<string, CHtmlElement>(StringComparer.OrdinalIgnoreCase);
                    this.___scripts = new CHtmlCollection();
                    this.___scripts.___CollectionType = CHtmlHTMLCollectionType.DocumentScripts;
                    this.___forms = new CHtmlDictionaryWithIndexEasyAssigned();

                    this.___forms.___CollectionType = CHtmlHTMLCollectionType.DocumentForms;
                    this.___frames = new CHtmlDictionaryWithIndexEasyAssigned();
                    this.___anchors = new CHtmlDictionaryWithIndexEasyAssigned();
                    this.___anchors.___CollectionType = CHtmlHTMLCollectionType.DocumentAnckors;
                    this.___embeds = new CHtmlDictionaryWithIndexEasyAssigned();
                    this.___embeds.___CollectionType = CHtmlHTMLCollectionType.DocumentEmbeds;
                    this.___links = new CHtmlCollection();
                    this.___links.___CollectionType = CHtmlHTMLCollectionType.DocumentLinks;

                    this.___tagStyles = new CHtmlCollection();
                    this.___cssRuleGroundList = new CHtmlCSSRuleGroundList();
                    this.___documentMemStream = new System.IO.MemoryStream();
                    this.___images = new System.Collections.Generic.SortedList<string, Image>(StringComparer.Ordinal);

                    this.___StyleSheetOnlyFileDownloadPendingCount = 0;
                    this.___StyleScriptFileDownloadPendingCount = 0;
                    this.___StyleScriptFileDownloadRequestedTotalCount = 0;

                    this.___layers = new CHtmlDictionaryWithIndexEasyAssigned();
                    this.___layers.___CollectionType = CHtmlHTMLCollectionType.DocumentLayers;
                    /*
                    this.___namespaces = new CHtmlNameSpaceSortedList(StringComparer.OrdinalIgnoreCase);
                    this.___namespaces.___CollectionType = CHtmlHTMLCollectionType.DocumentNamespaces;
                     */

                    this.___ManagedControlPendingElementList = new System.Collections.Generic.SortedList<int, CHtmlElement>();
                    this.___ManagedControlJobDoneList = new System.Collections.Generic.Dictionary<int, CHtmlElement>();
                    this.___scriptEventList = new CHtmlCollection();
                    this.___implementation = new CHtmlDOMImplementation();
                    this.___implementation.___ownerDocumentWeakReference = new WeakReference(this, false);

                    this.___selection = new CHtmlDocumentSelection();
                    this.___SetNodeType(CHtmlNodeType.DOCUMENT_NODE);


                    this.___GroundStyleSheetSorter = new CHtmlCSSRuleGroundKeyComparer();

                    this.___DocumentStyleHitForThisClassSorteter = new CHtmlCSSRuleSearchHitForThisNodeClassComparer();
                    this.___FontFamilyFoundList = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                    this.___CSSAttributeLookupFieldList = new System.Collections.Generic.Dictionary<string, ushort>(StringComparer.OrdinalIgnoreCase);
                    this.___cssRuleBlackList = new System.Collections.Generic.List<CHtmlCSSRule>();

                    this.___CSSNthOfTypeTagTypesList = new System.Collections.Generic.Dictionary<string, ushort>(StringComparer.OrdinalIgnoreCase);

                    this.___imageElements = new CHtmlCollection();
                    this.___imageElements.___CollectionType = CHtmlHTMLCollectionType.DocumentImageElements;
                    this.___BadQueryList = null;
                    this.___styleSheets = new CHtmlCollection();
                    this.___styleSheets.___CollectionType = CHtmlHTMLCollectionType.DocumentStyleSheets;
                    this.___styleSheets.___createObjectIDTable();
                    this.___cookieList = new System.Collections.Generic.List<CHtmlCookie>();
                    this.___DocumentTimerLiveList = new System.Collections.Generic.SortedList<int, CHtmlEventInfo>();
                    this.___DocumentTimerBrandNewIDList = new System.Collections.Generic.Dictionary<int, object>();
                    this.___DocumentTimerCompleteList = new System.Collections.Generic.List<CHtmlEventInfo>();

                    this.___OpacityChangeFailedUrlSortedList = new System.Collections.Generic.Dictionary<string, int>(StringComparer.Ordinal);
                    this.___CanvasContextElement2DDrawingPendingList = new System.Collections.Generic.Dictionary<CHtmlCanvasContext, object>();
                    this.___ElementsContainsKeyUpOrKeyDownOrKeyPressList = new System.Collections.Generic.List<WeakReference>();
                    this.___CurrentParentNodeStackList = new System.Collections.Generic.List<WeakReference>();
                    this.___framesAsMultiversalWindow = new CHtmlDictionaryWithIndexEasyAssigned();
                    this.___framesAsMultiversalWindow.___CollectionType = CHtmlHTMLCollectionType.WindowFramesAsMultiversalWindow;
                    this.___EnqueuedScriptList = new System.Collections.Generic.List<CHtmlScriptResultElement>();

                    this.___AdHocBitmapGraphicListLockingObject = new object();
                    this.___ElementsNeedsEventFireOnLoadQueueWeakReferenceList = new System.Collections.Generic.List<WeakReference>();
                    this.___ElementOnLoadAttemptedOIDList = new System.Collections.Generic.Dictionary<int, int>();
                    this.___ElementPedingWorkDoneOIDList = new System.Collections.Generic.Dictionary<int, int>();
                    this.___BadImageSizeLookupList = new System.Collections.Generic.Dictionary<string, string>(StringComparer.Ordinal);
                    this.___LinkDisabledHerfList = new System.Collections.Generic.Dictionary<string, string>(StringComparer.Ordinal);

                    this.___imageSizeQuickLookupSucessList = new System.Collections.Generic.Dictionary<string, Size>(StringComparer.Ordinal);
                    this.___CSSSearchDeepPendingElementList = new System.Collections.Generic.SortedList<int, WeakReference>();
                    break;
                case CHtmlDomModeType.XMLDOM:
                
                case CHtmlDomModeType.HTMLSegment:
                case CHtmlDomModeType.HTML_Impl:
                    /*
                    this.___allElementList = new CHtmlCollection();
                    this.___allElementList.___CollectionType = CHtmlHTMLCollectionType.DocumentAllInternal;

                    this.___allElementList.___createObjectIDTable();
                     */
                    this.___DocumentElementIDList = new System.Collections.Generic.Dictionary<string, CHtmlElement>(StringComparer.OrdinalIgnoreCase);
 
                    this.___AdHocBitmapGraphicListLockingObject = new object();
                    break;
                default:
                    /*
                    this.___allElementList = new CHtmlCollection();
                    this.___allElementList.___CollectionType = CHtmlHTMLCollectionType.DocumentAllInternal;

                    this.___allElementList.___createObjectIDTable();
                     */
                    this.___DocumentElementIDList = new System.Collections.Generic.Dictionary<string, CHtmlElement>(StringComparer.OrdinalIgnoreCase);

                    this.___AdHocBitmapGraphicListLockingObject = new object();
                    // implemations will be supported for XML and SVG
                    this.___implementation = new CHtmlDOMImplementation();
                    this.___implementation.___ownerDocumentWeakReference = new WeakReference(this, false);
                    break;
            }





            ___PaintRectangle = new RectangleF(0, 0, ___DocumentMinSize.Width, ___DocumentMinSize.Height);

            ___BodyElementBounds = new RectangleF(0, 0, ___DocumentMinSize.Width, ___DocumentMinSize.Height);


            this.___attributes = new CHtmlAttributeList(StringComparer.OrdinalIgnoreCase);
            this.___attributes.CollectionType = CHtmlHTMLCollectionType.DocumentAttributes;
            this.___attributes.___ownerNodeWeakReference = new WeakReference(this, false);
            this.___attributesForWindow = new CHtmlAttributeList(StringComparer.OrdinalIgnoreCase);
            this.___attributesForWindow.CollectionType = CHtmlHTMLCollectionType.DocumentWindowEventAttributes;
            this.___attributesForWindow.___ownerNodeWeakReference = new WeakReference(this, false);
        }
        ~CHtmlDocument()
        {
            bool ___HasCleaned = false;
            if (this.___Disposing == false)
            {
                ___HasCleaned = false;
                this.___Disposing = true;
            }
            else
            {
                ___HasCleaned = true;
            }
            this.___cleanUp();
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("document : {0}  {1} Finalizer called...", this.toLogString(), commonHTML.GetBoolToString(___HasCleaned));
            }
        }

        
        public object this[string __id]
        {
            get
            {
                CHtmlElement ___elem = null;
                if (this.___DocumentElementIDList.TryGetValue(___id, out ___elem) == true)
                {

                    return ___elem;
                }
                else
                {
                    if (this.___attributes.ContainsKey(__id) == true)
                    {
                        CHtmlAttribute attr = this.___attributes[__id] as CHtmlAttribute;
                        if (attr != null)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("CHtmlDocumet {0} has access by indexer {1} = {2}", this, __id, attr);
                            }
                            return attr.value;
                        }
                    }

                }
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("CHtmlDocumet {0} did not fond attributes or element \'{1}\' returns null", this, __id);
                }
                return null;
            }
            set
            {
                if (__id == null || __id.Length == 0)
                    return;
                string keyLow = commonHTML.FasterTrimAndToLower(__id);
                CHtmlAttribute newAttr = new CHtmlAttribute();
                newAttr.name = keyLow;
                newAttr.parentNode = this;
                newAttr.value = value;
                this.___attributes[keyLow] = newAttr;
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("CHtmlDocumet {0} Created New Attributes  {1} = {2}", this, __id, value);
                }

            }
        }


        /// <summary>
        /// two parameter getElementById (chrome can perform getElementById(string, bool)
        /// but it seems to not works as expected.
        /// </summary>
        /// <param name="__sid">ID (string)</param>
        /// <param name="___objp1">param (may be boolean)</param>
        /// <returns></returns>
        public object getElementById(string ___sid, object ___objp1)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("using document.getElementById({0}, {1})....", ___sid, ___objp1);
            }
            CHtmlElement ___element = this.___getElementById_Inner(___sid, false);
            if (___element == null)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("document.getElementById({0}, {1}) retuns null.", ___sid, ___objp1);
                }

            }
            return ___element;

        }
        public CHtmlElement getElementById(string ___sid)
        {
            CHtmlElement ___element = this.___getElementById_Inner(___sid, false);
            if (___element == null)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("document.getElementById({0}) retuns null.", ___sid);
                }

            }
            return ___element;
        }
        /// <summary>
        /// DHTML getElementById
        /// </summary>
        /// <param name="__sid"></param>
        /// <returns></returns>
        
        internal CHtmlElement ___getElementById_Inner(string __sid, bool ___NoBadQueryCheck)
        {

            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("calling document.getElementById_inner({0}, {1})", __sid, ___NoBadQueryCheck);
            }


            CHtmlElement elem;
            try
            {
                if (this.___DocumentElementIDList.TryGetValue(__sid, out elem))
                {
                    if ((elem != null && elem.___HasElementRemoved == true) || (elem == null && ___NoBadQueryCheck == true))
                    {
                        goto FinalPhase;
                    }
                    if (this.___BadQueryList != null)
                    {
                        this.___BadQueryList = null;
                    }
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                    {
                        commonLog.LogEntry("document.getElementById({0}) returns {1}", __sid , elem.toLogString());
                    }
                    return elem;
                }
                else
                {
                    if (___NoBadQueryCheck == true)
                        return null;
                    if (___NoBadQueryCheck == false)
                    {
                        if (this.___DocumentWriteBuilder != null && this.___DocumentWriteBuilder.Length > 0)
                        {
                            this.CreateElementImmediatelyFromDocumentWrittenStringData();
                        }
                    }
                    if (this.___DocumentElementIDList.TryGetValue(__sid, out elem))
                    {
                        return elem;
                    }
                }
            }
            catch
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                {
                    commonLog.LogEntry("document.getElementById({0}) Binary Search Failed. Bad data. cant continue", __sid);
                }
                elem = null;
            }
            if (this.___BadQueryList != null)
            {
                try
                {
                    if (this.___DeferredEnqueuedScriptCount > 0 && this.___IsOnLoadWindowDocumentCompletedCalled == true)
                    {
                        if (this.___BadQueryList.Count == 10 || this.___BadQueryList.Count == 20 || this.___BadQueryList.Count == 30)
                        {
                            this.___processDocumentEnqueuedScripts(CHtmlEnqeueStatusType.ProcessQueue);
                        }
                    }
                    if (this.___BadQueryList.Count > 50)
                    {
                        System.Text.StringBuilder __thisQuery = new StringBuilder("getElementById:" + __sid);
                        if (this.___BadQueryList.ContainsKey(__sid) && this.___BadQueryList[__sid] > 30)
                        {
                            System.Text.StringBuilder sbError = new StringBuilder();
                            sbError.Append("JavaScript Infinite Loop Exception\r\n");
                            sbError.Append("Current BadQueryList :");
                            sbError.Append(this.___BadQueryList.Count);
                            sbError.Append("\t Elapsed Time :");
                            sbError.Append(" ms.");
                            sbError.Append("\r\ngetElementById(");
                            sbError.Append(__sid);
                            sbError.Append(")\r\n");
                            sbError.Append("Last vs Now :");
                            sbError.Append(" = ");
                            sbError.Append(__thisQuery.ToString());
                            sbError.Append("\r\n");
                            int badCount = this.___BadQueryList.Count;
                            for (int __last = badCount - 5; __last < badCount; __last++)
                            {
                                ///  sbError.Append(this._BadQueryList[__last]);
                                sbError.Append("\r\n");
                            }
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                            {
                                commonLog.LogEntry(sbError.ToString());
                            }
                            this.___BadQueryList = new System.Collections.Generic.Dictionary<string, int>(StringComparer.Ordinal);
                            //return CreateDummyElement("META", __sid);
                            throw new Exception(sbError.ToString());
                        }
                        else
                        {
                            if (this.___BadQueryList.Count > 100)
                            {
                                this.___BadQueryList = new System.Collections.Generic.Dictionary<string, int>(StringComparer.Ordinal);
                                throw new System.SystemException(string.Format("Too Many getElementById({0})", __sid));
                            }
                            else
                            {
                                this.___BadQueryList = new System.Collections.Generic.Dictionary<string, int>(StringComparer.Ordinal);
                            }

                        }
                    }
                }
                catch (System.SystemException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                    {
                        commonLog.LogEntry("Bad Query Handling", ex);
                    }
                }
                if (this.___BadQueryList.ContainsKey(__sid))
                {
                    this.___BadQueryList[__sid]++;
                } else
                {
                    this.___BadQueryList[__sid] = 1;
                }
            }
            else
            {
                if (___NoBadQueryCheck == false)
                {
                    this.___BadQueryList = new System.Collections.Generic.Dictionary<string, int>(StringComparer.Ordinal);
                    this.___BadQueryList[__sid] = 1;

                }
            }
        // ==========================================================================
        // IE6, IE7 also looks element.name if not found
        // ==========================================================================

        FinalPhase:


            return null;
        }
        public static bool IsColGroupOrColElementMustBeImmdiateClose(CHtmlElement __colElement)
        {
            CHtmlDocument ___doc = __colElement.___getDocument();
            if (__colElement != null && ___doc != null)
            {
                System.Text.StringBuilder sbTag = null;

                string sTagInner = "";
                int posSp = 0;
                int ___HtmlBulderLen = ___doc.___HtmlBuilder.Length;
                for (int i = __colElement.___TagOpenEndPosition + 1; i < ___HtmlBulderLen; i++)
                {
                    char c = ___doc.___HtmlBuilder[i];
                    if (c == '<')
                    {
                        sbTag = new System.Text.StringBuilder();
                        continue;
                    }
                    if (c == '>')
                    {
                        sTagInner = sbTag.ToString();
                        posSp = sTagInner.IndexOfAny(commonHTML.CharSpaceCrLfTabZentakuSpace);
                        if (posSp > -1)
                        {
                            sTagInner = sTagInner.Substring(0, posSp);
                        }
                        if (__colElement.___elementTagType == CHtmlElementType.COLGROUP)
                        {
                            if (string.Equals(sTagInner, "COLGROUP", StringComparison.Ordinal) == true)
                                return true;
                            if (string.Equals(sTagInner, "/COLGROUP", StringComparison.Ordinal) == true)
                                return false;
                        }
                        else if (__colElement.___elementTagType == CHtmlElementType.COL)
                        {
                            if (string.Equals(sTagInner, "COL", StringComparison.Ordinal) == true)
                                return true;
                            if (string.Equals(sTagInner, "/COL", StringComparison.Ordinal) == true)
                                return false;
                        }
                        if (commonHTML.TagsRequiresToCloseSortedList.ContainsKey(sTagInner) == true)
                        {
                            return true;
                        }


                        //commonLog.LogEntry("{0}", sTagInner);
                        sbTag = null;
                    }
                    if (sbTag != null)
                    {
                        if (c >= 'a' && c <= 'z')
                        {
                            sbTag.Append(commonHTML.FasterToUpper(c));
                        }
                        else
                        {
                            sbTag.Append(c);
                        }
                    }
                }
            }
            return false;
        }
        public void defineProperty(object ___p1, object ___p2, object ___p3, object ___p4)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
            {
                commonLog.LogEntry("{0}.defineProperty({1}, {2}), {3}", this, ___p1, ___p2, ___p3);
            }
        }
        public void defineProperty(object ___p1, object ___p2, object ___p3)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
            {
                commonLog.LogEntry("{0}.defineProperty({1}, {2}), {3}", this, ___p1, ___p2, ___p3);
            }
        }
        public void defineProperty(object ___p1, object ___p2)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
            {
                commonLog.LogEntry("{0}.defineProperty({1}, {2})", this, ___p1, ___p2);
            }
        }
        private CHtmlElement ___CreateDummyElement(string __tagName, string __id)
        {
            CHtmlElement element = CHtmlDocument.createCHtmlElementWithDomType(__tagName, this.___documentDomType, null);
            element.tagName = commonHTML.FasterToUpper(__tagName);
            element.id = __id;
            element.___documentWeakRef = new WeakReference(this, false);
            //element.___style.display = "hidden";
            if (this.___body != null)
            {
                element.___parentWeakRef = new WeakReference(this.___body, false);
                element.___IsElementVisible = false;
            }
            this.___registerElementDocumentElementID(element);
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
            {
                commonLog.LogEntry("Dummy Element has created  : {0}", element);
            }
            element.___isCalculateElementBoundsCalled = true;
            element.___IsStyleListSortedByHitForThisNode = true;
            element.___isApplyElemenetStyleSheetCalled = true;
            return element;
        }
        public CHtmlElement scrollingElement
        {
            get
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                {
                    commonLog.LogEntry("entering scrollingElement  : {0}", this.toLogString());
                }
                if(this.___body != null)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                    {
                        commonLog.LogEntry(" scrollingElement  returns : {0}", this.___body.toLogString());
                    }
                    return this.___body;
                }
                else
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                    {
                        commonLog.LogEntry("scrollingElement  returns fails : null");
                    }
                    return null;
                }

            }
        }

        public bool fullscreen
        {
            get { return this.___IsFullScreen; }
        }
        public bool mozFullscreen
        {
            get { return this.___IsFullScreen; }
        }
        public bool webkitIsFullScreen
        {
            get { return this.___IsFullScreen; }
        }

        public bool fullscreenEnabled
        {
            get { return this.___IsFullScreenEnabled; }
        }
        public bool mozFullScreenEnabled
        {
            get { return this.___IsFullScreenEnabled; }
        }
        public bool webkitFullScreenEnabled
        {
            get { return this.___IsFullScreenEnabled; }
        }
        public bool msFullScreenEnabled
        {
            get { return this.___IsFullScreenEnabled; }
        }
        public CHtmlElement mozFullScreenElement
        {
            get
            {
                return this.___getFullScreenElement();
            }
        }
        public CHtmlElement webkitFullScreenElement
        {
            get
            {
                return this.___getFullScreenElement();
            }
        }
        public CHtmlElement msFullScreenElement
        {
            get
            {
                return this.___getFullScreenElement();
            }
        }
        public CHtmlElement oFullScreenElement
        {
            get
            {
                return this.___getFullScreenElement();
            }
        }
        public CHtmlElement fullscreenElement
        {
            get
            {
                return this.___getFullScreenElement();
            }
        }
        public CHtmlElement fullScreenElement
        {
            get
            {
                return this.___getFullScreenElement();
            }
        }
        public CHtmlElement webkitFullscreenElement
        {
            get
            {
                return this.___getFullScreenElement();
            }
        }
        private CHtmlElement ___getFullScreenElement()
        {
            if (this.___fullscreenElementWeakReference != null)
            {
                return this.___fullscreenElementWeakReference.Target as CHtmlElement;
            }
            return null;
        }
        public CHtmlElement pointerLockElement
        {
            get
            {
                return this.___getPointerLockElement();
            }
        }
        public CHtmlElement webkitPointerLockElement
        {
            get
            {
                return this.___getPointerLockElement();
            }
        }
        public CHtmlElement mozPointerLockElement
        {
            get
            {
                return this.___getPointerLockElement();
            }
        }
        public CHtmlElement msPointerLockElement
        {
            get
            {
                return this.___getPointerLockElement();
            }
        }
        private CHtmlElement ___getPointerLockElement()
        {
            if (this.___pointerLockElementWeakReference != null)
            {
                return this.___pointerLockElementWeakReference.Target as CHtmlElement;
            }
            return null;
        }
        public void exitFullscreen()
        {

        }
        public void exitFullScreen()
        {

        }
        public void webkitExitFullscreen()
        {

        }
        /// <summary>
        /// Creates an XPathNSResolver which resolves namespaces with respect to the definitions in scope for a specified node.
        /// </summary>
        /// <param name="___elementObject">node object</param>
        /// <returns>XPathNSResolver</returns>
        public CHtmlXPathNSResolver createNSResolver(object ___elementObject)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("document.createNSResolver({0}) is called", ___elementObject);
            }
            return new CHtmlXPathNSResolver(___elementObject);
        }
        public CHtmlXPathNavigator createNavigator()
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("document.createNavigator() is called");
            }
            return new CHtmlXPathNavigator(this);
        }
        /// <summary>
        /// Returns an XPathResult based on an XPath expression and other given parameters.
        /// </summary>
        /// <param name="xpathExpressionObject"></param>
        /// <param name="contextNodeObject"></param>
        /// <param name="namespaceResolverObject"></param>
        /// <param name="resultTypeObject"></param>
        /// <param name="resultObject"></param>
        /// <returns></returns>
        public CHtmlXPathResult evaluate(object xpathExpressionObject, object contextNodeObject, object namespaceResolverObject, object resultTypeObject, object resultObject)
        {
            return this.___evaluate_inner(xpathExpressionObject, contextNodeObject, namespaceResolverObject, resultTypeObject, resultObject);
        }
        private CHtmlXPathResult ___evaluate_inner(object xpathExpressionObject, object contextNodeObject, object namespaceResolverObject, object resultTypeObject, object resultObject)
        {
            bool ___isEvaluateSuccess = false;
            DateTime dtEvaluateStart = DateTime.Now;
            string ___evaluateMessage = null;
            CHtmlBase ___contextNode = null;
            CHtmlXPathNSResolver ___nameResolver = null;
            int ___resultTypeAsInt = -1;
            string ___xpathExpressionString = commonHTML.GetStringValue(xpathExpressionObject);
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("performing document.evaluate({0}, {1}, {2}, {3}, {4})... it will retuns xpath result.", xpathExpressionObject, contextNodeObject, namespaceResolverObject, resultTypeObject, resultObject);
            }


            if (contextNodeObject != null && contextNodeObject is CHtmlBase)
            {
                ___contextNode = contextNodeObject as CHtmlBase;
            }

            if (namespaceResolverObject is CHtmlXPathNSResolver)
            {
                ___nameResolver = namespaceResolverObject as CHtmlXPathNSResolver;
            }
            else
            {

            }

            if (resultTypeObject != null)
            {
                ___resultTypeAsInt = commonHTML.GetIntFromObject(resultTypeObject, 0);
            }

            CHtmlXPathResult ___resultList = new CHtmlXPathResult();

            CHtmlXPathNavigator __chtmlXPathNavigator = this.createNavigator();
            try
            {
                ___resultList.___evaluateResultObject = __chtmlXPathNavigator.Evaluate(___xpathExpressionString);
                if (___resultList.___evaluateResultObject is System.Xml.XPath.XPathNodeIterator)
                {
                    System.Xml.XPath.XPathNodeIterator ___resultIterator = ___resultList.___evaluateResultObject as System.Xml.XPath.XPathNodeIterator;
                    if (___resultIterator != null)
                    {
                        ___resultList.___snapshotLength = (double)___resultIterator.Count;
                    }
                }
                ___isEvaluateSuccess = true;
                ___evaluateMessage = "success";
            }
            catch (Exception eXPathEvaluateException)
            {
                ___isEvaluateSuccess = false;
                ___evaluateMessage = eXPathEvaluateException.Message;
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("ERROR! document.evaluate() exception...", eXPathEvaluateException);
                }
            }
            bool __isLoggedInXPathFile = false;

            if (__isLoggedInXPathFile == false || __isLoggedInXPathFile == true)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                {
                    TimeSpan tpEvaluate = DateTime.Now.Subtract(dtEvaluateStart);
                    commonLog.LogEntry("done! {0}.evaluate(\"{1}\", \"{2}\" , \"{3}\" \"{4}\", \"{5}\") execution completed... result : {6} elapsed: {7} ms...", this, ___xpathExpressionString, ___contextNode, ___nameResolver, ___resultTypeAsInt, resultObject, ___evaluateMessage, tpEvaluate.TotalMilliseconds);
                }

            }
            return ___resultList;
        }
        public void exitPointerLock()
        {
            this.___exitPointerLock_inner();
        }
        public void webkitExitPointerLock()
        {
            this.___exitPointerLock_inner();
        }
        public void mozExitPointerLock()
        {
            this.___exitPointerLock_inner();
        }
        public void msExitPointerLock()
        {
            this.___exitPointerLock_inner();
        }
        private void ___exitPointerLock_inner()
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("TODO : ___exitPoinerLock() is called");
            }
        }
        private bool ___pointerLockEnabled = true;
        public bool pointerLockEnabled
        {
            get
            {
                return this.___pointerLockEnabled;
            }
        }
        public bool webkitPointerLockEnabled
        {
            get
            {
                return this.___pointerLockEnabled;
            }
        }
        public bool mozPointerLockEnabled
        {
            get
            {
                return this.___pointerLockEnabled;
            }
        }
        public bool msPointerLockEnabled
        {
            get
            {
                return this.___pointerLockEnabled;
            }
        }

        
        public void mozCancelFullScreen()
        {
            ___cancelFullScreen_Inner();

        }
        
        public void webkitCancelFullScreen()
        {
            ___cancelFullScreen_Inner();
        }
        
        public void msCancelFullScreen()
        {
            ___cancelFullScreen_Inner();

        }
        
        public void cancelFullScreen()
        {
            ___cancelFullScreen_Inner();
        }

        
        private void ___cancelFullScreen_Inner()
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("TODO : ___CancelFullScreen_Inner() is called");
            }
        }

        
        public CHtmlCollection querySelectorAll(object queryValue)
        {
            string sQuery = commonHTML.GetStringValue(queryValue);
            CHtmlCollection arReturn = commonHTML.GetQuerySelectorListProcessorInner(this, sQuery, CHtmlQuerySelectorType.document_querySelectorAll);
            if (this.___IsMultiversalDocument == true)
            {
                this.___assignHTMLCollectionPrototype(ref arReturn);
            }
            return arReturn;
        }
        
        public CHtmlElement querySelector(object queryValue)
        {
            string sQuery = commonHTML.GetStringValue(queryValue);
            CHtmlCollection list = commonHTML.GetQuerySelectorListProcessorInner(this, sQuery, CHtmlQuerySelectorType.document_querySelector);
            if (list.Count > 0)
            {
                return list[0] as CHtmlElement;
            }
            else
            {
                return null;
            }
        }
        /// <summary>
        /// HTML5 microdata specification
        /// </summary>
        /// <param name="__itemName">name of microdata</param>
        /// <returns>List</returns>
        
        public CHtmlCollection getItems(object __itemName)
        {
            CHtmlCollection arReturn = new CHtmlCollection();
            arReturn.___CollectionType = CHtmlHTMLCollectionType.DocumentGetItemsResult;
            if (this.___IsMultiversalDocument == true)
            {
                this.___assignHTMLCollectionPrototype(ref arReturn);
            }
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("TODO: {0}.getItems({1}) is not supported yet. just returns empty collection....", this, __itemName);
            }
            return arReturn;
        }
        #region matchesSelector
        
        public bool matchesSelector(object ___selector)
        {

            return this.matchesSelectorInner(this.___documentElement, commonHTML.GetStringValue(___selector));
        }
        
        public bool mozMatchesSelector(object ___selector)
        {
            return this.matchesSelectorInner(this.___documentElement, commonHTML.GetStringValue(___selector));
        }
        
        public bool mozmatchesselector(object ___selector)
        {
            return this.matchesSelectorInner(this.___documentElement, commonHTML.GetStringValue(___selector));
        }

        
        public bool matches(CHtmlElement elem, object __selector)
        {
            return this.matchesSelectorInner(elem, commonHTML.GetStringValue(__selector));
        }
        
        public bool mozMatchesSelector(CHtmlElement elem, object __selector)
        {
            return this.matchesSelectorInner(elem, commonHTML.GetStringValue(__selector));
        }
        
        public bool matchesSelector(CHtmlElement elem, object __selector)
        {
            return this.matchesSelectorInner(elem, commonHTML.GetStringValue(__selector));
        }
        
        public bool webkitMatchesSelector(CHtmlElement elem, object __selector)
        {
            return this.matchesSelectorInner(elem, commonHTML.GetStringValue(__selector));
        }
        
        public bool webkitMatchesSelector(object ___selector)
        {
            return this.matchesSelectorInner(this.___documentElement, commonHTML.GetStringValue(___selector));
        }
        /// <summary>
        /// Returns a string denoting the visibility state of the document. values are "visible", "hidden" or, "prerender".
        /// </summary>
        
        public string webkitVisibilityState
        {
            get { return this.___getvisibilityStateString(); }
        }
        
        public string mozVisibilityState
        {
            get { return this.___getvisibilityStateString(); }
        }
        /// <summary>
        /// Returns a string denoting the visibility state of the document. values are "visible", "hidden" or, "prerender".
        /// </summary>
        
        public string VisibilityState
        {
            get { return this.___getvisibilityStateString(); }
        }
        /// <summary>
        /// Returns a string denoting the visibility state of the document. values are "visible", "hidden" or, "prerender".
        /// </summary>
        
        public string visibilityState
        {
            get { return this.___getvisibilityStateString(); }
        }
        /// <summary>
        /// Returns a string denoting the visibility state of the document. values are "visible", "hidden" or, "prerender".
        /// </summary>
        
        public string visibilitystate
        {
            get { return this.___getvisibilityStateString(); }
        }
        private string ___getvisibilityStateString()
        {
            switch (this.___readyStateType)
            {
                case CHtmlReadytStateType.loading:
                case CHtmlReadytStateType.interactive:
                case CHtmlReadytStateType.uninitialized:
                    return "hidden";
                case CHtmlReadytStateType.complete:
                    return "visible";
            }
            return "visible";
        }
        /// <summary>
        /// Returns true if the page is in a state considered to be hidden to the user, and false otherwise.
        /// </summary>
        public bool webkitHidden
        {
            get
            {
                return ___getHiddenAsBoolean();
            }
        }
        internal bool ___getHiddenAsBoolean()
        {
            string sHidden = this.___getvisibilityStateString();
            if (string.Equals(sHidden, "hidden", StringComparison.Ordinal) == true)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        /// <summary>
        /// Returns true if the page is in a state considered to be hidden to the user, and false otherwise.
        /// </summary>
        public bool Hidden
        {
            get
            {
                return ___getHiddenAsBoolean();
            }
        }
        /// <summary>
        /// Returns true if the page is in a state considered to be hidden to the user, and false otherwise.
        /// </summary>
        public bool hidden
        {
            get
            {
                return ___getHiddenAsBoolean();
            }
        }

        
        private bool matchesSelectorInner(CHtmlElement elem, string __selector)
        {
            if (elem == null)
                return false;
            CHtmlCollection elems = this.querySelectorAll(__selector);
            return elems.___containsObjectHash(elem.GetHashCode());
        }

        #endregion
        /// <summary>
        /// 
        /// </summary>
        /// <param name="___interpretorType"></param>
        internal void ___createAllElementListFromDocumentElement()
        {
            if (___getElementsByTagNameWildCardSearchLastResult == null)
            {
                this.___getElementsByTagNameWildCardSearchLastResult = new CHtmlCollection();

            }
            else
            {
                if (this.___getElementsByTagNameWildCardSearchLastResult.Count > 0)
                {
                    CHtmlElement ___lastElement = this.___getElementsByTagNameWildCardSearchLastResult[this.___getElementsByTagNameWildCardSearchLastResult.Count - 1] as CHtmlElement;
                    if (___lastElement != null)
                    {
                        if (commonHTML.isElementAdHocNumberIsEqualToCurrent(___lastElement.___elementOID) == false)
                        {
                            this.___getElementsByTagNameWildCardSearchLastResult.Clear();
                        }
                        else
                        {
                            return;
                        }
                    }
                    else
                    {
                        this.___getElementsByTagNameWildCardSearchLastResult.Clear();
                    }
                }
            }
            if (this.___documentElement != null)
            {
                // top node is not inclued in ___createChildElementListWithEnqueueDequeue
                if (this.___documentElement != null && this.___documentElement.___elementTagType == CHtmlElementType.HTML)
                {
                    this.___getElementsByTagNameWildCardSearchLastResult.Add(this.___documentElement);
                }

                this.___documentElement.___createChildElementListWithEnqueueDequeue(this.___getElementsByTagNameWildCardSearchLastResult, CHtmlElementQueryType.All, null);

                this.___getElementsByTagNameWildCardSearchLastResult_ALL_COUNT = this.___getElementsByTagNameWildCardSearchLastResult.Count;
            }



            return;
        }



        public object ___createDocumentAllFunctionObject(System.Collections.ArrayList ___baseList)
        {
            return null;
        }

        public CHtmlCollection getElementsByTagName(string __tagName)
        {
            if (__tagName == null)
            {
                __tagName = "*";
            }
            if (this.___IsDomModeAnyHTML() == true)
            {
                if (this.___DocumentWriteBuilder != null && this.___DocumentWriteBuilder.Length > 0)
                {
                    this.CreateElementImmediatelyFromDocumentWrittenStringData();
                }
            }


            string __tagNameUpper = null;
            if (__tagName.Length == 1)
            {
                char ___charTop = __tagName[0];
                if (___charTop >= 'a' && ___charTop <= 'z')
                {
                    __tagNameUpper = commonHTML.FasterToUpper(___charTop).ToString();
                }
                else
                {
                    __tagNameUpper = ___charTop.ToString();
                }
            }
            else
            {
                __tagNameUpper = commonHTML.FasterToUpper(__tagName);
            }

            CHtmlCollection arReturn = new CHtmlCollection();
            if (this.___IsMultiversalDocument == true)
            {
                this.___assignHTMLCollectionPrototype(ref arReturn);
            }
            arReturn.___CollectionType = CHtmlHTMLCollectionType.DocumentGetElementsByTagNameList;
            arReturn.QueryString = __tagName;


            CHtmlElementType searchType = commonHTML.GetTagNameType(__tagNameUpper);
            if (searchType == CHtmlElementType.ASTERISK && commonHTML.DOCUMENT_GETELEMENTSBYTAGNAME_WILDCARD_LOOKUP_CHILDNODES == true)
            {
                if (this.___documentElement != null)
                {
                    this.___documentElement.___createChildElementListWithEnqueueDequeue(arReturn, CHtmlElementQueryType.All, null);
                    this.___getElementsByTagNameWildCardSearchLastResult = arReturn;
                    this.___getElementsByTagNameWildCardSearchLastResult_ALL_COUNT = arReturn.Count;
                    goto ReturnPhase;
                }

            }
            if (this.___IsDomModeAnyHTML() == true)
            {
                switch (searchType)
                {
                    case CHtmlElementType.HEAD:
                        {
                            if (this.___head != null)
                            {
                                arReturn.Add(this.___head);
                                goto ReturnPhase;
                            }

                            break;
                        }
                    case CHtmlElementType.BODY:
                        {
                            if (this.___body != null)
                            {
                                arReturn.Add(this.___body);
                                goto ReturnPhase;

                            }
                            break;
                        }
                    case CHtmlElementType.HTML:
                        {
                            if (this.___documentElement != null)
                            {
                                arReturn.Add(this.___documentElement);
                                goto ReturnPhase;

                            }
                            break;
                        }
                }


                if (commonHTML.DOCUMENT_GETLEMENTSBYTAGNAME_WITH_TAG_SHOULD_SEARCH_FROM_DOCUMENT_ELEMMENTS == true && this.___documentElement != null)
                {
                    this.___documentElement.___createChildElementListWithEnqueueDequeue(arReturn, CHtmlElementQueryType.GetElementsByTagName, __tagName);
                    goto ReturnPhase;
                }
            }




            //commonLog.LogEntry("getElementsByTagName({0}) returns {1} out o {2}",_tagNameLow, arReturn.Count, ___allCount);
            if (arReturn.Count == 0 && searchType == CHtmlElementType.SCRIPT)
            {
                if (this.___head != null)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("getElementsByTagName Script returns 0. but create one now.");
                    }
                    CHtmlElement ___dummyScript = new CHtmlElement();
                    ___dummyScript.___SetTagNameOnly("SCRIPT");
                    ___dummyScript.___elementTagType = CHtmlElementType.SCRIPT;
                    ___dummyScript.___parentWeakRef = new WeakReference(this.___head, false);
                    ___dummyScript.___IsElementVisible = false;
                    ___dummyScript.___IsDynamicElement = true;
                    ___dummyScript.___IsSystemHidden = true;
                    arReturn.Add(___dummyScript);
                }
                else
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("TODO: Strange! getElementsByTagName Script returns 0. but no head element");
                    }
                }
            }
        ReturnPhase:
            return arReturn;

        }





        
        public CHtmlCollection getElementsByClassName(string __className)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("calling document.getElementsByClassName(\"{0}\")", __className);
            }
            if (this.___DocumentWriteBuilder != null && this.___DocumentWriteBuilder.Length > 0)
            {
                this.CreateElementImmediatelyFromDocumentWrittenStringData();
            }
            CHtmlCollection arReturn = new CHtmlCollection();
            arReturn.___CollectionType = CHtmlHTMLCollectionType.DocumentGetElementsByClassNameList;
            if (this.___IsMultiversalDocument == true)
            {
                this.___assignHTMLCollectionPrototype(ref arReturn);
            }
            string __classNameLow = commonHTML.FasterToLower(__className);
            string[] __classNameSplit = __classNameLow.Split(commonHTML.CharSpaceCrLfTab, StringSplitOptions.RemoveEmptyEntries);
            bool IsMultipleClassSearch = false;
            if (__classNameSplit.Length > 1)
            {
                IsMultipleClassSearch = true;
            }


            try
            {
                if (this.___documentElement != null)
                {
                    if (IsMultipleClassSearch == false)
                    {
                        this.___documentElement.___createChildElementListWithEnqueueDequeue(arReturn, CHtmlElementQueryType.GetElementsByClassName, __className);
                    }
                    else
                    {
                        foreach (string strClass in __classNameSplit)
                        {
                            this.___documentElement.___createChildElementListWithEnqueueDequeue(arReturn, CHtmlElementQueryType.GetElementsByClassName, strClass);
                        }
                    }

                }
            }
            catch
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                {
                    commonLog.LogEntry("Enumrating all error");
                }
            }
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("document.getElementsByClassName(\"{0}\") returns {1}...", __className, arReturn.Count);
            }
            return arReturn;
        }
        /// <summary>
        /// DHTML getElementsByName return ArrayList
        /// </summary>
        /// <param name="__tagName"></param>
        /// <returns></returns>

        
        public CHtmlCollection getElementsByName(string __Name)
        {
            if (this.___DocumentWriteBuilder != null && this.___DocumentWriteBuilder.Length > 0)
            {
                this.CreateElementImmediatelyFromDocumentWrittenStringData();
            }
            CHtmlCollection arReturn = new CHtmlCollection();
            arReturn.___CollectionType = CHtmlHTMLCollectionType.DocumentGetElementsByNameList;
            if (this.___IsMultiversalDocument == true)
            {
                this.___assignHTMLCollectionPrototype(ref arReturn);
            }
            try
            {
                string lName = commonHTML.FasterTrimAndToLower(__Name);
                if (this.___documentElement != null)
                {
                    this.___documentElement.___createChildElementListWithEnqueueDequeue(arReturn, CHtmlElementQueryType.GetElementsByName, lName);
                }
            }
            catch
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                {
                    commonLog.LogEntry("Enumrating all error");
                }
            }
            return arReturn;
        }

        /// <summary>
        /// Store Cookie into Document
        /// </summary>
        /// <param name="___htmlCookie"></param>
        public void ___storeCookie(CHtmlCookie ___htmlCookie)
        {
            if (___htmlCookie != null)
            {
                if (System.Threading.Monitor.TryEnter(this.___cookieLockingObject, 100))
                {
                    try
                    {
                        int pos = this.___cookieList.BinarySearch(___htmlCookie, new CHtmlCookieComparerGeneric());
                        if (pos >= 0)
                        {
                            this.___cookieList[pos] = ___htmlCookie;
                        }
                        else
                        {
                            pos = ~pos;
                            this.___cookieList.Insert(pos, ___htmlCookie);

                        }
                    }
                    finally
                    {
                        System.Threading.Monitor.Exit(this.___cookieLockingObject);
                        this.___cookieUpdatedTime = DateTime.Now;
                    }
                }
            }
        }

        
        public string cookie
        {
            get
            {
                if (___CheckNewCookieValueRequired == false || this.___CurrentCookieString.Length != 0)
                {
                    return ___CurrentCookieString;
                }
                try
                {

                    System.Text.StringBuilder sbCookie = new StringBuilder();
                    if (this.___cookieList != null)
                    {
                        int cookieCount = this.___cookieList.Count;
                        for (int i = 0; i < cookieCount; i++)
                        {
                            CHtmlCookie ___htmlCookie = this.___cookieList[i];
                            if (___htmlCookie != null)
                            {
                                if (i > 0)
                                {
                                    sbCookie.Append("; ");
                                }
                                sbCookie.Append(___htmlCookie.Name);
                                sbCookie.Append("=");
                                sbCookie.Append(___htmlCookie.Value);
                            }
                        }
                        ___CheckNewCookieValueRequired = false;
                        ___CurrentCookieString = sbCookie.ToString();
                        return sbCookie.ToString();
                    }
                    else
                    {
                        ___CheckNewCookieValueRequired = false;
                        ___CurrentCookieString = sbCookie.ToString();
                        return sbCookie.ToString();
                    }
                }
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                    {
                        commonLog.LogEntry("Get Cookie", ex);
                    }
                }
                return "";
            }
            set
            {
                ___CheckNewCookieValueRequired = true;
                this.___CurrentCookieString = "";
                try
                {
                    /*
					 * [06:51:31.942] Set Cookie is called : 'i2iUpad=1; expires=13 Nov 2011 09:51:31 GMT'
					   [06:51:31.942] Set Cookie is called : 'i2iZenkai=1321177891932; expires=13 Nov 
					   2011 09:51:31 GMT'
					   [06:51:31.952] Set Cookie is called : 'MFac00026423=125.30.194.44.1305810254;
					   expires=11 Nov 2012 09:51:31 GMT'
					   [06:51:31.992] Set Cookie is called : 'UQac00026423=125.30.194.44.1305810254; 
					   expires=12 Nov 2011 10:21:31 GMT'
					   [06:51:32.002] Set Cookie is called : 'ACac00026423=1; expires=11 Nov 2012 09:51:32 GMT'
					   [06:51:32.013] Set Cookie is called : 'VDac00026423=1305810254; expires=11 Nov
						2012 09:51:32 GMT'
					   [06:51:32.013] Set Cookie is called : 'VCac00026423=1; expires=11 Nov 2012 09:51:32 GMT'
					*/

                    string _strCookieValue = value;
                    CHtmlCookie _htmlCookie = new CHtmlCookie();
                    string[] spCookieValue = _strCookieValue.Split(';');
                    int ValuePos = 0;
                    string sName = "";
                    string sValue = "";
                    int ___spCookieCount = spCookieValue.Length;
                    for (int i = 0; i < ___spCookieCount; i++)
                    {
                        string sCookieValue = spCookieValue[i];
                        if (sCookieValue.Length == 0 || sCookieValue.Length < 2)
                        {
                            continue;
                        }
                        sName = "";
                        sValue = "";
                        int posEqual = sCookieValue.IndexOf('=');
                        if (posEqual > -1)
                        {
                            sName = sCookieValue.Substring(0, posEqual);
                            sValue = sCookieValue.Substring(posEqual + 1);
                            if (string.IsNullOrEmpty(sName) == false)
                            {
                                if (commonHTML.FasterIsWhiteSpaceLimited(sName[0]) == true || commonHTML.FasterIsWhiteSpaceLimited(sName[sName.Length - 1]) == true)
                                {
                                    sName = sName.Trim();
                                }
                            }
                            if (string.IsNullOrEmpty(sValue) == false)
                            {
                                if (commonHTML.FasterIsWhiteSpaceLimited(sValue[0]) == true || commonHTML.FasterIsWhiteSpaceLimited(sValue[sValue.Length - 1]) == true)
                                {
                                    sValue = sValue.Trim();
                                }
                            }
                        }
                        if (ValuePos == 0)
                        {
                            _htmlCookie.Name = sName;
                            _htmlCookie.Value = sValue;
                        }
                        else
                        {
                            switch (sName)
                            {
                                case "Expires":
                                case "expires":
                                    try
                                    {
                                        if (sValue.Length <= 3 || string.Equals(sValue, "Invalid Date", StringComparison.Ordinal) == true)
                                        {
                                            _htmlCookie.Expires = DateTime.Today.AddDays(7);
                                            break;
                                        }
                                        int posGMT = sValue.IndexOf("GMT", StringComparison.OrdinalIgnoreCase);
                                        if (posGMT > -1)
                                        {
                                            sValue = sValue.Substring(0, posGMT - 1);
                                        }
                                        int posUTC = sValue.IndexOf("UTC", StringComparison.OrdinalIgnoreCase);
                                        if (posUTC > -1)
                                        {
                                            sValue = sValue.Substring(0, posUTC - 1);
                                        }
                                        // Check first Day Part
                                        int posConma = sValue.IndexOf(',');
                                        if (posConma > -1)
                                        {
                                            string sSub = sValue.Substring(0, posConma);
                                            sSub = commonHTML.FasterTrimAndToUpper(sSub);
                                            switch (sSub)
                                            {
                                                case "MON":
                                                case "SUN":
                                                case "SAT":
                                                case "TUE":
                                                case "FRI":
                                                case "WED":
                                                case "THU":
                                                    sValue = sValue.Substring(posConma + 1);
                                                    break;
                                            }

                                        }
                                        //System.Globalization.CultureInfo enCulture = new System.Globalization.CultureInfo("en-US");
                                        _htmlCookie.Expires = DateTime.Parse(sValue);
                                    }
                                    catch (Exception ex)
                                    {
                                        if (commonLog.LoggingEnabled == true && commonLog.CommonLogLevel >= 5)
                                        {
                                            commonLog.LogEntry("Cookie ParseDate Failed {0} '{1}' Original: {2}", ex.Message, sValue, _strCookieValue);
                                        }
                                        _htmlCookie.Expires = DateTime.Today.AddDays(7);
                                    }
                                    break;
                                case "path":
                                case "Path":
                                    _htmlCookie.Path = sValue;
                                    break;
                                case "domain":
                                case "Domain":
                                    _htmlCookie.Domain = sValue;
                                    break;
                                default:
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                                    {
                                        commonLog.LogEntry("Unknown Properties in cookie name: {0} value: {1}", sName, sValue);
                                    }
                                    break;

                            }
                        }
                        ValuePos++;
                    }
                    _htmlCookie.TimeStamp = DateTime.Now;
                    _htmlCookie.Domain = base.___locationBase.host;
                    if (this.___locationBase.___protocolType == CHtmlUriProtocolType.https)
                    {
                        _htmlCookie.Secure = true;
                    }
                    _htmlCookie.Port = "";
                    int PosLastSlash = base.___locationBase.pathname.LastIndexOf('/');
                    if (PosLastSlash > 0)
                    {
                        _htmlCookie.Path = base.___locationBase.pathname.Substring(0, PosLastSlash);
                    }
                    else
                    {
                        _htmlCookie.Path = base.___locationBase.pathname;
                    }
                    // Use Add method to store cookie
                    this.___storeCookie(_htmlCookie);
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                    {
                        commonLog.LogEntry("Set Cookie is called : \'{0}\' {1} {2} {3}", value, _htmlCookie.Name, _htmlCookie.Value, _htmlCookie.Path);
                    }
                    //this.___storeDocumentDataIntoMCS();
                }
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                    {
                        commonLog.LogEntry("[Cookie Handling Error]\r\n" + value + "\r\n" + commonData.GetExceptionAsString(ex));
                    }
                    else if (commonLog.LoggingEnabled)
                    {
                        commonLog.LogEntry("[Cookie Handling Error]" + ex.Message + " : " + value);
                    }
                }

            }
        }

        private void CreateDocumentWriteBuilder()
        {
            if (this.___DocumentWriteBuilder == null)
            {
                this.___DocumentWriteBuilder = new StringBuilder(1000);
            }
        }

        public void write()
        {
            if (this.___DocumentWriteBuilder == null)
            {
                this.___DocumentWriteBuilder = new StringBuilder(1000);
            }
            this.___write_inner();


        }
        public void writeln()
        {
            if (this.___DocumentWriteBuilder == null)
            {
                this.___DocumentWriteBuilder = new StringBuilder(1000);
            }
            this.___DocumentWriteBuilder.Append("\r\n");
            this.___write_inner();
        }

        public void write(params object[] ___objStr)
        {

            if (this.___DocumentWriteBuilder == null)
            {
                this.___DocumentWriteBuilder = new StringBuilder(1000);
            }
            foreach(object obj in ___objStr)
            {
                this.___DocumentWriteBuilder.Append(commonHTML.GetStringValue(obj));
;           }
            this.___write_inner();
        }
           





        /// <summary>
        /// DHTML write() method
        /// </summary>
        /// <param name="__tagName"></param>
        /// <returns></returns>
        
        private void ___write_inner()
        {
            if(this.___DocumentWriteBuilder == null)
            {
                if (commonLog.LoggingEnabled)
                {
                    commonLog.LogEntry("stange... document.___write_inner() called, but ___DocumentWriteBuilder is null...");
                }
                return;
            }
            int ____beginingHTMLBuilderLength = this.___HtmlBuilder.Length;


            if (this.___isParseDocumentEntered == false)
            {
                bool isCompleteDoc = false;
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("document.write() is called but while parseDocument() is not called : {0} Startup Length : {1}                             CurrentLength : {2} ", this.___DocumentWriteBuilder.ToString(), ____beginingHTMLBuilderLength, this.___DocumentWriteBuilder.Length);
                }
                int __HTMLStartStartPos = -1;
                int __HTMLEndStartPos = -1;
                if (this.___DocumentWriteBuilder != null)
                {

                    isCompleteDoc = commonHTML.___isStringBuilderContainedHTMLCompleteDocument(ref this.___DocumentWriteBuilder, ref __HTMLStartStartPos, ref __HTMLEndStartPos);
                }
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("StringBuilder HTML entity check result : {0} Start : {1} End : {2}", isCompleteDoc, __HTMLStartStartPos, __HTMLEndStartPos);
                }
                if (isCompleteDoc == true)
                {
                    bool isHTMLAppendSuccess = false;
                    if (this.___HtmlBuilder != null && this.___HtmlBuilder.Length == 0)
                    {
                        this.___HtmlBuilder.Append(this.___DocumentWriteBuilder.ToString());
                        this.___HtmlBuilderLength = this.___HtmlBuilder.Length;
                        this.___DocumentWriteBuilder = null;
                        isHTMLAppendSuccess = true;
                    }
                    else if (this.___HtmlBuilder != null && this.___HtmlBuilder.Length > 0)
                    {
                        if (this.___MultiversalWindow.___WindowLevel >= 2)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("Strange HTMLBuilder contains some HTML but cont...");
                            }
                            this.___HtmlBuilder.Append(this.___DocumentWriteBuilder.ToString());
                            this.___HtmlBuilderLength = this.___HtmlBuilder.Length;
                            this.___DocumentWriteBuilder = null;
                        }
                        isHTMLAppendSuccess = true;
                    }
                    if (isHTMLAppendSuccess == true)
                    {
                        if (this.___MultiversalWindow != null)
                        {
                            if (this.___MultiversalWindow.___WindowLevel >= 2)
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                {
                                    commonLog.LogEntry(" ___documentwrite_processor merged document.write() data into html for window :{0}", this.___MultiversalWindow);
                                }
                                this.___IsHtm1stHttpResponseCompleted = true;

                                this.___IsHtmlResponseCompleted = true;
                                this.___responseStartTime = DateTime.Now;
                                this.___ContentLength = this.___HtmlBuilder.Length;
                                if (this.___locationBase == null)
                                {
                                    this.___locationBase = new CHtmlLocationBase();
                                }
                                this.___locationBase.___setHrefDirect(string.Copy(commonHTML.DOCUMENT_URL_FOR_DYNAMIC_CONTENT));
                                this.___URL = string.Copy(commonHTML.DOCUMENT_URL_FOR_DYNAMIC_CONTENT);
                                DateTime documentWriteFullParseStartTime = DateTime.Now;

                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                {
                                    TimeSpan tpSpan = DateTime.Now.Subtract(documentWriteFullParseStartTime);
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                    {
                                        commonLog.LogEntry("document creation process done of ___document_processor() in {0} ms...", tpSpan.TotalMilliseconds);
                                    }
                                }
                            }
                            else
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                {
                                    commonLog.LogEntry("Strange... ___documentwrite_processor merged document.write() data into html, but ownerWindow Level is less than 2. Skip....");
                                }
                            }
                        }
                    }

                }
                else
                {
                    // just keep on...
                }
            }

        }

        private void MergeDocumentWriteBuilder(int __pos)
        {
            if (__pos < 0 || __pos > this.___HtmlBuilderLength || this.___HtmlBuilderLength == 0)
                return;
            if (this.___DocumentWriteBuilder != null && this.___DocumentWriteBuilder.Length > 0)
            {
                bool __IsHtmlBuilderLocked = false;
                bool __IsDocumentWriteContentsShouldWrittenAfterBody = false;
                string ___ReasonString = "";
                try
                {
                    if (this.___IsHtmlBodyTagPassed == false)
                    {
                        string __FirstTag = "";
                        try
                        {
                            char c = '\0';
                            int ___DocumentWriteBuilderLen = this.___DocumentWriteBuilder.Length;
                            for (int i = 0; i < ___DocumentWriteBuilderLen; i++)
                            {
                                c = this.___DocumentWriteBuilder[i];
                                if (commonHTML.FasterIsWhiteSpaceLimited(c))
                                    continue;
                                if (char.IsLetterOrDigit(c))
                                {
                                    __IsDocumentWriteContentsShouldWrittenAfterBody = true;
                                    ___ReasonString = "First Char : " + c.ToString();
                                    __FirstTag = c.ToString();
                                    break;
                                }
                                else if (c == '<')
                                {
                                    System.Text.StringBuilder sbFirstTag = new StringBuilder();
                                    int ______DocumentWriteBuilderLen = ___DocumentWriteBuilder.Length;
                                    for (int ni = i + 1; ni < ______DocumentWriteBuilderLen; ni++)
                                    {
                                        char nc = this.___DocumentWriteBuilder[ni];
                                        if (nc == '>' || commonHTML.FasterIsWhiteSpaceLimited(nc) == true)
                                            break;
                                        if (nc >= 'a' && nc <= 'z')
                                        {
                                            sbFirstTag.Append(commonHTML.FasterToUpper(nc));
                                        }
                                        else
                                        {
                                            sbFirstTag.Append(nc);

                                        }
                                    }
                                    if (sbFirstTag.Length > 0)
                                    {
                                        switch (sbFirstTag.ToString())
                                        {
                                            case "LINK":
                                            case "TITLE":
                                            case "META":
                                            case "SCRIPT":
                                            case "!DOCTYPE":
                                            case "HEAD":
                                                __IsDocumentWriteContentsShouldWrittenAfterBody = false;
                                                __FirstTag = sbFirstTag.ToString();
                                                goto HeadCheckDone;
                                            default:
                                                __IsDocumentWriteContentsShouldWrittenAfterBody = true;
                                                __FirstTag = sbFirstTag.ToString();
                                                ___ReasonString = "First Tag : " + sbFirstTag.ToString();
                                                goto HeadCheckDone;
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                            {
                                commonLog.LogEntry("MergeDocumentWriteBuilder Precheck", ex);
                            }
                        }
                    HeadCheckDone:
                        if (__IsDocumentWriteContentsShouldWrittenAfterBody == true && this.___IsHtmlBodyTagPassed == false)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                            {
                                commonLog.LogEntry("document.write content \"{0}\" non-head tag written before body [{1}] Reason : {2}", this.___DocumentWriteBuilder.ToString(), __FirstTag, ___ReasonString);
                                commonLog.LogEntry("Inserting Postion : {0} HTMLBuilder Length {1}", __pos, this.___HtmlBuilder.Length);
                            }


                        }
                    }
                    // Do not set wait interval. It cause a way slow.

                    __IsHtmlBuilderLocked = Monitor.TryEnter(this.___HtmlBuilderLockObject, 3000);

                    if (__IsHtmlBuilderLocked)
                    {

                        //this.HtmlBuilder.Insert(this.___curHTMLParsePosition + 1, this._DocumentWriteBuilder.ToString());
                        this.___HtmlBuilder.Insert(__pos + 1, this.___DocumentWriteBuilder.ToString());
                        this.___DocumentWriteCharsTotal += ___DocumentWriteBuilder.Length;
                        this.___DocumentWriteBuilder = null;
                        //commonLog.LogEntry("DocumentWriteBlock Insert Pos :{0} Len : {1}",this.___curHTMLParsePosition, _DocumentWriteBuilder.Length);
                    }
                    else
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
                        {
                            commonLog.LogEntry("Unable to obtain HTMLBuilder Lock Object");
                        }
                        return;
                    }



                }
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
                    {
                        commonLog.LogEntry("MergeDocumentWriteBuilder Exception ", ex);
                    }
                }
                finally
                {
                    if (__IsHtmlBuilderLocked)
                    {
                        Monitor.Exit(this.___HtmlBuilderLockObject);
                    }
                }
            }
            this.___DocumentWriteBuilder = null;
        }
        /// <summary>
        /// If document.write string exists create element based upon written html
        /// Note) Some script line adgngo script, does search element just right after
        /// document.write("div id=hogehoge); document.getlementbyid....)
        /// it may cause trouble for scripts
        /// tags must be closed properly and should not be string started and end.
        /// document.getElementById 
        /// document.getElementsByClassName
        /// document.getElementsByName 
        /// may call this method at this point
        /// </summary>
        
        internal void CreateElementImmediatelyFromDocumentWrittenStringData()
        {
            if (this == null || this.___Disposing == true)
                return;
            if (this.___DocumentWriteBuilder != null && this.___DocumentWriteBuilder.Length > 0)
            {
                CHtmlCollection elementList = null;
                CHtmlElement ___targetParentElement = null;
                int __count = 0;

                try
                {
                    string ____strTempHTML = this.___DocumentWriteBuilder.ToString();
                    if (this.___DocumentWriteBuilder != null)
                    {
                        // ========================================================================
                        // !!!! CAUTION!!!!!
                        // Need Clear Document Write because created element may be script block
                        // We must clear buffer in order to create element may call getElement etc.
                        // ========================================================================
                        this.___DocumentWriteBuilder = null;
                        // ========================================================================
                    }

                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("-------------------[Current document.write]-------\r\n");
                        commonLog.LogEntry(____strTempHTML);
                        commonLog.LogEntry("---------------------------------------------------\r\n");
                    }

                    elementList = commonHTML.CreateCHtmlElementsFromHTML(____strTempHTML);

                    if (elementList.Count > 0)
                    {
                        if (this.___currentParentElement != null)
                        {
                            if (this.___currentParentElement.___elementTagType == CHtmlElementType.SCRIPT || commonHTML.IsElemeneITextOrIDrawOrComment(this.___currentParentElement) == true)
                            {
                                ___targetParentElement = this.___currentParentElement.___parent as CHtmlElement;

                            }
                            else
                            {
                                ___targetParentElement = this.___currentParentElement;
                            }

                        }
                        if (___targetParentElement != null)
                        {
                            if (___targetParentElement != null && ___targetParentElement.___parentWeakRef == null)
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                {
                                    commonLog.LogEntry("CreateElementImmediatelyFromDocumentWrittenStringData() found target seems be removed  : {0}", ___targetParentElement);
                                }
                                ___targetParentElement = null;
                                if (this.___CurrentParentNodeStackList != null)
                                {
                                    for (int stackPos = this.___CurrentParentNodeStackList.Count - 1; stackPos >= 0; stackPos--)
                                    {
                                        System.WeakReference ___stackElementReference = this.___CurrentParentNodeStackList[stackPos];
                                        if (___stackElementReference != null)
                                        {
                                            CHtmlElement ___stackElement = ___stackElementReference.Target as CHtmlElement;
                                            if (___stackElement != null && ___stackElement.___IsSystemHidden == false)
                                            {
                                                if (___stackElement.___elementTagType != CHtmlElementType.SCRIPT || ___stackElement.___elementTagType != CHtmlElementType.COMMENT)
                                                {
                                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                                    {
                                                        commonLog.LogEntry("CreateElementImmediatelyFromDocumentWrittenStringData()  picked up \"{0}\" as Target Element ", ___stackElement);
                                                    }
                                                    ___targetParentElement = ___stackElement;
                                                    goto AppendChildSection;
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                goto AppendChildSection;
                            }
                        }

                        if (___targetParentElement == null)
                        {
                            if (this.___IsHtmlBodyTagPassed == true)
                            {
                                if (this.___body != null)
                                {
                                    ___targetParentElement = this.___body;
                                }
                            }

                            if (this.___head != null)
                            {
                                ___targetParentElement = this.___head;
                            }
                        }


                        if (___targetParentElement == null)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                            {
                                commonLog.LogEntry("CreateElementImmediatelyFromDocumentWrittenStringData could find parent");
                            }
                            goto CreationDone;
                        }
                    AppendChildSection:
                        int cCount = elementList.Count;
                        for (int i = 0; i < cCount; i++)
                        {
                            CHtmlElement newElement = elementList[i] as CHtmlElement;
                            if (newElement != null)
                            {

                                newElement.___ChildNodeIndex = -1;
                                ___targetParentElement.___appendChildInner(newElement);
                                __count++;
                            }
                        }
                    }
                    else
                    {

                    }
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                    {
                        commonLog.LogEntry("CreateElementImmediatelyFromDocumentWrittenStringData created {0} in {1}", __count, ___targetParentElement);
                    }
                }
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                    {
                        commonLog.LogEntry("CreateElementImmediatelyFromDocumentWrittenStringData", ex);
                    }

                }
            CreationDone:

                elementList = null;
                /*
				if(this._DocumentWriteBuilder != null && this._DocumentWriteBuilder.Length > 0)
				{
					this._DocumentWriteBuilder.Remove(0, this._DocumentWriteBuilder.Length);
				}
                */
                this.___DocumentWriteBuilder = null;
                //commonLog.LogEntry("DocumenntWriteBuilder is null");

            }
            else
            {
                /*
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 11)
				{
					commonLog.LogEntry("documet.write was empty");
				}
                 */
                /*
				if(this._DocumentWriteBuilder != null && this._DocumentWriteBuilder.Length > 0)
				{
					this._DocumentWriteBuilder.Remove(0, this._DocumentWriteBuilder.Length);
				}
                 */
                this.___DocumentWriteBuilder = null;
            }

        }
        /// <summary>
        /// For document.write method
        /// </summary>
        
        public CHtmlDocument open()
        {
            return this.___open_inner(null, null);
        }
        /// <summary>
        /// For document.write method
        /// </summary>
        
        public CHtmlDocument open(object ___mimetype)
        {
            return this.___open_inner(___mimetype, null);
        }
        /// <summary>
        /// For document.write method
        /// </summary>
        
        public CHtmlDocument open(object ___mimetype, object ___replace)
        {
            return this.___open_inner(___mimetype, ___replace);
        }
        public CHtmlDocument ___open_inner(object ___mimeType, object ___replace)
        {
            this.___IsDocumentWriteOpen = true;
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
            {
                commonLog.LogEntry("{0}.open({1}, {2}) called", this, ___mimeType, ___replace);
            }
            // it may retuns document it self.
            return this;
        }





        /// <summary>
        /// DHTML writeln() method
        /// In HTML, the carriage return is ignored unless it occurs within preformatted text. 
        /// You should not use the write or writeln methods on the current document after the
        /// document has finished loading unless you first call the open method, which clears 
        /// the current document's window and erases all variables.
        /// Note  When document.write or document.writeln is used in an event handler, 
        /// document.close should also be used.
        /// </summary>
        /// <param name="__tagName"></param>
        /// <returns></returns>

        public void writeln(params object[] args)
        {
            if (this.___DocumentWriteBuilder == null)
            {
                this.___DocumentWriteBuilder = new StringBuilder(1000);
            }
            foreach(object obj in args)
            {
                this.___DocumentWriteBuilder.Append(commonHTML.GetStringValue(obj));
                this.___DocumentWriteBuilder.Append("\r\n");
            }
            this.___write_inner();
        }



        /// <summary>
        /// DHTML close() method
        /// </summary>
        /// <param name="__tagName"></param>
        /// <returns></returns>
        
        public void close()
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
            {
                commonLog.LogEntry("{0}.close() called", this);
            }
            if (this.___isParseDocumentEntered == true)
            {
                if (this.___DocumentWriteBuilder != null)
                {
                    this.CreateElementImmediatelyFromDocumentWrittenStringData();
                }
            }
            else
            {

                if (this.___DocumentWriteBuilder != null && this.___DocumentWriteBuilder.Length != 0)
                {
                    if (___isParseDocumentEntered == false)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
                        {
                            commonLog.LogEntry("{0}.close() called, but parseDocument is not called. run it now.: {1}", this, this.___DocumentWriteBuilder.ToString());
                        }
                        this.___URL = "about://dynamicload/";
                        this.___HtmlBuilder.Append(this.___DocumentWriteBuilder.ToString());
                        this.___IsHtmlResponseCompleted = true;
                        this.___parseDocument();
                        this.___HtmlBuilderLength = this.___HtmlBuilder.Length;
                    }
                    else
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
                        {
                            commonLog.LogEntry("TODO: {0}.close() called, but parseDocument has been called.", this, this.___DocumentWriteBuilder.ToString());
                        }
                    }
                }
                this.___DocumentWriteBuilder = null;

            }

            this.___IsDocumentWriteOpen = false;
            return;
        }




        
        public CHtmlWindowEvent createEventObject()
        {
            return this.___createEventInner("");
        }
        
        public CHtmlWindowEvent createEvent(object _oName)
        {
            return this.___createEventInner(commonHTML.GetStringValue(_oName));
        }
        
        public CHtmlWindowEvent createEvent()
        {
            return this.___createEventInner("");
        }
        
        private CHtmlWindowEvent ___createEventInner(string s)
        {
            CHtmlWindowEvent evt = new CHtmlWindowEvent();
            if (s != null && s.Length != 0)
            {
                evt.EventTitle = s;
            }
            evt.___IsCreateEventEvent = true;
            evt.___eventSourceType = CHtmlWindowEvent.CHtmlWindowEventEventType.createevent;
            return evt;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="__eventObject"></param>
        /// <returns> True : Normal, False : preventDefault() is called</returns>
        
        public bool dispatchEvent(object __eventObject)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("Document.dispatchEvent  {0} : {1} is enter", this, __eventObject);
            }
            try
            {
                CHtmlWindowEvent __dispEvent = __eventObject as CHtmlWindowEvent;
                if (__dispEvent != null)
                {
                    if (__dispEvent.___IsPreventDefaultCalled == true)
                    {
                        return false;
                    }
                    if (this.___Disposing == false)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("TODO; Document.dispatchEvent {0} is about to calling Title : {1} Type : {2}", this, __dispEvent.EventTitle, __dispEvent.type);
                        }

                    }
                    return true;
                }
                else
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("TODO : Document.dispatchEvent  {0} : {1} is unexptected Type", this, __eventObject);
                    }
                }
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("Document.dispatchEvent Error", ex);
                }

            }
            return true;
        }
        
        public CHtmlElement createElementNS(object _oNS, object _oname)
        {
            return this.createElementInner(commonHTML.GetStringValue(_oNS), commonHTML.GetStringValue(_oname));
        }
        
        public CHtmlElement createElementNS(string _oNS, string _oname)
        {
            return this.createElementInner(_oNS, _oname);
        }
        /// <summary>
        /// DHTML CreateElement() method
        /// </summary>
        /// <param name="__tagName"></param>
        /// <returns></returns>
        
        public CHtmlElement createElement(object _oname)
        {
            return this.createElementInner("", commonHTML.GetStringValue(_oname));
        }
        
        public CHtmlElement createElement(object _oname, object __e1)
        {
            return this.createElementInner("", commonHTML.GetStringValue(_oname));
        }
        
        public CHtmlElement createElement(object _oname, object __e1, object __e2)
        {
            return this.createElementInner("", commonHTML.GetStringValue(_oname));
        }
        
        public CHtmlElement createElement(string _oname)
        {
            return this.createElementInner("", _oname);
        }
        public static System.Collections.SortedList ___CreateElementTagNameAndAttributeList(string str)
        {
            SortedList srList = new SortedList(StringComparer.OrdinalIgnoreCase);
            try
            {
                int WhiteSpacePos = str.IndexOfAny(commonHTML.CharSpaceCrLfTab);
                if (WhiteSpacePos > -1)
                {
                    string __tagNamePart = str.Substring(0, WhiteSpacePos);
                    string __restPart = str.Substring(WhiteSpacePos);
                    __tagNamePart = __tagNamePart.Replace("<", "");
                    srList["tagname"] = commonHTML.FasterTrimAndToUpper(__tagNamePart);
                    if (__restPart.Length != 0)
                    {
                        int __FirstEqualPos = __restPart.IndexOf('=');
                        int __LastEqualPos = __restPart.LastIndexOf('=');


                        if (__FirstEqualPos == __LastEqualPos)
                        {
                            // Means Only 1 Attribute
                            string __NamePart = commonHTML.FasterToLower(__restPart.Substring(0, __FirstEqualPos));
                            System.Text.StringBuilder sbValue = new StringBuilder(__restPart.Substring(__FirstEqualPos + 1));
                            char fc = '\0';
                            int sbValueLen = sbValue.Length;
                            for (int fst = 0; fst < sbValueLen; fst++)
                            {
                                fc = sbValue[fst];
                                if (char.IsLetterOrDigit(fc))
                                {
                                    break;
                                }
                                else if (fc == '\'' || fc == '\"')
                                {
                                    sbValue.Remove(fst, 1);
                                    sbValueLen = sbValue.Length;
                                    fst--;
                                    continue;
                                }
                            }
                            for (int lst = sbValueLen - 1; lst >= 0; lst--)
                            {
                                char lc = sbValue[lst];
                                if (char.IsLetterOrDigit(lc))
                                {
                                    break;
                                }
                                else if (lc == '\'' || lc == '\"' || lc == '>' || lc == '<' || lc == '/' || commonHTML.FasterIsWhiteSpaceLimited(lc))
                                {
                                    sbValue.Remove(lst, 1);
                                    sbValueLen = sbValue.Length;

                                    continue;
                                }
                            }
                            srList[__NamePart] = sbValue.ToString();
                        }
                        else
                        {
                            // Means Multiple Attribute
                            CHtmlElement __testElement = new CHtmlElement();
                            System.Text.StringBuilder __sbrestPart = new System.Text.StringBuilder(__restPart);
                            __testElement.___createElementAttributesFromString(ref __sbrestPart);
                            if (__testElement.___attributes.Count > 0)
                            {
                                foreach (CHtmlAttribute attr in __testElement.___attributes.Values)
                                {
                                    if (attr != null)
                                    {
                                        if (attr.value != null)
                                        {
                                            srList[attr.name] = attr.value.ToString();
                                        }
                                    }

                                }

                            }
                            __testElement = null;

                        }
                    }
                }
                else
                {
                    if (str.IndexOf('<') > -1)
                    {
                        str = str.Replace('<', ' ');
                        str = str.Replace('>', ' ');
                    }
                    srList["tagname"] = commonHTML.FasterTrimAndToUpper(str);

                }
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                {
                    commonLog.LogEntry("___CreateElementTagNameAndAttributeList", ex);
                }
            }
            return srList;
        }
        
        internal CHtmlElement createElementInner(string _sNS, string _newname)
        {
            string _tagNameUpper = null;
            CHtmlElement newElement = null;
            System.Collections.SortedList ___srAttributesList = null;
            try
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 30)
                {
                    commonLog.LogEntry("calling createElementInner(\'{0}\' , \'{1}\')", _sNS, _newname);
                }
                if (_newname != null)
                {
                    if (_newname.IndexOf('<') == -1)
                    {
                        _tagNameUpper = commonHTML.FasterTrimAndToUpper(_newname);
                    }
                    else
                    {
                        ___srAttributesList = CHtmlDocument.___CreateElementTagNameAndAttributeList(_newname);
                        if (___srAttributesList.Count > 0)
                        {
                            string _sTag = ___srAttributesList["tagname"] as string;
                            if (_sTag != null && _sTag.Length != 0)
                            {
                                _tagNameUpper = commonHTML.FasterToUpper(_sTag);
                            }
                        }

                    }
                }


                if (string.IsNullOrEmpty(_tagNameUpper) == true)
                {
                    _tagNameUpper = "DIV";
                }
                else if (_tagNameUpper.Length == 9)
                {
                    if (string.Equals(_tagNameUpper, "UNDEFINED", StringComparison.OrdinalIgnoreCase) == true)
                    {
                        _tagNameUpper = "DIV";
                    }
                    else
                    {
                        goto TagCheckDone;
                    }
                }
                else if (_tagNameUpper.Length == 4)
                {
                    if (string.Equals(_tagNameUpper, "NULL", StringComparison.OrdinalIgnoreCase) == true)
                    {
                        _tagNameUpper = "DIV";
                    }
                    else
                    {
                        goto TagCheckDone;
                    }
                }
                TagCheckDone:
                newElement = createCHtmlElementWithDomType(_tagNameUpper, this.___documentDomType, null);
                
                newElement.tagName = _tagNameUpper;
                if (string.IsNullOrEmpty(_sNS) == false)
                {
                    newElement.___namepaceURI = string.Copy(_sNS);
                }
                if (newElement.___elementTagType == CHtmlElementType.UNKNOWN)
                {
                    newElement.___elementTagType = commonHTML.GetTagNameType(_tagNameUpper);
                }
                newElement.___IsDynamicElement = true;
                if (___srAttributesList != null)
                {
                    int srAttributesCount = ___srAttributesList.Count;
                    for (int i = 0; i < srAttributesCount; i++)
                    {
                        string sKey = ___srAttributesList.GetKey(i) as string;

                        // ___srAttributesList does contains tagname. skip it.
                        if (string.Equals(sKey, "tagname", StringComparison.OrdinalIgnoreCase) == true)
                            continue;
                        CHtmlAttribute attr = new CHtmlAttribute();
                        attr.name = string.Copy(sKey);
                        attr.parentNode = newElement;
                        attr.value = string.Copy(___srAttributesList[sKey] as string);
                        newElement.___attributes[sKey] = attr;
                    }
                }


                // -------------------------------------------------------------------------------
                //  In order to Merge style into documents correctly assign document to stylesheet
                // -------------------------------------------------------------------------------

                if (newElement.___elementTagType == CHtmlElementType.STYLE)
                {
                    if (newElement.___style != null)
                    {
                        newElement.___style.___IsDynamicElement = true;

                        newElement.___style.___documentWeakReference = new WeakReference(this, false);

                    }
                }
                newElement.___documentWeakRef = new WeakReference(this, false);

                // This should be called at appending time.

                //___registerElementDocumentElementID(newElement);



                commonHTML.SetDefaultStyePropertiesByTagType(newElement.___style, newElement.___elementTagType);
                newElement.___WillElementIDAlternationRequiresDocumentCheck = true;
                if (this.___IsMultiversalDocument == false && this.___IsDomModeFullParseMode())
                {
                    if (newElement.___elementTagType == CHtmlElementType.IFRAME || newElement.___elementTagType  == CHtmlElementType.FRAME)
                    {
                        this.___PreCreateManagedControlIfNessesary(newElement);
                    }
                }
                else if (___IsMultiversalDocument == true)
                {
                    if (newElement.___elementTagType == CHtmlElementType.IFRAME || newElement.___elementTagType == CHtmlElementType.FRAME)
                    {
                        newElement.___iframeMultiversalWindow = commonHTML.createIFrameMultiversalWindow(this.___MultiversalWindow, this, newElement);
                    }
                }
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                {
                    commonLog.LogEntry("createElementInner(\'{0}\')", _newname);
                }
                if (newElement.___elementTagType == CHtmlElementType.STYLE || newElement.___elementTagType == CHtmlElementType.LINK)
                {
                    CHtmlCSSStyleSheet.___createCHtmlCSSStylesheetForElement(newElement);
                }
                // =============================================================
                // Some Elements are not added to body
                // Some times the element reference may be lost. ex canvas element.
                // To keep track the element 
                // ___ElementDynamicallyCreatedList is created.
                // =============================================================
                this.___ElementDynamicallyCreatedList.Add(newElement);
                if (this.___ElementImgAudioVideoDynamicallyCreatedWorkingQueueList != null)
                {
                    switch (newElement.___elementTagType)
                    {
                        case CHtmlElementType.AUDIO:
                        case CHtmlElementType.VIDEO:
                        case CHtmlElementType.IMG:

                            this.___ElementImgAudioVideoDynamicallyCreatedWorkingQueueList.Add(new WeakReference(newElement, false));


                            break;
                    }
                }
                if (this.___MultiversalWindow != null)
                {
                    this.___MultiversalWindow.___assignElementPrototype(newElement);
                }
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                {
                    commonLog.LogEntry("CHtmlDocument.createElementInner() Exception...", ex);
                }
            }
            return newElement;
        }
        internal void ___PreCreateManagedControlIfNessesary(CHtmlElement __element)
        {
            try
            {
                /*
					delCreate dcl = new delCreate(this.BaseCreateControl);
					System.IAsyncResult rst = this.BeginInvoke(dcl, new object[]{typeof(ListView)});
					object obj = this.EndInvoke(rst);
					arControls.Add(obj);
				*/
                if (__element != null)
                {
                    switch (__element.___elementTagType)
                    {
                        case CHtmlElementType.FRAME:
                        case CHtmlElementType.IFRAME:
                            if (this.___IsMultiversalDocument == true)
                            {
                                if (__element.___iframeMultiversalWindow == null)
                                {
                                    __element.___iframeMultiversalWindow = commonHTML.createIFrameMultiversalWindow(this.___MultiversalWindow, this, __element);
                                }

                            }

                            break;
                        default:
                            return;
                    }
                }
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                {
                    commonLog.LogEntry("__PreCreateManagedControl", ex);
                }
            }
        }
        
        public CHtmlAttribute createAttribute(string __name)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
            {
                commonLog.LogEntry("calling createAttribute({0})...", __name);
            }
            CHtmlAttribute _newAttr = new CHtmlAttribute();
            _newAttr.name = __name;
            if (string.IsNullOrEmpty(_newAttr.___name) == false)
            {
                if (commonHTML.FasterIsWhiteSpaceLimited(_newAttr.___name[0]) || commonHTML.FasterIsWhiteSpaceLimited(_newAttr.___name[_newAttr.___name.Length - 1]))
                {
                    _newAttr.name = _newAttr.___name.Trim();
                }
            }
            return _newAttr;
        }
        
        public CHtmlTextElement createComment(object _otext)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
            {
                commonLog.LogEntry("calling createComment({0})...", _otext);
            }
            string s = commonHTML.GetStringValue(_otext);
            CHtmlTextElement ___textElement = new CHtmlTextElement();
            ___textElement.___SetTagNameOnly("COMMENT");
            ___textElement.___elementTagType = CHtmlElementType.COMMENT;
            ___textElement.___IsDynamicElement = true;
            ___textElement.value = _otext;
            return ___textElement;
        }

        /// <summary>
        /// DHTML CreateTextNode() method
        /// </summary>
        /// <param name="__tagName"></param>
        /// <returns></returns>
        
        public CHtmlTextElement createTextNode(object _text)
        {
            string s = commonHTML.GetStringValue(_text);
            return createTextNodeInner(CHtmlElementType._ITEXT, s);
        }
        private CHtmlTextElement createTextNodeInner(CHtmlElementType tagType, string ___InnerText)
        {
            CHtmlTextElement textElement = new CHtmlTextElement();
            textElement.___parentWeakRef = new WeakReference(this, false);

            textElement.___elementTagType = tagType;
            if (tagType == CHtmlElementType._ITEXT)
            {
                textElement.___SetTagNameOnly("#TEXT");
                textElement.___IsSystemHidden = true;
            }
            else
            {
                textElement.___SetTagNameOnly("COMMENT");
                textElement.___IsSystemHidden = true;
            }
            //textElement.DocumentElementIndex = this.DocumentElementIndex;
            textElement.___IsElementBlock = false;
            textElement.___isCalculateElementBoundsCalled = false;
            textElement.value = ___InnerText;
            /*
			textElement.TagOpenStartPosition = AppendFirstPos;
			textElement.TagOpenEndPosition = AppendFirstPos;
			textElement.TagCloseEndPosition   = ___docpos;
			textElement.TagCloseStartPosition = ___docpos;
			*/
            //textElement.___DocumentElementIndex = -1;
            textElement.___IsDynamicElement = true;
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
            {
                commonLog.LogEntry("createTextNodeInner(\'{0}\')", ___InnerText);
            }
            return textElement;
        }

        
        public CHtmlRange createRange()
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
            {
                commonLog.LogEntry("entering {0}.createRange()...", this);
            }
            CHtmlRange __range = new CHtmlRange();
            __range.___rangeType = CHtmlRange.RangeType.Document;
            return __range;
        }
        /// <summary>
        /// Document Fragment Element is just buckets for elements. does not have reference to ownerDocument
        /// (all appendChild "SHOULD" have ___isInactivativeElementNodeChild = true).
        /// </summary>
        /// <returns></returns>
        
        public CHtmlElement createDocumentFragment()
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
            {
                commonLog.LogEntry("entering {0}.createDocumentFragment()...", this);
            }
            CHtmlElement ___fragelement = new CHtmlElement();

            ___fragelement.___SetTagNameOnly("#DOCUMENT-FRAGMENT");
            ___fragelement.___IsDynamicElement = true;
            //___fragelement.___elementTagType = CHtmlElementType._DOCUMENT_FRAGMENT;
            ___fragelement.___isInactivativeElementNodeChild = true;
            ___fragelement.___elementTagType  = CHtmlElementType._DOCUMENT_FRAGMENT;
            ___fragelement.___multiversalClassType = IMutilversalObjectType.DocumentFragment;
            ___fragelement.___SetNodeType(CHtmlNodeType.DOCUMENT_FRAGMENT_NODE);
            ___fragelement.___documentWeakRef = new WeakReference(this, false); //// DocuemntFramgMent ownerDocument should be same same as root Document
            if (this.___DocumentFragmentElementReferenceList != null)
            {
                this.___DocumentFragmentElementReferenceList.Add(new WeakReference(___fragelement, false));
            }
            return ___fragelement;
        }

        /// <summary>
        /// DHTML readyState, readoly use SetReadyState() to set from outside
        /// possible values: uninitalized, loading, loaded, interactive, complete
        /// </summary>
        /// <param name="__tagName"></param>
        /// <returns></returns>

        
        public string readyState
        {
            get
            {

                switch (___readyStateType)
                {
                    case CHtmlReadytStateType.uninitialized:
                        return "uninitialized";
                    case CHtmlReadytStateType.loading:
                        return "loading";
                    case CHtmlReadytStateType.interactive:
                        return "interactive";
                    case CHtmlReadytStateType.complete:
                        return "complete";
                }
                return "comlete";

            }
        }

        internal void SetReadyState(CHtmlReadytStateType _state)
        {
            this.___readyStateType = _state;
        }
        
        public object onactivate
        {
            get
            {
                return this.___getEventInfo("onactivate");
            }
            set
            {
                this.___attachEventForElement("onactivate", value, (int)CHtmlEventOriginatorType.CHTMLDocument);
            }
        }
        
        public object onbeforeactivate
        {
            get
            {
                return this.___getEventInfo("onbeforeactivate");
            }
            set
            {
                this.___attachEventForElement("onbeforeactivate", value, (int)CHtmlEventOriginatorType.CHTMLDocument);
            }
        }
        
        public object onbeforecut
        {
            get
            {
                return this.___getEventInfo("onbeforecut");
            }
            set
            {
                this.___attachEventForElement("onbeforecut", value, (int)CHtmlEventOriginatorType.CHTMLDocument);
            }
        }
        
        public object onbeforeditfocus
        {
            get
            {
                return this.___getEventInfo("onbeforeditfocus");
            }
            set
            {
                this.___attachEventForElement("onbeforeditfocus", value, (int)CHtmlEventOriginatorType.CHTMLDocument);
            }
        }
        
        public object onbeforepaste
        {
            get
            {
                return this.___getEventInfo("onbeforepaste");
            }
            set
            {
                this.___attachEventForElement("onbeforepaste", value, (int)CHtmlEventOriginatorType.CHTMLDocument);
            }
        }
        
        public object onload
        {
            get
            {
                return this.___getEventInfo("onload");
            }
            set
            {
                this.___attachEventForElement("onload", value, (int)CHtmlEventOriginatorType.CHTMLDocument);
            }
        }
        
        public object onunload
        {
            get
            {
                return this.___getEventInfo("onunload");
            }
            set
            {
                this.___attachEventForElement("onunload", value, (int)CHtmlEventOriginatorType.CHTMLDocument);
            }
        }
        
        public object oncontextmenu
        {
            get
            {
                return this.___getEventInfo("oncontextmenu");
            }
            set
            {
                this.___attachEventForElement("oncontextmenu", value, (int)CHtmlEventOriginatorType.CHTMLDocument);
            }
        }
        
        public object oncontrolselect
        {
            get
            {
                return this.___getEventInfo("oncontrolselect");
            }
            set
            {
                this.___attachEventForElement("oncontrolselect", value, (int)CHtmlEventOriginatorType.CHTMLDocument);
            }
        }
        
        public object onerror
        {
            get
            {
                return this.___getEventInfo("onerror");
            }
            set
            {
                this.___attachEventForElement("onerror", value, (int)CHtmlEventOriginatorType.CHTMLDocument);
            }
        }
        
        public object onabort
        {
            get
            {
                return this.___getEventInfo("onabort");
            }
            set
            {
                this.attachEvent("onabort", value);
            }
        }
        
        public object onclick
        {
            get
            {
                return this.___getEventInfo("onclick");
            }
            set
            {
                this.attachEvent("onclick", value);
            }
        }
        
        public object ondblclick
        {
            get
            {
                return this.___getEventInfo("ondblclick");
            }
            set
            {
                this.attachEvent("ondblclick", value);
            }
        }
        
        public object ondeactivate
        {
            get
            {
                return this.___getEventInfo("ondeactivate");
            }
            set
            {
                this.attachEvent("ondeactivate", value);
            }
        }
        
        public object oncut
        {
            get
            {
                return this.___getEventInfo("oncut");
            }
            set
            {
                this.attachEvent("oncut", value);
            }
        }

        
        public object onfocusin
        {
            get
            {
                return this.___getEventInfo("onfocusin");
            }
            set
            {
                this.attachEvent("onfocusin", value);
            }
        }
        
        public object onfocusout
        {
            get
            {
                return this.___getEventInfo("onfocusout");
            }
            set
            {
                this.attachEvent("onfocusout", value);
            }
        }
        
        public object onhelp
        {
            get
            {
                return this.___getEventInfo("onhelp");
            }
            set
            {
                this.attachEvent("onhelp", value);
            }
        }
        
        public object ondrop
        {
            get
            {
                return this.___getEventInfo("ondrop");
            }
            set
            {
                this.attachEvent("ondrop", value);
            }
        }
        
        public object ondragstart
        {
            get
            {
                return this.___getEventInfo("ondragstart");
            }
            set
            {
                this.attachEvent("ondragstart", value);
            }
        }
        
        public object ondragend
        {
            get
            {
                return this.___getEventInfo("ondragend");
            }
            set
            {
                this.attachEvent("ondragend", value);
            }
        }
        
        public object ondragleave
        {
            get
            {
                return this.___getEventInfo("ondragleave");
            }
            set
            {
                this.attachEvent("ondragleave", value);
            }
        }
        
        public object ondragenter
        {
            get
            {
                return this.___getEventInfo("ondragenter");
            }
            set
            {
                this.attachEvent("ondragenter", value);
            }
        }
        
        public object ondragover
        {
            get
            {
                return this.___getEventInfo("ondragover");
            }
            set
            {
                this.attachEvent("ondragover", value);
            }
        }
        
        public object onkeydown
        {
            get
            {
                return this.___getEventInfo("onkeydown");
            }
            set
            {
                this.attachEvent("onkeydown", value);
            }
        }
        
        public object onkeypress
        {
            get
            {
                return this.___getEventInfo("onkeypress");
            }
            set
            {
                this.attachEvent("onkeypress", value);
            }
        }
        
        public object onkeyup
        {
            get
            {
                return this.___getEventInfo("onkeyup");
            }
            set
            {
                this.attachEvent("onkeyup", value);
            }
        }
        
        public object onmousedown
        {
            get
            {
                return this.___getEventInfo("onmousedown");
            }
            set
            {
                this.attachEvent("onmousedown", value);
            }
        }
        
        public object onmouseover
        {
            get
            {
                return this.___getEventInfo("onmouseover");
            }
            set
            {
                this.attachEvent("onmouseover", value);
            }
        }
        
        public object onmousemove
        {
            get
            {
                return this.___getEventInfo("onmousemove");
            }
            set
            {
                this.attachEvent("onmousemove", value);
            }
        }
        
        public object onmouseout
        {
            get
            {
                return this.___getEventInfo("onmouseout");
            }
            set
            {
                this.attachEvent("onmouseout", value);
            }
        }
        
        public object onmouseup
        {
            get
            {
                return this.___getEventInfo("onmouseup");
            }
            set
            {
                this.attachEvent("onmouseup", value);
            }
        }
        
        public object onmousewheel
        {
            get
            {
                return this.___getEventInfo("onmousewheel");
            }
            set
            {
                this.attachEvent("onmousewheel", value);
            }
        }
        public object onwheel
        {
            get
            {
                return this.___getEventInfo("onmousewheel");
            }
            set
            {
                this.attachEvent("onmousewheel", value);
            }
        }
        
        public object onmove
        {
            get
            {
                return this.___getEventInfo("onmove");
            }
            set
            {
                this.attachEvent("onmove", value);
            }
        }
        
        public object onmoveend
        {
            get
            {
                return this.___getEventInfo("onmoveend");
            }
            set
            {
                this.attachEvent("onmoveend", value);
            }
        }
        
        public object onmovestart
        {
            get
            {
                return this.___getEventInfo("onmovestart");
            }
            set
            {
                this.attachEvent("onmovestart", value);
            }
        }
        
        public object onpaste
        {
            get
            {
                return this.___getEventInfo("onpaste");
            }
            set
            {
                this.attachEvent("onpaste", value);
            }
        }
        
        public object onpropertychange
        {
            get
            {
                return this.___getEventInfo("onpropertychange");
            }
            set
            {
                this.attachEvent("onpropertychange", value);
            }
        }

        
        public object onresizestart
        {
            get
            {
                return this.___getEventInfo("onresizestart");
            }
            set
            {
                this.attachEvent("onresizestart", value);
            }
        }
        
        public object onresizeend
        {
            get
            {
                return this.___getEventInfo("onresizeend");
            }
            set
            {
                this.attachEvent("onresizeend", value);
            }
        }
        
        public object onselectionchange
        {
            get
            {
                return this.___getEventInfo("onselectionchange");
            }
            set
            {
                this.attachEvent("onselectionchange", value);
            }
        }
        
        public object onselectionstart
        {
            get
            {
                return this.___getEventInfo("onselectionstart");
            }
            set
            {
                this.attachEvent("onselectionstart", value);
            }
        }
        
        public object onselectstart
        {
            get
            {
                return this.___getEventInfo("onselectionstart");
            }
            set
            {
                this.attachEvent("onselectionstart", value);
            }
        }
        
        public object onselectionend
        {
            get
            {
                return this.___getEventInfo("onselectionend");
            }
            set
            {
                this.attachEvent("onselectionend", value);
            }
        }
        
        public object onselectend
        {
            get
            {
                return this.___getEventInfo("onselectionend");
            }
            set
            {
                this.attachEvent("onselectionend", value);
            }
        }
        
        public object onstop
        {
            get
            {
                return this.___getEventInfo("onstop");
            }
            set
            {
                this.attachEvent("onstop", value);
            }
        }

        public double offsetHeight
        {
            set
            {
                if (this.___body != null)
                {
                    this.___body.___offsetHeight = value;
                }
                else
                {
                    this.___DocumentMinSize.Height = (float)value;
                }
            }
            get
            {
                if (this.___body != null)
                {
                    return this.___body.___offsetHeight;
                }
                else
                {
                    return this.___DocumentMinSize.Height;
                }
            }
        }
        public double offsetWidth
        {
            set
            {
                if (this.___body != null)
                {
                    this.___body.___offsetWidth = value;
                }
                else
                {
                    this.___DocumentMinSize.Width = (float)value;
                }
            }
            get
            {
                if (this.___body != null)
                {
                    return this.___body.___offsetWidth;
                }
                else
                {
                    return this.___DocumentMinSize.Width;
                }
            }
        }


        
        public object onreadystatechange
        {
            get
            {
                return this.___getEventInfo("onreadystatechange");
            }
            set
            {
                this.attachEvent("onreadystatechange", value);
            }
        }
        /// <summary>
        /// DOMContentLoaded (Firefox) == onreadystatechange (IE)
        /// </summary>
        
        public object DOMContentLoaded
        {
            get
            {
                return this.___getEventInfo("domcontentloaded");
            }
            set
            {
                this.attachEvent("domcontentloaded", value);
            }
        }

        
        public object webkitVisibilityChange
        {
            get
            {
                return this.___getEventInfo("webkitvisibilitychange");
            }
            set
            {
                this.attachEvent("webkitvisibilitychange", value);
            }
        }
        
        public object visibilityChange
        {
            get
            {
                return this.___getEventInfo("visibilitychange");
            }
            set
            {
                this.attachEvent("visibilitychange", value);
            }
        }
        
        public object onvisibilitychange
        {
            get
            {
                return this.___getEventInfo("onvisibilitychange");
            }
            set
            {
                this.attachEvent("onvisibilitychange", value);
            }
        }
        
        public object domcontentloaded
        {
            get
            {
                return this.___getEventInfo("domcontentloaded");
            }
            set
            {
                this.attachEvent("domcontentloaded", value);
            }
        }
        public void ResetDocument()
        {
            /*
			this.___strServer = "";
			this.___strStatusCode = "";
			this.___strStatusDescrption = "";
             */
            if (this.___PageRequestedUrlList == null)
            {
                this.___PageRequestedUrlList = new System.Collections.Generic.Dictionary<string, CHtmlDownloadInfomation>(StringComparer.Ordinal);
            }
            this.___IsHtmlResponseCompleted = false;
            this.___IsHtmlParseCompleted = false;
            this.___IsHtmlCharSetDetectionCompleted = false;
            this.___currentParentElement = null;

            this.___DocumentElementIDList = new System.Collections.Generic.Dictionary<string, CHtmlElement>(StringComparer.OrdinalIgnoreCase);
            this.___scripts = new CHtmlCollection();
            this.___scripts.___CollectionType = CHtmlHTMLCollectionType.DocumentScripts;
            this.___forms = new CHtmlDictionaryWithIndexEasyAssigned();
            this.___forms.___multiversalType = IMutilversalObjectType.HTMLCollection;
            this.___forms.___CollectionType = CHtmlHTMLCollectionType.DocumentForms;
            this.___frames = new CHtmlDictionaryWithIndexEasyAssigned();
            this.___anchors = new CHtmlDictionaryWithIndexEasyAssigned();
            this.___anchors.___multiversalType = IMutilversalObjectType.HTMLCollection;
            this.___anchors.___CollectionType = CHtmlHTMLCollectionType.DocumentAnckors;
            this.___embeds = new CHtmlDictionaryWithIndexEasyAssigned();
            this.___embeds.___multiversalType = IMutilversalObjectType.HTMLCollection;
            this.___embeds.___CollectionType = CHtmlHTMLCollectionType.DocumentEmbeds;
            this.___links = new CHtmlCollection();

            this.___links.___CollectionType = CHtmlHTMLCollectionType.DocumentLinks;
            this.___layers = new CHtmlDictionaryWithIndexEasyAssigned();
            this.___layers.___CollectionType = CHtmlHTMLCollectionType.DocumentLayers;
            this.___tagStyles = new CHtmlCollection();
            this.___cssRuleGroundList = new CHtmlCSSRuleGroundList();
            this.___documentMemStream = new System.IO.MemoryStream();
            this.___images = new System.Collections.Generic.SortedList<string, Image>(StringComparer.Ordinal);
            this.___StyleSheetOnlyFileDownloadPendingCount = 0;
            this.___StyleScriptFileDownloadPendingCount = 0;
            this.___StyleScriptFileDownloadRequestedTotalCount = 0;

            this.___layers = new CHtmlDictionaryWithIndexEasyAssigned();
            this.___layers.___CollectionType = CHtmlHTMLCollectionType.DocumentLayers;
            /*
			this.___namespaces = new CHtmlNameSpaceSortedList(StringComparer.OrdinalIgnoreCase);

			this.___namespaces.___CollectionType =CHtmlHTMLCollectionType.DocumentNamespaces;
             */
            this.___ManagedControlPendingElementList = new System.Collections.Generic.SortedList<int, CHtmlElement>();
            this.___scriptEventList = new CHtmlCollection();

        }

        #region CleanUp
        
        private void ___cleanUp()
        {
            if (this.___Disposing == false)
            {
                this.___Disposing = true;
            }
            if (this.___threadDOMParse != null)
            {
                try
                {
                    this.AbortParseThread();
                }
                catch
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                    {
                        commonLog.LogEntry("Error Duraing Cleanup ParseThread on CHTMLDocument, but cont...");
                    }
                }
                this.___threadDOMParse = null;
            }
            if (this.___DocumentTimerThread != null)
            {
                try
                {
                    this.___DocumentTimerThread.Dispose();
                }
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                    }
                }
                this.___DocumentTimerThread = null;
            }
            if (this.___ElementsNeedsEventFireOnLoadQueueWeakReferenceList != null)
            {
                // this.___ElementsNeedsEventFireOnLoadQueueWeakReferenceList.Clear();
                this.___ElementsNeedsEventFireOnLoadQueueWeakReferenceList = null;
            }
            if (this.___ElementImgAudioVideoDynamicallyCreatedWorkingQueueList != null)
            {
                // this.___ElementImgAudioVideoDynamicallyCreatedWorkingQueueList.Clear();
                this.___ElementImgAudioVideoDynamicallyCreatedWorkingQueueList = null;
            }
            if (this.___CanvasContextElement2DDrawingPendingList != null)
            {
                // this.___CanvasContextElement2DDrawingPendingList.Clear();
                this.___CanvasContextElement2DDrawingPendingList = null;
            }
            if(this.___WindowLoadFunctionQueue != null)
            {
                this.___WindowLoadFunctionQueue = null;
            }
            if(this.___DocumentLoadFunctionQueue != null)
            {
                this.___DocumentLoadFunctionQueue = null;
            }
            if(this.___WindowDOMCotentLoadedFunctionQueue != null)
            {
                this.___WindowDOMCotentLoadedFunctionQueue = null;
            }
            if(this.___DocumentDOMCotentLoadedFunctionQueue != null)
            {
                this.___DocumentDOMCotentLoadedFunctionQueue = null;
            }  
            if (this.___OpacityChangeFailedUrlSortedList != null)
            {
                //this.___OpacityChangeFailedUrlSortedList.Clear();
                this.___OpacityChangeFailedUrlSortedList = null;
            }
            if (this.___StyleQueue != null)
            {
                try
                {
                    this.___StyleQueue.Dispose();
                }
                catch { }
                this.___StyleQueue = null;
            }
            if (this.___DocumentTimerLiveList != null)
            {
                //  this.___DocumentTimerLiveList.Clear();
                this.___DocumentTimerLiveList = null;
            }
            if (this.___DocumentTimerCompleteList != null)
            {
                this.___DocumentTimerCompleteList.Clear();
                this.___DocumentTimerCompleteList = null;
            }


            if (this.___WindowReferenceContainer != null)
            {
                this.___WindowReferenceContainer = null;
            }

            if (this.___GroundStyleSheetSorter != null)
            {
                this.___GroundStyleSheetSorter = null;
            }
            if (this.___FontFamilyFoundList != null)
            {
                //this.___FontFamilyFoundList.Clear();
                this.___FontFamilyFoundList = null;
            }

            if (this.___WindowScrollFunctionWeakReference != null)
            {
                this.___WindowScrollFunctionWeakReference = null;
            }
            if (this.___x_selectedElement != null)
            {
                this.___x_selectedElement = null;
            }
            if (___LastEncodingEndBytes != null)
            {
                ___LastEncodingEndBytes = null;
            }
            if (this.___CSSSearchDeepPendingElementList != null)
            {
                this.___CSSSearchDeepPendingElementList = null;
            }
            if (this.___CSSSearchDeepExecutionThread != null)
            {
                try
                {
                    this.___CSSSearchDeepExecutionThread.Abort();
                    this.___CSSSearchDeepExecutionThread = null;
                }
                catch
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("CSS Search Exection Thread abrot Exception. it is ok....");
                    }
                }
                this.___CSSSearchDeepExecutionThread = null;
            }
            if (this.___sessionStorage != null)
            {
                try
                {
                    this.___sessionStorage.Dispose();
                }
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                    }
                }
                this.___sessionStorage = null;
            }
            if (this.___localStorage != null)
            {
                try
                {
                    this.___localStorage.Dispose();
                }
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                    }
                }
                this.___localStorage = null;
            }

            if (this.___implementation != null)
            {
                this.___implementation = null;
            }
            if (this.___attributes != null)
            {
                try
                {

                    this.___attributes = null;
                }
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                    }

                }
            }
            if (this.___attributesForWindow != null)
            {
                this.___attributesForWindow = null;
            }
            if (this.___BadQueryList != null)
            {
                try
                {
                    this.___BadQueryList.Clear();
                    this.___BadQueryList = null;
                }
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                    }
                }
            }
            if (this.___DocumentFragmentElementReferenceList != null)
            {
                int ___fragmentElementCount = this.___DocumentFragmentElementReferenceList.Count;
                for (int i = ___fragmentElementCount - 1; i >= 0; i--)
                {
                    System.WeakReference ___fragReference = this.___DocumentFragmentElementReferenceList[i];

                    CHtmlElement fragElement = ___fragReference.Target as CHtmlElement;
                    if (fragElement != null)
                    {
                        fragElement.Dispose();
                        fragElement = null;
                    }

                    ___fragReference = null;

                    this.___DocumentFragmentElementReferenceList.RemoveAt(i);
                }
                this.___DocumentFragmentElementReferenceList.Clear();
                this.___DocumentFragmentElementReferenceList = null;
            }

            if (this.___imageElements != null)
            {
                this.___imageElements = null;
            }

            try
            {
                if (this.___DrawingRectangle != null)
                {
                    this.___DrawingRectangle = null;
                }
                if (this.___currentClosedElement != null)
                {
                    this.___currentClosedElement = null;
                }
                if (this.___currentParentElement != null)
                {
                    this.___currentParentElement = null;
                }
                if (this.___documentElement != null)
                {
                    this.___documentElement = null;
                }
#if false
                if (this.___AdHocBitmapGraphicList != null)
                {
                    try
                    {
                        for (int i = this.___AdHocBitmapGraphicList.Count - 1; i >= 0; i--)
                        {
                           CHtmlAdhocBitmapInformation adhocBitmap = this.___AdHocBitmapGraphicList[i];
                            if (adhocBitmap != null)
                            {
                                adhocBitmap.bitmap.Dispose();
                                adhocBitmap.bitmap = null;
                            }
                        }
                        this.___AdHocBitmapGraphicList.Clear();
                        this.___AdHocBitmapGraphicList = null;
                    }
                    catch (Exception exAdhoc)
                    {
                        if (commonLog.LoggingEnabled && commonLog.LogLevel >= 10)
                        {
                            commonLog.LogEntry("AdHocBitmapList Clear exception.", exAdhoc);
                        }
                    }
                }
#endif

                if (this.___TagPrefetchThread != null)
                {
                    try
                    {
                        if (this.___TagPrefetchThread.ThreadState == ThreadState.Running)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("CHtmlDocument.CleanUp() found ___TagPrefetchThread is running..");
                            }
                            this.___TagPrefetchThread.Abort();
                        }
                        else
                        {
                            this.___TagPrefetchThread = null;
                        }
                    }
                    catch
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("CHtmlDocument.CleanUp() abort ___tagPrefechThread. Ignore...");
                        }
                    }
                    finally
                    {
                        this.___TagPrefetchThread = null;
                    }

                }


                if (this.___ManagedControlPendingElementList != null)
                {
                    try
                    {
                        this.___ManagedControlPendingElementList.Clear();
                    }
                    catch (Exception ex)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                        }
                    }
                    this.___ManagedControlPendingElementList = null;
                }



                if (this.___ManagedControlHandle != IntPtr.Zero)
                {
                    this.___ManagedControlHandle = IntPtr.Zero;
                }
                if (this.___embeds != null)
                {

                    this.___embeds = null;
                }

                if (this.___DocumentTimerBrandNewIDList != null)
                {
                    //   this.___DocumentTimerBrandNewIDList.Clear();
                    this.___DocumentTimerBrandNewIDList = null;
                }
                if (this.___HtmlGraphics != null)
                {
                    try
                    {
                        this.___HtmlGraphics.Dispose(true);

                    }
                    catch (Exception ex)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("HtmlGraphics Dispose", ex.Message);
                        }
                    }
                    this.___HtmlGraphics = null;
                }
                if (this.___CSSAttributeLookupFieldList != null)
                {
                    this.___CSSAttributeLookupFieldList = null;
                }
                if (this.___CSSNthOfTypeTagTypesList != null)
                {
                    this.___CSSNthOfTypeTagTypesList = null;
                }

                if (this.___cookieList != null)
                {
                    this.___cookieList = null;
                }
                if (this.___documentMemStream != null)
                {
                    this.___documentMemStream.Close();
                    commonData.DisposeObject(this.___documentMemStream);
                    this.___documentMemStream = null;
                }
                if (this.___ThreadParseSuspendEvent != null)
                {
                    this.CloseAndDisposeAutoResetEvent(ref this.___ThreadParseSuspendEvent);
                    this.___ThreadParseSuspendEvent = null;
                }
                /*
                if(this.ThreadParseCharSetDetectCompleteEvent != null)
                {
                    this.CloseAndDisposeAutoResetEvent(ref this.ThreadParseCharSetDetectCompleteEvent);
                }
                */
                if (this.___ThreadParseCompleteEvent != null)
                {
                    this.CloseAndDisposeAutoResetEvent(ref this.___ThreadParseCompleteEvent);
                    ___ThreadParseCompleteEvent = null;
                }
                if (this.___ThreadStylesheetCompleteEvent != null)
                {
                    this.CloseAndDisposeAutoResetEvent(ref this.___ThreadStylesheetCompleteEvent);
                    ___ThreadStylesheetCompleteEvent = null;
                }
          
                if(this.___fontfaceDocumentStorage != null)
                {
                    this.___fontfaceDocumentStorage.Dispose();
                    this.___fontfaceDocumentStorage = null;
                }

                if (this.___anchors != null)
                {

                    this.___anchors = null;
                }
                if (this.___links != null)
                {

                    this.___links = null;
                }
                if (this.___forms != null)
                {

                    this.___forms = null;
                }
                if (this.___styleSheets != null)
                {
                    /*
                     try
                     {

                         for (int i = this.___styleSheets.Count - 1; i >= 0; i--)
                         {
                             this.___styleSheets[i] = null;
                         }

                      //   this.___styleSheets.Clear();
                     }
                     catch (Exception ex)
                     {
                         if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                         {
                             commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                         }
                     }
                     */
                    this.___styleSheets = null;
                }
                if (this.___DocumentStyleHitForThisClassSorteter != null)
                {
                    this.___DocumentStyleHitForThisClassSorteter = null;
                }
                if (this.___images != null)
                {
                    if (commonData.IsMonoCLR == false)
                    {
                        try
                        {
                            // note) because images can be changed during emumration
                            // get copy of keys and emumrate by keys is better 
                            int ___imageCount = this.___images.Count;
                            if (___imageCount > 0)
                            {
                                for (int i = ___imageCount - 1; i >= 0; i--)
                                {
                                    Image __imgClear = this.___images.Values[i];
                                    if (__imgClear != null)
                                    {
                                        __imgClear.Dispose();
                                    }
                                    this.___images.RemoveAt(i);
                                }
                            }
                            // There may be new images may be intered during disponse. just for in case.
                            ___imageCount = this.___images.Count;
                            if (___imageCount > 0)
                            {
                                for (int i = ___imageCount - 1; i >= 0; i--)
                                {
                                    Image __imgClear = this.___images.Values[i];
                                    if (__imgClear != null)
                                    {
                                        __imgClear.Dispose();
                                    }
                                    this.___images.RemoveAt(i);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("Clear Image", ex);
                            }
                        }
                    }
                    if (this.___images.Count > 0)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("Strange... disponse imageList found {0} images in list. it may be not disposed...", ___images.Count);
                        }
                        this.___images.Clear();
                    }
                    this.___images = null;
                }
                if (this.___DocumentOpacityChangedImageStrongReferenceList != null)
                {

                    try
                    {

                        foreach (System.Drawing.Image imgOpacity in this.___DocumentOpacityChangedImageStrongReferenceList.Values)
                        {
                            if (imgOpacity != null)
                            {
                                imgOpacity.Dispose();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("Clear Opacity Image Cache List Error", ex);
                        }
                    }
                    this.___DocumentOpacityChangedImageStrongReferenceList = null;
                }
                if (___pargbConvertedBitmapList != null)
                {
                    try
                    {
                        int __pargbImageCount = this.___pargbConvertedBitmapList.Count;
                        if (__pargbImageCount > 0)
                        {
                            for (int i = __pargbImageCount - 1; i >= 0; i--)
                            {
                                Bitmap bmpPArgb = this.___pargbConvertedBitmapList.Values[i];
                                if (bmpPArgb != null)
                                {
                                    bmpPArgb.Dispose();
                                    bmpPArgb = null;
                                    this.___pargbConvertedBitmapList.RemoveAt(i);
                                }
                            }
                            if (__pargbImageCount != this.___pargbConvertedBitmapList.Count)
                            {
                                __pargbImageCount = this.___pargbConvertedBitmapList.Count;
                                for (int i = __pargbImageCount - 1; i >= 0; i--)
                                {
                                    Bitmap bmpPArgb = this.___pargbConvertedBitmapList.Values[i];
                                    if (bmpPArgb != null)
                                    {
                                        bmpPArgb.Dispose();
                                        bmpPArgb = null;
                                        this.___pargbConvertedBitmapList.RemoveAt(i);
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception exPArgb)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("Document.CleanUp PArgb List Dispose Exception... but cont...", exPArgb);
                        }
                    }
                    this.___pargbConvertedBitmapList.Clear();
                    this.___pargbConvertedBitmapList = null;
                }
                if (this.___cssRuleBlackList != null)
                { 
                    this.___cssRuleGroundList = null;
                }
                if (this.___tagStyles != null)
                {
                    // this.___tagStyles.Clear();
                    this.___tagStyles = null;
                }
                if (this.___PageRequestedUrlList != null)
                {
                    //this.___PageRequestedUrlList.Clear();
                    this.___PageRequestedUrlList = null;
                }
                /*
                if(this.CharIndexTagElementMatchingMatrix != null)
                {
                 //   this.CharIndexTagElementMatchingMatrix.Clear();
                    this.CharIndexTagElementMatchingMatrix = null;
                }
                */

                if (this.___encText != null)
                {
                    this.___encText = null;
                }

                if (this.___skipTagStack != null)
                {
                    this.___skipTagStack = null;
                }
                if (this.___currentClosedElement != null)
                {
                    this.___currentClosedElement = null;
                }
                if (this.___currentParentElement != null)
                {
                    this.___currentParentElement = null;
                }
                if (this.___event != null)
                {
                    this.___event.___resetToDefaults();
                    this.___event = null;
                }
                if (this.___forms != null)
                {

                    this.___forms = null;
                }
                if (this.___frames != null)
                {
                    this.___frames = null;
                }
                if (this.___layers != null)
                {

                    this.___layers = null;
                }
                if (this.___DocumentElementIDList != null)
                {
                    this.___DocumentElementIDList.Clear();
                    this.___DocumentElementIDList = null;
                }
                if (this.___DocumentElementIDLockingObject != null)
                {
                    this.___DocumentElementIDLockingObject = null;
                }
                /*
                if (this.___namespaces != null)
                {
                    this.___namespaces.Clear();
                    this.___namespaces = null;
                }
                 */
                if (this.___cssRuleBlackList != null)
                {

                    this.___cssRuleBlackList = null;
                }

                if (this.___scripts != null && this.___scripts.Count > 0)
                {
                    this.___scripts.Clear();
                }
                this.___scripts = null;
                if (this.___scriptEventList != null)
                {

                    this.___scriptEventList.Clear();
                    this.___scriptEventList = null;
                }
                if (this.___bodyDummyElement != null)
                {
                    this.___bodyDummyElement.Dispose();
                    this.___bodyDummyElement = null;
                }
                if (this.___headDummyElement != null)
                {
                    this.___headDummyElement.Dispose();
                    this.___headDummyElement = null;
                }
                if (this.___CurrentCookieString != null)
                {
                    this.___CurrentCookieString = null;
                }


                if (this.___body != null)
                {
                    this.___body.Dispose();
                    this.___body = null;
                }
                if (this.___head != null)
                {
                    this.___head.Dispose();
                    this.___head = null;
                }
                if (this.___selection != null)
                {
                    this.___selection.Dispose();
                    this.___selection = null;
                }
                if (this.___ElementDynamicallyCreatedList != null)
                {
                    try
                    {
                        int cCount = this.___ElementDynamicallyCreatedList.Count;
                        for (int i = cCount - 1; i >= 0; i--)
                        {
                            CHtmlElement elem = this.___ElementDynamicallyCreatedList[i];
                            if (elem != null)
                            {
                                elem.Dispose();
                                elem = null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("CleanUp  ___ElementDynamicallyCreatedList", ex);
                        }
                    }
                    this.___ElementDynamicallyCreatedList.Clear();
                    this.___ElementDynamicallyCreatedList = null;
                }


                if (this.___HtmlBuilder != null)
                {

                    this.___HtmlBuilder = null;
                }


                if (this.___DocumentWriteBuilderLockObject != null)
                {
                    this.___DocumentWriteBuilderLockObject = null;
                }
                if (this.___HtmlBuilderLockObject != null)
                {
                    this.___HtmlBuilderLockObject = null;
                }

                if (this.___CHtmlStyleElementListsLockingObject != null)
                {
                    this.___CHtmlStyleElementListsLockingObject = null;
                }
                if (this.___ParseThreadLockObject != null)
                {
                    this.___ParseThreadLockObject = null;
                }
                if (this.___DocumentWriteBuilderLockObject != null)
                {
                    this.___DocumentWriteBuilderLockObject = null;
                }
                if (this.___charset != null)
                {
                    this.___charset = null;
                }
                if (this.___alink != null)
                {
                    this.___alink = null;
                }
                if (this.___dir != null)
                {
                    this.___dir = null;
                }
                if(this.___rawHttpHeaders != null)
                {
                    this.___rawHttpHeaders = null;
                }
                if (this.___FGColorString != null)
                {
                    this.___FGColorString = null;
                }
                if (this.___mimeType != null)
                {
                    this.___mimeType = null;
                }

                if (this.___TemporayBitmap != null)
                {
                    try
                    {
                        this.___TemporayBitmap.Dispose();
                    }
                    catch (Exception ex)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("CleanUp TempBitmap", ex);
                        }
                    }
                    this.___TemporayBitmap = null;
                }
                if (this.___DocumentLockingObject != null)
                {
                    this.___DocumentLockingObject = null;
                }

                if (this.___HttpResponseRedierctLocationURL != null)
                {
                    this.___HttpResponseRedierctLocationURL = null;
                }
                if (this.___implementation != null)
                {
                    this.___implementation = null;
                }
                if (base.___locationBase != null)
                {
                    base.___locationBase = null;
                }


                base.Dispose();
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                {
                    commonLog.LogEntry("CHtmlDocument CleanUp()", ex);
                }
            }
        }
#endregion
        internal void ___SetWindowEventSrcObject(string eventName, object ___srcElement, object ___toElement)
        {



            this.___event.___set_event_type(eventName);

            if (___srcElement != null)
            {
                this.___event.srcElement = ___srcElement;
                this.___event.fromElement = ___srcElement;
                if (___toElement != null)
                {
                    this.___event.toElement = ___toElement;
                }

            }
        }
        /// <summary>
        /// Reset window.event to default value
        /// </summary>
        internal void ___ResetWindowEvent()
        {
            this.___event.___resetToDefaults();

        }

        /// <summary>
        /// This finds img element and set map flag to true and map document index
        /// </summary>
        /// <param name="mapElement"></param>
        private void ProcessElementMapInfomation(CHtmlElement mapElement)
        {
            try
            {
                if (string.IsNullOrEmpty(mapElement.___name) == false)
                {

                    // map tag target usually resides in parent's child in the same level.
                    CHtmlElement targetElement = null;
                    if (mapElement.___parent != null && mapElement.___parent is CHtmlElement)
                    {
                        CHtmlElement __parentElement = mapElement.___parent as CHtmlElement;
                        int parentChildCount = __parentElement.___childNodes.Count;
                        for (int i = 0; i < parentChildCount; i++)
                        {
                            CHtmlElement childElement = __parentElement.___childNodes[i] as CHtmlElement;

                            string sUseMap = commonHTML.GetElementAttributeInString(childElement, "usemap");
                            if (sUseMap.Length > 0 && sUseMap[0] == '#')
                            {
                                sUseMap = sUseMap.Remove(0, 1);
                            }
                            if (string.Equals(sUseMap, mapElement.name, StringComparison.OrdinalIgnoreCase) == true)
                            {
                                targetElement = childElement;
                                break;
                            }
                        }
                    }
                    if (targetElement != null)
                    {
                        mapElement.___HasMapInfo = true;

                        targetElement.___HasMapInfo = true;

                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 30)
                        {
                            commonLog.LogEntry("Map Tag Found : {0} -> {1}", mapElement, targetElement);
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("ProcessElementMapInfomation", ex);
                }
            }
        }
        /// <summary>
        /// This is just for returns window.frames.length
        /// </summary>
        /// <returns></returns>
        public double ___get_window_length_count_viaWidow()
        {
            if (this.___IsMultiversalDocument == true)
            {
                if (this.___framesAsMultiversalWindow != null)
                {
                    return this.___framesAsMultiversalWindow.Count;
                }
            }
            else
            {
                if (this.___frames != null)
                {
                    return this.___frames.Count;
                }
                else if (this.___framesAsMultiversalWindow != null)
                {
                    return this.___framesAsMultiversalWindow.Count;
                }
            }
            return 0;
        }
        public new void Dispose()
        {
            this.___Disposing = true;
            this.___cleanUp();
            base.Dispose();
            GC.SuppressFinalize(this);
        }

        
        public void AbortParseThread()
        {
            if (this.___IsThreadAbortOccurred == false)
            {
                this.___IsThreadAbortOccurred = true;
            }
            if (this.___Disposing == false)
            {
                this.___Disposing = true;
            }
            try
            {
                if (this.___threadDOMParse != null)
                {

                    this.___threadDOMParse.Abort();

                }
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                {
                    commonLog.LogEntry("AbortParseThread called '{0}' {1}", this.___UrlShortName, ex.Message);
                }
            }
        }

        public string HttpServerName
        {
            get { return commonHTML.___convertNullToEmpty(this.___strServer); }
            set { this.___strServer = value; }
        }
        public string HttpStatusCode
        {
            get { return commonHTML.___convertNullToEmpty(this.___strStatusCode); }
            set { this.___strStatusCode = value; }
        }
        public string HttpStatusDescrption
        {
            set { this.___strStatusDescrption = value; }
            get { return commonHTML.___convertNullToEmpty(this.___strStatusDescrption); }
        }

        public double ContentLegnth
        {
            get { return (double)this.___ContentLength; }
        }
        public double contentLegnth
        {
            get { return (double)this.___ContentLength; }
        }

        public string tagName
        {
            set { base.___tagName = value; }
            get { return base.___tagName; }
        }

        /// <summary>
        /// Retrieves a value that indicates whether standards-compliant mode is switched on for the object.
        /// </summary>
        public string compatMode
        {
            get { return commonHTML.___convertNullToEmpty(this.___compatMode); }
        }
        private string ___compatMode = "CSS1Compat";







        
        private GraphicCotainer ___createGraphicContainer()
        {
            if (this.___Disposing)
                return null;
            GraphicCotainer grCon = null;
            try
            {

                // Some Case Window Handle is not created use Bitmap
                if (this != null && this.___Disposing == false && this.___IsThreadAbortOccurred == false)
                {
                    if (this.___TemporayBitmap == null)
                    {
                        if (this.___IsMultiversalDocument == false)
                        {
                            this.___TemporayBitmap = new Bitmap(100, 50);

                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                            {
                                commonLog.LogEntry("CHtmlDocument CreateGraphicContainer using Bitmap Graphics : {0} ", this.___TemporayBitmap.Size);
                            }
                        }
                        else
                        {

                        }
                    }

                    grCon = new GraphicCotainer();
                    try
                    {
                        if (this.___TemporayBitmap != null)
                        {
                            grCon.Graphic = Graphics.FromImage(this.___TemporayBitmap);
                        }
                    }
                    catch
                    {
                        try
                        {
                            this.___TemporayBitmap.Dispose();
                            this.___TemporayBitmap = null;
                        }
                        catch (Exception ex)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                            }
                        }
                        if (this.___IsMultiversalDocument == false)
                        {
                            this.___TemporayBitmap = new Bitmap(100, 50);

                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                            {
                                commonLog.LogEntry("Retrying CHtmlDocument CreateGraphicContainer using Bitmap Graphics : {0} ", this.___TemporayBitmap.Size);
                            }
                            grCon.Graphic = Graphics.FromImage(this.___TemporayBitmap);
                        }
                    }
                    if (grCon.Graphic != null)
                    {
                        grCon.Graphic.Clear(Color.White);
                    }
                    grCon.Font = new Font(FontFamily.GenericSansSerif, 11f);
                    grCon.StandardStringFormat = StringFormat.GenericTypographic;
                    goto CompletePhase;
                }


            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                {
                    commonLog.LogEntry("CHtmlDocument CreateGraphicContainer", ex);
                }
            }
        CompletePhase:
            return grCon;
        }



        public string URL
        {
            set { this.___URL = value; }
            get { return commonHTML.___convertNullToEmpty(this.___URL); }
        }
        public string baseUrl
        {
            get { return commonHTML.___convertNullToEmpty(this.___baseUrl); }
        }
        public string URLUnencoded
        {
            get { return commonHTML.___convertNullToEmpty(this.___URL); }
        }
        /// <summary>
        /// Short Name of Url
        /// </summary>
        internal string UrlShortName
        {
            get { return this.___UrlShortName; }
        }
        public CHtmlCollection styleSheets
        {
            get
            {
                return this.___styleSheets;
            }
        }

        public CHtmlCSSRuleGroundList styleElementLists
        {
            get { return this.___cssRuleGroundList; }
        }

        public string charset
        {
            set { this.___charset = value; }
            get { return this.___charset; }
        }
        public string charset_HttpHeader
        {
            set { this.___charset_HttpHeader = value; }
            get { return commonHTML.___convertNullToEmpty(this.___charset_HttpHeader); }
        }
        /// <summary>
        /// document.implemantation
        /// </summary>
        public CHtmlDOMImplementation implementation
        {
            get { return this.___implementation; }
        }
        public string characterSet
        {
            get { return commonHTML.___convertNullToEmpty(this.___charset); }
        }
        //document.body is the element that contains the content for the document. In documents with <body> contents, returns the <body> element, and in frameset documents, this returns the outermost <frameset> element.		// Though body is settable, setting a new body on a document will effectively remove all the current children of the existing <body> element.
        public ICHtmlElementInterface body
        {

            get
            {
                try
                {
                    if (this.___body != null)
                    {
                        return this.___body;
                    }


                    if (this.___bodyDummyElement != null)
                    {
                        return this.___bodyDummyElement;
                    }
                    else
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                        {
                            commonLog.LogEntry("Unnn. Script Access to document.body. but body not created yet. create it now");
                        }
                        this.___bodyDummyElement = CHtmlDocument.createCHtmlElementWithDomType("BODY", this.___documentDomType, null);
                        if (___MultiversalWindow != null)
                        {
                            this.___MultiversalWindow.___assignElementPrototype(___bodyDummyElement);
                        }
                        this.___bodyDummyElement.tagName = "BODY";
                        this.___bodyDummyElement.___elementTagType = CHtmlElementType.BODY;
                        this.___bodyDummyElement.X_DOM_ProcessorAdd("BODY Has Initialzied as dummy");
                        this.___bodyDummyElement.___IsDynamicElement = true;
                        if (this.___documentElement != null)
                        {
                            this.___bodyDummyElement.___parentWeakRef = new WeakReference(this.___documentElement, false);
                        }
                        this.___bodyDummyElement.___documentWeakRef = new WeakReference(this, false);
                        return this.___bodyDummyElement;
                    }
                }

                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                    }
                }
                return null;
            }

        }


        public ICHtmlElementInterface head
        {
            get
            {
                if (this.___head != null)
                {
                    return this.___head;
                }
                if (this.___Disposing)
                {
                    return null;
                }

                if (this.___headDummyElement != null)
                {
                    return this.___headDummyElement;
                }
                else
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                    {
                        commonLog.LogEntry("Unnn. Script Access to document.head. but body not created yet. create it now");
                    }
                    ___CreateAdHocHeadElement();

                    return this.___headDummyElement;
                }
            }
        }
        private void ___CreateAdHocHeadElement()
        {
            this.___headDummyElement = CHtmlDocument.createCHtmlElementWithDomType("HEAD", this.___documentDomType, null);
            this.___headDummyElement.tagName = "HEAD";
            this.___headDummyElement.___elementTagType = CHtmlElementType.HEAD;
            this.___headDummyElement.X_DOM_ProcessorAdd("Head Has Initialzied as dummy");
            if (this.___documentElement != null)
            {
                this.___headDummyElement.___parentWeakRef = new WeakReference(this.___documentElement, false);
            }
            this.___headDummyElement.___documentWeakRef = new WeakReference(this, false);
        }
        internal void ___createImageBase64ImageIntoDocument(CHtmlElement ___elem)
        {
            if (___elem != null)
            {
                if (___elem.___srcBase != null && ___elem.___srcBase.ProtocolType == CHtmlUriProtocolType.data)
                {
                    try
                    {
                        System.Drawing.Image ___imageConverted = commonHTML.ConvertIBase64ImageToImage(___elem.___srcBase.___Href) as System.Drawing.Image; 
                        if (___imageConverted != null)
                        {
                            this.___images[___elem.___srcBase.___Href] = ___imageConverted;
                            ___elem.___style.___IMG_ImageWeakReference = new WeakReference(___imageConverted, false);
                        }
                        if (this.___PageRequestedUrlList.ContainsKey(___elem.___srcBase.___Href) == false)
                        {
                            this.___PageRequestedUrlList[___elem.___srcBase.___Href] = null;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("___createImageBase64ImageIntoDocument() exception. ", ex);
                        }
                    }
                }
            }
        }
        /// <summary>
        /// returns version number of browser (MSIE Only)
        /// Chrome, firefox etc retuns null
        /// </summary>
        public object documentMode
        {
            get
            {
                if (string.Equals(CHtmlNavigator.___browserKeyName, "MSIE", StringComparison.Ordinal) == true)
                {
                    if (string.IsNullOrEmpty(CHtmlNavigator.___browserVersionShortName) == false)
                    {
                        double versionDouble = -1;
                        if (double.TryParse(CHtmlNavigator.___browserVersionShortName, out versionDouble) == true)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("document.documentMode returns : {0}", versionDouble);
                            }
                            return versionDouble;
                        }
                        else
                        {
                            return null;
                        }
                    }
                }

                return null;

            }
        }
        public string prefix
        {
            get
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("TODO: document.prefix returns empty");
                }
                return "";
            }
        }

        


        public string xmlEncoding
        {
            get
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("TODO: document.xmlEncoding returns empty");
                }
                return "";
            }
        }

        public string xmlStandalone
        {
            get
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("TODO: document.xmlStandalone returns empty");
                }
                return "";
            }
        }
        public string xmlVersion
        {
            get
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("TODO: document.xmlVersion returns empty");
                }
                return "";
            }
        }
        public string localName
        {
            get
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("TODO: document.localName returns empty");
                }
                return "";
            }
        }
        public string namespaceURI
        {
            get
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("TODO: document.namespaceURI returns empty");
                }
                return "";
            }
        }
        public ICHtmlElementInterface documentElement
		{
			get
			{
				if(this.___documentElement != null)
				{
					return this.___documentElement;
				}
				else
				{

					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
					{
						commonLog.LogEntry("document.documentElement is not found");
					}
					return null;
				}
			}
		}
        



		public CHtmlCollection images
		{
			get{return this.___imageElements;}
		}

		public string defaultCharset
		{
			get
			{
                return commonHTML.___convertNullToEmpty(this.___defaultCharset);
			}
		}


		public object defaultView
		{
			get
			{
                if (this.___IsMultiversalDocument == false)
                {
                    if (this.___WindowReferenceContainer != null && this.___WindowReferenceContainer.____RhinoCurrentWindowScriptableReference != null)
                    {
                        return this.___WindowReferenceContainer.____RhinoCurrentWindowScriptableReference.Target;
                    }
                    else
                    {
                        return null;
                    }
                }
                else
                {
                    if (this.___MultiversalWindow != null)
                    {
                        return this.___MultiversalWindow;
                    }
                    else if(this.___MultiversalWindowWeakReference != null)
                    {
                        return this.___MultiversalWindowWeakReference.Target;
                    }
                    return null;
                }
			}
		}

		/// <summary>
		/// Element for docType if exists
		/// this is not string it is object
		/// </summary>
		private CHtmlDTD ___docTypeElement = null;
		public object doctype
		{
			get
			{
				return this.___docTypeElement;
			}
		}
		public string vlinkColor
		{
			get{return this.___vlink;}
			set{this.___vlink = value;}
		}
		public Color vlinkColorNative
		{
			get{return this.___vlinkColorNative;}
			set{this.___vlinkColorNative = value;}
		}
		public string linkColor
		{
			get{return this.___link;}
			set{this.___link = value;}
		}
		public Color linkColorNative
		{
			get{return this.___linkColorNative;}
			set{this.___linkColorNative = value;}
		}
		public string alinkColor
		{
			get{return commonHTML.___convertNullToEmpty(this.___alink);}
			set{this.___alink = value;}
		}
		public Color alinkColorNative
		{
			get{return this.___alinkColorNative;}
			set{this.___alinkColorNative = value;}
		}
		public int WorkingCharPosition
		{
			get{return this.___curHTMLParsePosition;}
		}
		/// <summary>
		/// HTMLDocument.referrer
		/// </summary>
		public string referrer
		{
			get{return commonHTML.___convertNullToEmpty(this.___referrer);}
			set{this.___referrer = value;}
		}
		public string lastModified
		{
			get{return commonHTML.___convertNullToEmpty(this.___lastModified);}
			set{this.___lastModified = value;}
		}
		/// <summary>
		/// IE Specific object
		/// </summary>
		public CHtmlDocumentSelection  selection
		{
			get{return this.___selection;}
			set
			{
				if(value != null)
				{
					this.___selection = value;
				}
				else
				{
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
					{
						commonLog.LogEntry("document.selection = {0}", value);
					}
				}
			}
		}
		/// <summary>
		/// Firefox methods
		/// </summary>
		/// <returns></returns>
		public CHtmlDocumentSelection getSelection()
		{
			return this.___selection;
		}
		internal string ___domain = null;
		/// <summary>
		/// Sets or retrieves the security domain of the document. 
		/// </summary>
		public string domain
		{
			set{this.___domain  = value;}
			get
			{
				if(string.IsNullOrEmpty(this.___domain) == true)
				{
					if(base.___locationBase != null)
					{
                        this.___domain = string.Copy(base.___locationBase.hostname);
					}
				}
				if(string.IsNullOrEmpty(this.___domain)== true && string.IsNullOrEmpty(this.___URL) == false)
				{
					try
					{

                        this.___domain = commonHTML.GetHostFromUrlString(this.___URL);
					}
                    catch (Exception ex)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                        }
                    }
				}
                return commonHTML.___convertNullToEmpty(this.___domain);
			}
		}
        public void doScroll()
        {
            this.doScroll_Inner(null);
        }
        public void doScroll(object _args)
        {
            this.doScroll_Inner(_args);
        }
        private void doScroll_Inner(object _args)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("skip document.doScroll : {0}", _args);
            }
        }

		public string nameProp
		{
			get
			{
				return this.___title;
			}
		}
		/// <summary>
		/// Returns the element for the specified x and y coordinates.
		/// </summary>
		/// <param name="_x"></param>
		/// <param name="_y"></param>
		/// <returns></returns>
		public CHtmlElement elementFromPoint(object xobj, object yobj)
		{
            int _x = 0;
            int _y = 0;
            _x = commonHTML.GetIntFromObject(xobj, 0);
            _y = commonHTML.GetIntFromObject(yobj, 0);
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("calling elementFromPoint : {0}", _x, _y);
            }
            CHtmlCollection ___arList = this.getElementsByTagName("*");
            int ___allCount = ___arList.Count;
			for(int i = 0; i < ___allCount; i ++)
			{
                CHtmlElement elem = ___arList[i] as CHtmlElement;
				if(elem !=null)
				{
					if(elem.___IsElementVisible == true && elem.offsetScreenBounds.Contains(_x, _y))
					{
						return elem;
					}
				}
			}
			return null;
		}
		/// <summary>
		/// IHTMLBodyElement::link Property
		/// Sets or retrieves the color of the document links for the object. 
		/// </summary>
		public string link
		{
			set{this.___link = value;}
			get{return commonHTML.___convertNullToEmpty(this.___link);}

		}
		/// <summary>
		/// IHTMLBodyElement::link Property
		/// Sets or retrieves the color of the document links for the object. 
		/// </summary>
		public string vlink
		{
			set{this.___vlink = value;}
			get{return commonHTML.___convertNullToEmpty(this.___vlink);}

		}
		public string dir
		{
			get{return commonHTML.___convertNullToEmpty(this.___dir);}
			set{this.___dir = value;}
		}
		/// <summary>
		/// return forms
		/// </summary>
		public CHtmlDictionaryWithIndexEasyAssigned forms
		{
			get{return this.___forms;}
		}

		public string keywords
		{
			get{return commonHTML.___convertNullToEmpty(this.___keywords);}
		}
		/// <summary>
		/// DHTML layers. IE10 and Chrome 20 does not support layers;
		/// </summary>
        public CHtmlDictionaryWithIndexEasyAssigned layers
		{
			get{return this.___layers;}
		}
		/// <summary>
		/// Retrieves a collection of LinkBase Class 
		/// </summary>
		public CHtmlCollection links
		{
			get{return this.___links;}
		}
		/// <summary>
		/// Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.
		/// </summary>
        public CHtmlDictionaryWithIndexEasyAssigned anchors
		{
			get{return this.___anchors;}
		}
        public CHtmlDictionaryWithIndexEasyAssigned embeds
		{
			get{return this.___embeds;}
		}
		private string ConvertStyleUrlIntoFullUrl(string _cssUrl, string _partUri, int _mode)
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				commonLog.LogEntry("Need to convert partial url to full url: {0} mode: {1} css: {2}", _partUri, _mode, _cssUrl);
			}
			switch(_mode)
			{
				case 0: // Segment
					return _partUri;
				default:
				case 1:
					return commonHTML.GetAbsoluteUri(_cssUrl, "", _partUri);

			}
		}
		internal void ___mergeCHtmlStyleElementIntoDocumentStyleSheet(CHtmlCSSRule sPart)
		{
			if(sPart != null)
			{
			
				if(sPart.___CSSHack != CSSHackType.None || sPart.___NonSearchableStyleSheet == true)
				{
                    if (System.Threading.Monitor.TryEnter(___cssRuleBlackList, 500))
                    {
                        try
                        {
                            ___cssRuleBlackList.Add(sPart);
                        }
                        finally
                        {
                            System.Threading.Monitor.Exit(___cssRuleBlackList);
                        }
                    }
                    return;
				}
				bool __LockeObtained = false;
                if (sPart.___AttributesBulkTitleList != null)
                {
                    int ___BulkItemCount = sPart.___AttributesBulkTitleList.Count;
                    if (___BulkItemCount > 0)
                    {
                        foreach(string strAttributeKey in sPart.___AttributesBulkTitleList.Keys)
                        {
                            if (___CSSAttributeLookupFieldList.ContainsKey(strAttributeKey) == false)
                            {
                                this.___CSSAttributeLookupFieldList[strAttributeKey] = 1;
                            }
                        }
                    }
                }
                int ___ListNthOfTypeTagTypesCount = sPart.___ListNthOfTypeTagTypes.Count;
                if (___ListNthOfTypeTagTypesCount > 0)
				{
                    try
                    {
                        // ___ListNthOfTypeTagTypes may contains other than TagTypes in future. objtain as object
                        foreach(string strKey in sPart.___ListNthOfTypeTagTypes.Keys)
                        {
                           
                            if (strKey != null)
                            {
                                if (this.___CSSNthOfTypeTagTypesList.ContainsKey(strKey) == false)
                                {
                                    this.___CSSNthOfTypeTagTypesList[strKey] = 1;
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 5)
                        {
                            commonLog.LogEntry("MergeCHtmlStyleElementIntoDocumentStyleSheet .___CSSNthOfTypeTagTypesList Exception", ex);
                        }
                    }
				}
		
				try
				{
					if(System.Threading.Monitor.TryEnter(this.___CHtmlStyleElementListsLockingObject, 5000))
					{
                        if (sPart.___PseudoClassType != CHtmlPseudoClassType.None)
                        {
                            this.___CSSDocumentTotalPseudoClass = this.___CSSDocumentTotalPseudoClass | sPart.___PseudoClassType;
                        }
						__LockeObtained = true;
						int pos = this.___cssRuleGroundList.BinarySearch(sPart, this.___GroundStyleSheetSorter);
						if(pos < 0)
						{
							pos = ~pos;
						}
						this.___cssRuleGroundList.Insert(pos, sPart);
					}
					else
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
						{
							commonLog.LogEntry("Style Merge Monitor List Lock Failed");
						}
					}
				}
				finally
				{
					if(__LockeObtained )
					{
						try
						{
							System.Threading.Monitor.Exit(this.___CHtmlStyleElementListsLockingObject);
						}
                        catch (Exception ex)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                            }
                        }
					}

				}
			}
		}
        private void ___FinishStyleQueueThread()
        {
            if (this.___isStyleQueueShouldBeStopedAfterBodyTag == false)
            {
                this.___isStyleQueueShouldBeStopedAfterBodyTag = true;
            }
            
            if (this.___StyleQueue != null)
            {

                this.___StyleQueue.IsAllCSSComplete = true;
            }

        }
		
		public CHtmlCollection scripts
		{
			get{return this.___scripts;}
		}


		/// <summary>
		/// IHTMLDoucument2 Interface
		/// Retrieves an interface pointer to a zero-based collection 
		/// of all the embed objects in an HTML document. The objects are
		///  in the same order as they appear in the document. 
		/// </summary>
		public CHtmlDictionaryWithIndexEasyAssigned plugins
		{
			get{return this.___embeds;}
		}
        internal void ___run_prefetch_element_src_thread()
        {

        }
		

		/// <summary>
		/// Detect Content Encoding
		/// </summary>
		/// <param name="ele"></param>
		
		private static string GetEncodingByElement(CHtmlElement ele)
		{
			string __strCharSet = "";
			if(ele.___attributes.ContainsKey("charset"))
			{
				__strCharSet = commonHTML.GetElementAttributeInString(ele, "charset");
				goto CharsetObtained;
			}
			string __strContent = commonHTML.GetElementAttributeInString(ele,"content");
		
			if(__strContent.Length == 0)
				return "";
		
			int pos = __strContent.IndexOf("charset", StringComparison.OrdinalIgnoreCase);
			if(pos == -1)
				return "";
			__strCharSet = __strContent.Substring(pos + 7);
			CharsetObtained:
				__strCharSet =  __strCharSet.Replace("=", "");
			if(__strCharSet.IndexOf(';') > -1)
			{
				__strCharSet = __strCharSet.Substring(0, __strCharSet.IndexOf(';') );
			}
			__strCharSet = commonData.GetCharsetFromHTMLCharset(__strCharSet);
            if (string.IsNullOrEmpty(__strCharSet) == false)
            {
                if(commonHTML.FasterIsWhiteSpaceLimited(__strCharSet[0]) == true || commonHTML.FasterIsWhiteSpaceLimited(__strCharSet[__strCharSet.Length -1]) == true)
                {
                    __strCharSet = __strCharSet.Trim();
                }
            }
            return __strCharSet;
		}
        /// <summary>
        /// Attempts detect "charset" string in memory string and it begin with meta tag
        /// </summary>
        /// <param name="___memoryStream"></param>
        /// <returns></returns>
        public static bool ___isMemoryStringContainsMetaCharset(System.IO.MemoryStream ___memoryStream)
        {
            System.Text.Encoding utf8enc = System.Text.Encoding.UTF8;
            string ___utf8string = utf8enc.GetString(___memoryStream.ToArray());
            if (string.IsNullOrEmpty(___utf8string) == false)
            {
                int foundCharsetPos = -1;
                int lookupPos = 0;
                foundCharsetPos = ___utf8string.IndexOf("charset",lookupPos, StringComparison.OrdinalIgnoreCase);
                int __curLookupCount = 0;
                while (foundCharsetPos > -1)
                {
                    __curLookupCount++;
                    if (__curLookupCount > 10)
                        return false;
                    lookupPos = foundCharsetPos;
                    // now check it start with meta
                    
                    for (int i = foundCharsetPos - 1; i >= 0; i--)
                    {
                        char c = ___utf8string[i];
                        if (c != '<')
                        {
                            continue;
                        }
                        else
                        {
                            char tag1Char = ___utf8string[i+1];
                            if ((tag1Char == 'm' || tag1Char == 'M') || (tag1Char == 'h' || tag1Char == 'H'))
                            {
                                char tag2Char = ___utf8string[i + 2];
                                char tag3Char = ___utf8string[i + 3];
                                char tag4Char = ___utf8string[i + 4];
                                if ((tag2Char == 'e' || tag2Char == 'E') && (tag3Char == 't' || tag3Char == 'T') && (tag4Char == 'a' || tag4Char == 'A'))
                                {
                                    return true;
                                }
                                if ((tag2Char == 't' || tag2Char == 'T') && (tag3Char == 'm' || tag3Char == 'M') && (tag4Char == 'l' || tag4Char == 'L'))
                                {
                                    return true;
                                }
                                if ((tag2Char == 'e' || tag2Char == 'E') && (tag3Char == 'a' || tag3Char == 'A') && (tag4Char == 'd' || tag4Char == 'D'))
                                {
                                    return true;
                                }

                            }
                        }
                    }
                    foundCharsetPos = ___utf8string.IndexOf("charset", lookupPos, StringComparison.OrdinalIgnoreCase);
                }
            }
            if (___memoryStream.Length > commonHTML.CHARSET_LOOKUP_BYTES_LIMIT)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("___isMemoryStringContainsMetaCharset()  is over {0}, but proceed to read...", commonHTML.CHARSET_LOOKUP_BYTES_LIMIT);
                }
                return true;
            }
            if (___utf8string.IndexOf("<body", StringComparison.OrdinalIgnoreCase) > -1)
            {
                // it has <body> tag no more look up
                return true;
            }
            return false;
        }

        /// <summary>
        /// Search Charset from Memory Stream
        /// </summary>
        /// <param name="___memoryStream">Memory Stream</param>
        /// <param name="resultCharset">Charset If found</param>
        /// <returns>true : exists</returns>
        
        internal bool ___getHtmlCharsetInMemorySteam(System.IO.MemoryStream ___memoryStream, out string resultCharset)
        {
            byte[] byteHead = null;
            resultCharset = null;

            char c1 = '\0';
            char c2 = '\0';
            char c3 = '\0';
            char c4 = '\0';
            char ch = '\0';
            byte b = new byte();
            byteHead = ___memoryStream.ToArray();
            bool __IsFirstTagPassed = false;
            bool __noCharsetFoundByBodyTag = false;
            System.Text.StringBuilder __sbXMLHeader = null;
            System.Text.StringBuilder __sbLine = null;
            char ebc = '\0';
            int byteHeadLen = byteHead.Length;
            int i = 0;
            for (i = 0; i < byteHeadLen - 5; i++)
            {
                try
                {
                    b = byteHead[i];
                    if (b == 0x3c)
                    {
                        c1 = (char)byteHead[i + 1];
                        c2 = (char)byteHead[i + 2];
                        c3 = (char)byteHead[i + 3];
                        c4 = (char)byteHead[i + 4];
                        if (c1 >= 'A' && c1 <= 'Z')
                        {
                            c1 = commonHTML.FasterToLower(c1);
                        }
                        if (c2 >= 'A' && c2 <= 'Z')
                        {
                            c2 = commonHTML.FasterToLower(c2);
                        }
                        if (c3 >= 'A' && c3 <= 'Z')
                        {
                            c3 = commonHTML.FasterToLower(c3);
                        }
                        if (c4 >= 'A' && c4 <= 'Z')
                        {
                            c4 = commonHTML.FasterToLower(c4);
                        }
                        if (__IsFirstTagPassed == false && c1 == '?' && c2 == 'x' && c3 == 'm' && c4 == 'l')
                        {
                            __sbXMLHeader = new StringBuilder();
                            int h = i + 4;
                            while (true)
                            {
                                ch = (char)byteHead[h];
                                if (ch == '?' || ch == '>' || h >= byteHead.Length)
                                    break;
                                if (ch == '\'' || ch == '\"')
                                {
                                    h++;
                                    continue;
                                }
                                if (ch >= 'A' && ch <= 'Z')
                                {
                                    __sbXMLHeader.Append(commonHTML.FasterToLower(ch));
                                }
                                else
                                {
                                    __sbXMLHeader.Append(ch);

                                }

                                h++;
                            }
                            string xmlHeaders = __sbXMLHeader.ToString();
                            int charPos = xmlHeaders.IndexOf("encoding", StringComparison.OrdinalIgnoreCase);
                            if (charPos > -1)
                            {
                                string charString = xmlHeaders.Substring(charPos + 9);
                                if (charString.Length != 0)
                                {
                                    if (commonHTML.FasterIsWhiteSpaceLimited(charString[0]) == true || commonHTML.FasterIsWhiteSpaceLimited(charString[charString.Length - 1]) == true)
                                    {
                                        charString = charString.Trim();
                                    }
                                    resultCharset = charString;
                                    this.___defaultCharset = string.Copy(charString);
                                    try
                                    {
                                        if (string.Equals(resultCharset, "auto", StringComparison.OrdinalIgnoreCase) == true || string.Equals(this.___charset, "autodetect", StringComparison.OrdinalIgnoreCase) == true || string.Equals(this.___charset, "_autodetect", StringComparison.OrdinalIgnoreCase) == true)
                                        {
                                            goto ReturnCharsetPhase;
                                        }

                                        resultCharset = commonData.GetCharsetFromHTMLCharset(this.___charset);
                                        this.___charset_position_in_html = i;

                                    }
                                    catch (Exception ex)
                                    {
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                        {
                                            commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                        }
                                    }
                                    /*
									if(this._encText != null)
									{
										//goto ReturnCharsetPhase;
									}
									*/
                                    /*
									 * <?xml version="1.0" encoding="EUC-JP"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja" dir="ltr">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
									*/
                                    /* XMLHTTP may has charset after header. just continue.*/
                                    goto NextLine;
                                }
                            }
                            __IsFirstTagPassed = true;
                        }
                        if ((c1 == 'm' && c2 == 'e' && c3 == 't' && c4 == 'a') || (c1 == 'h' && c2 == 't' && c3 == 'm' && c4 == 'l'))
                        {

                            __sbLine = new StringBuilder();
                            bool ___IsContainsC = false;
                            int headlength = byteHead.Length - 5;
                            for (int w = i + 5; w < headlength; w++)
                            {
                                byte eb = (byte)byteHead[w];
                                if (eb == 0x3e)
                                {
                                    if (___IsContainsC == false)
                                    {
                                        goto NextLine;
                                    }
                                    else
                                    {
                                        string _sbStr = __sbLine.ToString();
                                        int PosCharset = _sbStr.IndexOf("charset", StringComparison.OrdinalIgnoreCase);
                                        if (PosCharset > -1)
                                        {
                                            int ___strLen = _sbStr.Length;
                                            bool __IsEqualFound = false;
                                            System.Text.StringBuilder __sbCharset = new StringBuilder();
                                            for (int posEnd = PosCharset + 4; posEnd < ___strLen; posEnd++)
                                            {
                                                char cc = _sbStr[posEnd];
                                                if (cc == '=')
                                                {
                                                    __IsEqualFound = true;
                                                    continue;
                                                }
                                                else
                                                {
                                                    if (__IsEqualFound)
                                                    {
                                                        if (char.IsLetterOrDigit(cc) || cc == '-' || cc == '_')
                                                        {
                                                            __sbCharset.Append(cc);
                                                        }
                                                        else
                                                        {
                                                            if (__sbCharset.Length > 0)
                                                            {
                                                                goto CharsetDone;
                                                            }
                                                        }
                                                    }
                                                    continue;
                                                }
                                            }
                                            CharsetDone:
                                            if (__sbCharset.Length > 0)
                                            {
                                                resultCharset = __sbCharset.ToString();
                                                this.___defaultCharset = __sbCharset.ToString();
                                                try
                                                {
                                                    if (string.IsNullOrEmpty(resultCharset) == false && (resultCharset[0] == 'a' || resultCharset[0] == '_'))
                                                    {
                                                        if (string.Equals(resultCharset, "auto", StringComparison.OrdinalIgnoreCase) == true || string.Equals(this.___charset, "autodetect", StringComparison.OrdinalIgnoreCase) == true || string.Equals(this.___charset, "_autodetect", StringComparison.OrdinalIgnoreCase) == true)
                                                        {
                                                            goto ReturnCharsetPhase;
                                                        }
                                                    }
                                                    resultCharset = commonData.GetCharsetFromHTMLCharset(resultCharset);
                                                    this.___charset_position_in_html = i;
                                                    this.___encText = Encoding.GetEncoding(this.___charset);
                                                }
                                                catch (Exception ex)
                                                {
                                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                    {
                                                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                                    }
                                                }
                                                if (this.___encText != null)
                                                {
                                                    goto ReturnCharsetPhase;
                                                }

                                                goto ReturnCharsetPhase;
                                            }
                                            else
                                            {
                                                goto NextLine;
                                            }
                                        }
                                        else
                                        {
                                            goto NextLine;
                                        }
                                    }

                                }
                                else
                                {
                                    ebc = (char)eb;
                                    if (commonHTML.FasterIsWhiteSpaceLimited(ebc) == true)
                                    {
                                        __sbLine.Append(' ');
                                    }
                                    else
                                    {
                                        if (ebc == 'C' || ebc == 'c')
                                        {
                                            // look for ' c' or ';c'
                                            if (__sbLine.Length > 0 && (__sbLine[__sbLine.Length - 1] == ' ' || __sbLine[__sbLine.Length - 1] == ';'))
                                            {
                                                ___IsContainsC = true;
                                            }
                                        }
                                        if (eb >= 65 && eb <= 90)
                                        {
                                            __sbLine.Append(commonHTML.FasterToLower(ebc));
                                        }
                                        else
                                        {
                                            __sbLine.Append(ebc);
                                        }
                                    }
                                }
                            }


                        }
                        else
                        {
                            if (c1 == 'b' && c2 == 'o' && c3 == 'd' && c4 == 'y')
                            {
                                resultCharset = "utf-8";
                                __noCharsetFoundByBodyTag = true;
                                goto ReturnCharsetPhase;
                            }
                        }

                    }
                    NextLine:
                    if (false) {; }

                }
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("DetectCharsetInMemoryStream()", ex);
                    }
                }

            }
            ReturnCharsetPhase:



            switch (resultCharset)
            {
                case "UTF-8":
                case "UTF_8":
                case "UTF8":
                case "Utf_8":
                case "Utf8":
                case "Utf-8":
                case "UTf-8":
                case "utF-8":
                case "utf-8":
                case "utf8":
                case "utf_8":
                    this.___DBCSCharLength = 3;
                    break;
                default:
                    this.___DBCSCharLength = 2;
                    break;
            }
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
            {
                commonLog.LogEntry("charset '{0}' detected at pos '{1}' no charset until body : {2}...", resultCharset, i, __noCharsetFoundByBodyTag);

            }
            if (string.IsNullOrEmpty(resultCharset))
            {
                return false;
            }
            else
            {
                return true;
            }
        }


		
		private void ___DetectIdenticalStylePreviousSiblingCloningEnabled()
		{

		}
        public void setDocumentIntoMultiversalWindow()
        {
            if (this.___MultiversalWindowWeakReference != null)
            {
                this.___MultiversalWindow = this.___MultiversalWindowWeakReference.Target as CHtmlMultiversalWindow;
                if (this.___MultiversalWindow != null)
                {
                    this.___MultiversalWindow.setDocumentGlobalMultiversalWindow(this);
                }

            }
        }
        public void setDocumentIntoMultiversalWindow(IMultiversalWindow window)
        {
            if (window != null)
            {
                this.___MultiversalWindow = window as CHtmlMultiversalWindow;
                if (this.___MultiversalWindow != null)
                {
                    this.___MultiversalWindow.setDocumentGlobalMultiversalWindow(this);
                }
            }
        }



        private void ___CreateTextNodeElement(CHtmlElement ___parentElement, System.Text.StringBuilder ___sbText, int ___StartPos, int ___EndPos, System.Collections.Generic.SortedList<int, char> ___NBSPList)
        {
            if (___parentElement != null && ___sbText != null)
            {
                bool ___PreserveCRLFHeadAfter = false;
                switch (___parentElement.___elementTagType)
                {
                    case CHtmlElementType.PRE:
                    case CHtmlElementType.CODE:
                        ___PreserveCRLFHeadAfter = true;
                        break;
                }
                if (___PreserveCRLFHeadAfter == false)
                {
                    int HeadRemovedCharCount = 0;
                    int TailRemovedCharCount = 0;
                    int __len = ___sbText.Length;
                    // Lookup Upper
                    for (int i = 0; i < __len; i++)
                    {
                        if (commonHTML.FasterIsWhiteSpaceLimited(___sbText[i]) == true)
                        {
                            if (___sbText[i] == 32 && ___NBSPList != null)
                            {
                                if (___NBSPList.ContainsKey(i + HeadRemovedCharCount) == true)
                                {
                                    continue;
                                }
                            }
                            HeadRemovedCharCount++;
                            ___sbText.Remove(i, 1);
                            __len = ___sbText.Length;
                            i--;
                            continue;
                        }
                        else
                        {
                            break;
                        }
                    }
                    // Lookup Down
                    if (___sbText.Length > 0)
                    {
                        __len = ___sbText.Length;
                        for (int i = __len - 1; i >= 0; i--)
                        {
                            if (commonHTML.FasterIsWhiteSpaceLimited(___sbText[i]) == true)
                            {
                                if (___sbText[i] == 32 && ___NBSPList != null)
                                {
                                    if (___NBSPList.ContainsKey(i + HeadRemovedCharCount + TailRemovedCharCount) == true)
                                    {
                                        continue;
                                    }
                                }
                                TailRemovedCharCount++;
                                ___sbText.Remove(i, 1);
                                __len = ___sbText.Length;

                               
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                    }
                }
                if (___sbText.Length == 0)
                    return;
                 CHtmlTextElement __textElement = new CHtmlTextElement();
                __textElement.___parentWeakRef = new WeakReference(___parentElement, false);
                __textElement.___documentWeakRef = new WeakReference(this, false);
                __textElement.___ClosedReson = CHtmlTagClosedReasonType.Direct;
                __textElement.value = ___sbText.ToString();
                /*
                if (System.Threading.Monitor.TryEnter(this.___allElementlist_LockingObject, 1) == true)
                {
                    try
                    {
                        __textElement.___DocumentElementIndex = this.___allElementList.Add(__textElement);
                    }
                    finally
                    {
                        System.Threading.Monitor.Exit(this.___allElementlist_LockingObject);
                    }
                }
                else
                {
                    __textElement.___DocumentElementIndex = this.___allElementList.Add(__textElement);
                }
                 */

                __textElement.___IsElementVisible = ___parentElement.___IsElementVisible;
                __textElement.___ChildNodeIndex = ___parentElement.___childNodes.Add(__textElement);
                if (this.___IsDomModeFullParseMode() && this.___IsHtmlBodyTagPassed == true)
                {
                    try
                    {
                        this.___calculateTextElementBounds(__textElement);
                        if (__textElement.___isCalculateElementBoundsCalled == false)
                        {
                            __textElement.___isCalculateElementBoundsCalled = true;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                        {
                            commonLog.LogEntry("___calculateTextElementBounds for _newText", ex);
                        }
                        __textElement.___isCalculateElementBoundsCalled = true;
                    }
                }
                else
                {
                    __textElement.___isCalculateElementBoundsCalled = true;
                }
            }
        }
        internal int ___checkBodyHeadExistanceInHTMLBuilderMethodEnterCount = 0;
        internal void ___checkBodyHeadExistanceInHTMLBuilder()
        {
            ___checkBodyHeadExistanceInHTMLBuilderMethodEnterCount++;
            if (___checkBodyHeadExistanceInHTMLBuilderMethodEnterCount > 10 || this.___IsHtmlBodyTagPassed == true)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                {
                    commonLog.LogEntry("___checkBodyHeadExistanceInHTMLBuilder() entered more than 10 times. escaping");
                }
                return;
            }
            if (this.___HtmlBuilder != null)
            {
                char[] cs = null;
                string ___htmlBulilderString = null;
                try
                {
                    ___htmlBulilderString = this.___HtmlBuilder.ToString();
                    cs = ___htmlBulilderString.ToCharArray();
                }
                catch (Exception ex1)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                    {
                        commonLog.LogEntry("___checkBodyHeadExistanceInHTMLBuilder() ToString() Or ToCharArray() Exception", ex1);
                    }
                    return;
                }
                int csLen = cs.Length;
                char c0, ca1, ca2;
                for (int i = 0; i < csLen; i++)
                {
                    c0 = cs[i];
                    if (i < csLen - 1)
                    {
                        ca1 = cs[i +1];
                    }
                    else
                    {
                        ca1 = ' ';
                    }
                    if (i < csLen - 2)
                    {
                        ca2 = cs[i + 2];
                    }
                    else
                    {
                        ca2 = ' ';
                    }
                    if (c0 == '<')
                    {
                        if (ca1 == '/' || char.IsLetter(ca1))
                        {
                            bool IsHorB = false;
                            if (ca1 == '/')
                            {
                                if (ca2 == 'h' || ca2 == 'H' || ca2 == 'b' || ca2 == 'B')
                                {
                                    IsHorB = true;
                                }

                            }
                            else if (ca1 == 'h' || ca1 == 'H' || ca1 == 'b' || ca1 == 'B')
                            {
                                IsHorB = true;

                            }
                            if (IsHorB == true)
                            {
                                System.Text.StringBuilder sbTagPart = new StringBuilder();
                                for (int p = i + 1; p < csLen; p++)
                                {
                                    char pc = cs[p];
                                    if (commonHTML.FasterIsWhiteSpaceLimited(pc) || pc == '>')
                                    {
                                        if (sbTagPart.Length > 0)
                                        {
                                            break;
                                        }
                                    }
                                    if (pc >= 'a' && pc < 'z')
                                    {
                                        sbTagPart.Append(commonHTML.FasterToUpper(pc));
                                    }
                                    else
                                    {
                                        sbTagPart.Append(pc);
                                    }
                                }
                                if (sbTagPart.Length > 0)
                                {
                                    switch (sbTagPart.ToString())
                                    {
                                        case "BODY":
                                            this.___isBodyStartTagExistsInHTMLBuilder = true;
                                            this.___bodyStartTagPositionInHTMLBuilder = i;
                                            break;
                                        case "/BODY":
                                            this.___isBodyEndTagExistsInHTMLBuilder = true;
                                            this.___bodyEndTagPositionInHTMLBuilder = i;
                                            break;
                                        case "HEAD":
                                            this.___isHeadStartTagExistsInHTMLBuilder = true;
                                            this.___headStartTagPositionInHTMLBuilder = i;
                                            break;
                                        case "/HEAD":
                                            this.___isHeadEndTagExistsInHTMLBuilder = true;
                                            this.___headEndTagPositionInHTMLBuilder = i;
                                            break;

                                    }
                                }
                            }
                        }
                        else
                        {
                            continue;
                        }
                    }
                }
            }
        }
		public void ___parseDocument(string html, string charset)
        {
            this.___charset = charset;
            this.___IsHtmlResponseCompleted = true;
            this.___IsHtmlCharSetDetectionCompleted = true;
            if (this.___HtmlBuilder == null)
            {
                this.___HtmlBuilder = new System.Text.StringBuilder();
            }
            this.___HtmlBuilder.Append(html);
            this.___ContentLength = this.___HtmlBuilder.Length;
            ___parseDocument();
        }
		internal void ___parseDocument() 
		{
            
            this.___isParseDocumentEntered = true;
            CHtmlParseModeType ___ParseMode = CHtmlParseModeType.None;
			this.___parseStartTime = DateTime.Now;
            this.___responseStartTime = DateTime.Now;
			CHtmlStopWatch __ParseStopWatch = null;
           
			try
			{

                switch (this.___documentDomType)
				{
					case CHtmlDomModeType.HTMLDOM:
                    case CHtmlDomModeType.HTMLDOM_NoGUI:
                        if (this.___IsMultiversalDocument == true)
                        {
                            
                            // ===================================================================
                            // Multiversal Document Does not use ScriptHost
                            // it uses MultiversalWindow to process Scripts now.
                            // ===================================================================
                            // Mutilversal does not use document.___frames
                            // use document.___framesMultiversal
                            this.___frames = null;
                            this.setDocumentIntoMultiversalWindow();
                        }
						break;
					
					case CHtmlDomModeType.HTMLSegment:
					case CHtmlDomModeType.XMLDOM:
					{
						
						break;
					}
                    case CHtmlDomModeType.SVGDOM:
                        this.___IsHtmlBodyTagPassed = true;
                        break;
				}
				


                if (this == null || this.___Disposing )
				{
					goto ___parseDocumentCleanUp;
				}
				___IsHtmlParseCompleted = false;
                if (string.Equals(this.___locationBase.href, this.___URL, StringComparison.Ordinal) == false)
                {
                    this.___locationBase.href = this.___URL;
                }
                if (string.Equals(this.___locationBase.href , this.___URL,StringComparison.Ordinal) == false)
                {
                    // ---------------------------------------------------------------------------
                    // proper url may be "http://www.w3c.org" => "http://www.w3c.org/"
                    // ---------------------------------------------------------------------------
                    this.___URL = string.Copy(this.___locationBase.href);
                }
                if (this.___MultiversalWindow != null)
                {
                    if (object.ReferenceEquals(this, this.___MultiversalWindow.___document) == false)
                    {
                        this.___MultiversalWindow.___document = this;
                    }
                    if (this.___MultiversalWindow.___locationBase != null)
                    {
                        this.___MultiversalWindow.___locationBase.copyFromLocationBase(this.___locationBase);
                    }
                    if (this.___frames != null)
                    {
                        this.___frames = null;
                    }
                }

				this.___locationBase.ownerElement = this;

				//this.locationBase.AnalyzeLocation();

             
                if (this.___locationBase.href.Length > 0)
                {
                    string __lookupShortName = "";
                   __lookupShortName =  this.___locationBase.href.Substring(0, this.___locationBase.href.Length - 3);
                    int ___lSlashPos = __lookupShortName.LastIndexOf('/');
                    if (___lSlashPos == -1)
                    {
                        ___lSlashPos = __lookupShortName.LastIndexOf('\\');
                    }
                    else if (___lSlashPos == -1)
                    {
                        ___lSlashPos = __lookupShortName.LastIndexOf('?');
                    }
                    if (___lSlashPos > -1 && ___lSlashPos < this.___locationBase.href.Length - 1)
                    {
                        this.___UrlShortName = this.___locationBase.href.Substring(___lSlashPos);
                    }
                    else
                    {
                        this.___UrlShortName = string.Copy(this.___locationBase.href);
                    }
                }
                if (this.___UrlShortName == null)
                {
                    this.___UrlShortName = "";
                }
                if (string.IsNullOrEmpty(this.___URL) == true)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
                    {
                        commonLog.LogEntry("Strange. Document.___URL is no assigned");
                    }
                }







				if(this.___IsDomModeFullParseMode())
				{
					this.___HtmlGraphics = this.___createGraphicContainer();
                    if (this.___HtmlGraphics != null && this.___HtmlGraphics.Graphic != null)
                    {
                        goto GraphicCreationDone;
                    }else if( this.___HtmlGraphics == null)
					{
                        
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
						{
							commonLog.LogEntry("Unable to obtain Document.HtmlGrahpic with thread. Aborting...");
						}

						goto ___parseDocumentCleanUp;
                    }
                    else if (this.___HtmlGraphics.Graphic == null)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("Unable to obtain Document.HtmlGrahpic.Grahic with thread. Aborting...");
                        }
                    }
                    else
                    {
                        if (this.___HtmlGraphics.Graphic.SmoothingMode != System.Drawing.Drawing2D.SmoothingMode.HighSpeed)
                        {
                            this.___HtmlGraphics.Graphic.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighSpeed;
                        }
                        if (this.___HtmlGraphics.Graphic.TextRenderingHint != System.Drawing.Text.TextRenderingHint.SystemDefault)
                        {
                            this.___HtmlGraphics.Graphic.TextRenderingHint = System.Drawing.Text.TextRenderingHint.SystemDefault;
                        }



                    }

				}
				else
				{
					// XML or Segment is just create emptry container
					this.___HtmlGraphics = new GraphicCotainer();
				}
                GraphicCreationDone:
                if (this.___IsDomModeFullParseMode() == true)
                {
                    this.___localStorage = new CHtmlWebStorage(this.___locationBase.protocol, this.___locationBase.host, this.___locationBase.port, CHtmlWebStorageType.localStorage);
                    this.___sessionStorage = new CHtmlWebStorage(this.___locationBase.protocol, this.___locationBase.host, this.___locationBase.port, CHtmlWebStorageType.sessionStorage);
                }



                if (this.___IsMultiversalDocument == true)
                {
                    if (this.___MultiversalWindow != null)
                    {
                        int ___scriptProcessorCount = this.___MultiversalWindow.___getScriptProcessorCount();
                        if (___scriptProcessorCount > 0)
                        {
                            foreach (IMultiversalScope eachScope in this.___MultiversalWindow.___MultiversalScopeList.Values)
                            {
                                if (eachScope != null)
                                {
                                    if (eachScope.isInitCompleted() == false)
                                    {
                                        eachScope.initScriptEngine();
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        this.___NoProgressReport = true;
                    }
                }

				bool __IsNonInnerTextChar = false;
                if(__IsNonInnerTextChar== true){;}
                if (this.___IsDomModeFullParseMode() == true)
                {
                    this.___StyleQueue = new CHtmlCSSRuleMergeQueue();
                    this.___StyleQueue.___parentDocument = this;
                    this.___StyleQueue.ShortName = string.Copy(this.___UrlShortName);
                    this.___StyleQueue.MergeCompleted += OnCHtmlCSSRuleMergeQueueCompleted;
                }
			
			
				this.___curHTMLParsePosition = 0;
				char c_0 = new char();
		
				int __ElementStartPosition = 0;

	
				//string __curTagName = "";
				//string __curTagNameEnding = "";
			
				char c_b1 = new char();
				char c_b2 = new char();
				char c_b3 = new char();
						
				char c_a1 = new char();
				char c_a2 = new char();
				char c_a3 = new char();
				char c_a4 = new char();
                char c_a3Upper = new char();
                char c_a4Upper = new char();
		
	
				System.Text.StringBuilder _sbTagNameBuilder =null;
                System.Text.StringBuilder _sbTagNameCaseSensitiveBuilder = null;
				System.Text.StringBuilder _sbTagAttributesBuilder = null;
				System.Text.StringBuilder _sbCommentBuilder = null;
				System.Text.StringBuilder _sbInnerTextBuilder = null;
                System.Collections.Generic.SortedList<int, char> _sbInnerTextNBSPPointList = null;
	



				bool IsWithInAttributeQuote = false;
				string AttributeQuoteStartChar = "";
				if(_sbInnerTextBuilder == null){}
				if(this.___IsHtmlCharSetDetectionCompleted == false)
				{
					//this.ThreadParseCharSetDetectCompleteEvent.WaitOne(commonMCS.MCSGeneralFdr.HTTPGeneralReadWriteTimeout * 1000, false);
				}

                if(this.___HtmlBuilder != null && this.___HtmlBuilderLength != this.___HtmlBuilder.Length )
                {
                    this.___HtmlBuilderLength = this.___HtmlBuilder.Length;
                }
                this.___readyStateType = CHtmlReadytStateType.loading;
				int __WhileCount= 0;
				try
				{
					while(true)
					{
						__WhileCount++;
						if(this.___IsHtmlResponseCompleted == true && __WhileCount >= 100000)
						{
                            if (___curHTMLParsePosition == this.___HtmlBuilderLength)
							{
								if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
								{
									commonLog.LogEntry("___parseDocument Loop over 100000 abort");
								}
								this.X_DOM_ProcessorAdd("Loop Reached over 1000000, abort now");
								goto ___parseDocumentCleanUp;
							}
						}


						
						___PreviousParseStartPosition = ___curHTMLParsePosition;

						//this._curLine = "Obtaining HtmlBuilder Length";
                        
						/*
						if(this.CharIndexTagElementMatchingMatrix.Capacity != this.HtmlBuilder.Length)
						{
							this.CharIndexTagElementMatchingMatrix.Capacity = this.HtmlBuilder.Length;
						}
						*/
						int __bufferOrignalLength = this.___HtmlBuilderLength ;
						if(this.___IsHtmlResponseCompleted == false)
						{
                            if (this.___HtmlBuilderLength - ___HTMLBuilder_READ_SAFE_MARGIN > 0)
                            {
                                this.___HtmlBuilderLength = this.___HtmlBuilderLength - ___HTMLBuilder_READ_SAFE_MARGIN;
                            }
                            else
                            {
                                this.___HtmlBuilderLength = this.___HtmlBuilderLength;
                            }
						}

                        if (___curHTMLParsePosition < this.___HtmlBuilderLength)
						{
                            while (___curHTMLParsePosition < this.___HtmlBuilderLength)
							{

								c_b1 = '\0';
								c_b2 = '\0';
								c_b3 = '\0';
						
								c_a1 = '\0';
								c_a2 = '\0';
								c_a3 = '\0';

								//this._curLine = "Obtaining Html First Char";

                                c_0 = this.___HtmlBuilder[___curHTMLParsePosition];
								if(c_0 == '<' || c_0 == '>')
								{

                                    if (___curHTMLParsePosition < this.___HtmlBuilderLength  - 2)
									{
                                        c_a1 = this.___HtmlBuilder[___curHTMLParsePosition + 1];

                                        if (___curHTMLParsePosition < this.___HtmlBuilderLength - 3)
										{
                                            c_a2 = this.___HtmlBuilder[___curHTMLParsePosition + 2];
										}
                                        if (___curHTMLParsePosition < this.___HtmlBuilderLength - 4)
										{
                                            c_a3 = this.___HtmlBuilder[___curHTMLParsePosition + 3];
										}
                                        if (___curHTMLParsePosition < this.___HtmlBuilder.Length - 5)
										{
                                            c_a4 = this.___HtmlBuilder[___curHTMLParsePosition + 4];
										}
									}
									if(___curHTMLParsePosition > 0)
									{
                                        c_b1 = this.___HtmlBuilder[___curHTMLParsePosition - 1];
										if(___curHTMLParsePosition > 1)
										{
                                            c_b2 = this.___HtmlBuilder[___curHTMLParsePosition - 2];
										}
										if(___curHTMLParsePosition > 2)
										{
                                            c_b3 = this.___HtmlBuilder[___curHTMLParsePosition - 3];
										}
									}
								}
						
								//this._curLine = "SwitchByC0";
                                #region SwitchByC0
                                switch (c_0)
                                {
                                    case '<':
                                        if (___ParseMode == CHtmlParseModeType.TagAttribute)
                                        {
                                            if (IsWithInAttributeQuote == true)
                                            {
                                                if (_sbTagAttributesBuilder != null)
                                                {
                                                    _sbTagAttributesBuilder.Append(c_0);
                                                }
                                                goto NextChar;
                                            }
                                            else
                                            {
                                                int ___InvalidTagClosedPoint = ___PerformInvalidTagSkipWithinAttribute(___curHTMLParsePosition);
                                                if (___InvalidTagClosedPoint > -1)
                                                {
                                                    ___curHTMLParsePosition = ___InvalidTagClosedPoint;
                                                    goto NextChar;
                                                }
                                                else
                                                {
                                                    // Do Not Skip
                                                    //goto NextChar;
                                                }

                                            }
                                        }
                                        if (___ParseMode == CHtmlParseModeType.InnerText || ___ParseMode == CHtmlParseModeType.None)
                                        {
                                            if (c_a1 == '!')
                                            {
                                                if (c_a2 == '[')
                                                {
                                                    if (c_a3 == 'C')
                                                    {
                                                        if (c_a4 == 'D')
                                                        {
                                                            // Seems "<![CDATA[" Block
                                                            // Normal HTML Doc will ignore CDData section

                                                            int findPoint = GetStringPositionInHtmlBuilder("]]>", this.___curHTMLParsePosition);
                                                            if (findPoint > -1)
                                                            {
                                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 20)
                                                                {
                                                                    commonLog.LogEntry("<![CDATA[ Section found skip to {0}", findPoint + 2);
                                                                }
                                                                this.___curHTMLParsePosition = findPoint + 2;
                                                                goto NextChar;
                                                            }
                                                            // TODO: XML CDDATA SECTION Must be handed as Text 
                                                            //
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                        switch(___ParseMode)
                                        {
                                            case CHtmlParseModeType.None:
                                            case CHtmlParseModeType.TagAttribute:
                                            case CHtmlParseModeType.InnerText:
                                            case CHtmlParseModeType.TagName:


                                            if (c_a3 >= 'a' && c_a3 <= 'z')
                                            {
                                                c_a3Upper = commonHTML.FasterToUpper(c_a3);
                                            }
                                            else
                                            {
                                                c_a3Upper = c_a3;
                                            }
                                            if (c_a4 >= 'a' && c_a4 <= 'z')
                                            {
                                                c_a4Upper = commonHTML.FasterToUpper(c_a4);
                                            }
                                            else
                                            {
                                                c_a4Upper = c_a4;
                                            }
                                            if (c_a1 == '?')
                                            {
                                                if (this.___documentElement  != null)
                                                {
                                                    int findPoint = GetStringPositionInHtmlBuilder(">", this.___curHTMLParsePosition);
                                                    if (findPoint > -1)
                                                    {
                                                        this.___curHTMLParsePosition = findPoint;
                                                        goto NextChar;
                                                    }
                                                }
                                            }

                                            else if (c_a1 == '!' && c_a2 == '[' && c_a3Upper == 'E' && c_a4Upper == 'N')
                                            {
                                                if (this.___HtmlBuilderLength > this.___curHTMLParsePosition + 5 && (this.___HtmlBuilder[this.___curHTMLParsePosition + 5]) == 'D' || this.___HtmlBuilder[this.___curHTMLParsePosition + 5] == 'd')
                                                {

                                                    // CONDINATIONAL BLOCK END
                                                    // <![endif]>
                                                    int findPoint = GetStringPositionInHtmlBuilder(">", this.___curHTMLParsePosition);
                                                    if (findPoint > -1)
                                                    {
                                                        this.___curHTMLParsePosition = findPoint;
                                                        goto NextChar;
                                                    }
                                                }
                                            }
                                            // it is not comment but tag
                                            else if (IsTagStartChar(c_a1) && ((c_a1 == '!' && c_a2 == '-' && c_a3 == '-') == false))
                                            {
                                                // -----------------------------------------------------------------
                                                // <span>AAAAAAAAAAAAAAAAAAAA<p>aaaaaaaaaa<p>bbbbbbbbbbb</span>
                                                // ^                         ^            ^             ^     
                                                // (^) Document TextElement is created that points
                                                /// ----------------------------------------------------------------
                                                /*
                                                if(this.___currentParentElement != null)
                                                {
                                                    int TextRangeIndex = this.___currentParentElement.CreateTextRangeBasedUponAppendedChars(this.___curHTMLParsePosition);
												
												
                                                    if(this.___HtmlGraphics != null && TextRangeIndex > -1)
                                                    {
                                                        if(this.CHtmlDomMode == CHtmlDomModeType.HTMLDOM)
                                                        {
                                                            CHtmlElement textElement = this.___currentParentElement.childNodes[TextRangeIndex] as CHtmlElement;
                                                            if(textElement.___elementTagType == CHtmlElementType._ITEXT)
                                                            {

                                                                this.___calculateTextElementBounds(textElement, null);

                                                            }
                                                            else
                                                            {
                                                                if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                                {
                                                                    commonLog.LogEntry("BUGBUGTEXT");
                                                                }
                                                                this.___calculateElementBounds(textElement);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    { 
                                                        // -----------------------------------------------------------
                                                        // It is Non-Text Tag (May be)
                                                        // ex. input, img, embed etc
                                                        // Note element like img does not hit here
                                                        // ------------------------------------------------------------
                                                        // commonLog.LogEntry("Inline Non Text Tag : {0} {1}",  this.___currentParentElement,__priorCreatedTextElement );	
                                                    }
                                                }
                                                */
                                                ___ParseMode = CHtmlParseModeType.TagName;
                                                _sbTagNameBuilder = new System.Text.StringBuilder(commonHTML.StringBuilder_BUFFER_Size_For_CSS_Tag);
                                                _sbTagNameCaseSensitiveBuilder = new System.Text.StringBuilder(commonHTML.StringBuilder_BUFFER_Size_For_CSS_Tag);
                                                __ElementStartPosition = this.___curHTMLParsePosition;
                                                _sbTagAttributesBuilder = null;
                                            }
                                            else if ((c_a1 == '!' && c_a2 == '-' && c_a3 == '-'))
                                            {
                                                // Check If May be [IF Block]
                                                bool __IsInnerTagShouldBeParse = IsConditionalTagValid("", this.___curHTMLParsePosition + 2);
                                                if (__IsInnerTagShouldBeParse == false)
                                                {
                                                    /* Comment Block */
                                                    ___ParseMode = CHtmlParseModeType.Comment;

                                                    _sbCommentBuilder = new System.Text.StringBuilder(commonHTML.StringBuilder_BUFFER_Size_For_CSS_Tag);
                                                    __ElementStartPosition = this.___curHTMLParsePosition;
                                                }
                                                else
                                                {
                                                    int nextTagPos = this.GetStringPositionInHtmlBuilder(">", this.___curHTMLParsePosition + 2);
                                                    if (nextTagPos > -1)
                                                    {
                                                        this.___curHTMLParsePosition = nextTagPos;
                                                        goto NextChar;
                                                    }

                                                }

                                            }
                                                break;
                                            case CHtmlParseModeType.Comment:
                                                char c_b2Low = c_b2;
                                                char c_b3Low = c_b3;
                                                if (c_b2Low >= 'A' && c_b2Low <= 'Z')
                                                {
                                                    c_b2Low = commonHTML.FasterToLower(c_b2Low);
                                                }
                                                if (c_b3Low >= 'A' && c_b3Low <= 'Z')
                                                {
                                                    c_b3Low = commonHTML.FasterToLower(c_b3Low);
                                                }

                                                if (c_b1 == ']' && c_b2Low == 'f' && c_b3Low == 'i')
                                                {
                                                    ___ParseMode = CHtmlParseModeType.None;
                                                    _sbCommentBuilder = null;
                                                    goto NextChar;
                                                }
                                                else
                                                {
                                                    _sbCommentBuilder.Append(c_0);
                                                    goto NextChar;
                                                }
                                                

                                        }
                                        break;
                                    case '>':
                                        if (___ParseMode == CHtmlParseModeType.TagAttribute)
                                        {
                                            if (IsWithInAttributeQuote == true)
                                            {
                                                bool IsSbTagAttributesBuilderContainsTagStartSign = false;
                                                int _sbTagAttributesBuilderLen = _sbTagAttributesBuilder.Length;
                                                for (int attrPos = 0; attrPos < _sbTagAttributesBuilderLen; attrPos++)
                                                {
                                                    if (_sbTagAttributesBuilder[attrPos] == '<')
                                                    {
                                                        IsSbTagAttributesBuilderContainsTagStartSign = true;
                                                        break;
                                                    }
                                                }
                                                if (IsSbTagAttributesBuilderContainsTagStartSign == true)
                                                {
                                                    if (_sbTagAttributesBuilder != null)
                                                    {
                                                        _sbTagAttributesBuilder.Append(c_0);
                                                        _sbTagAttributesBuilderLen = _sbTagAttributesBuilder.Length;
                                                    }
                                                    goto NextChar;
                                                }

                                                // ---------------------------------------------------------------------
                                                // It is may be Single Quoted Attirbutes 
                                                // <meta name="twitter:description" content=""Going forward, it's a mobile-first, 
                                                // cloud-first world," said Satya Nadella, the newly appointed CEO of Microsoft 
                                                // (MSFT), last week. Nadella who was just announced as CEO on February 4th has
                                                // been working for Microsoft since 1992. Inheriting this position now is
                                                // remarkably different than when Ballmer took over in 2000. At the turn of
                                                // the century Amazon (">
                                                // ---------------------------------------------------------------------
                                                if (_sbTagAttributesBuilder != null &&    _sbTagAttributesBuilderLen != 0)
                                                {
                                                    if (_sbTagAttributesBuilder[   _sbTagAttributesBuilderLen - 1] == '/')
                                                    {
                                                        goto NormalLessThanSignCheck;
                                                    }
                                                    for (int attrEndPos =    _sbTagAttributesBuilderLen - 1; attrEndPos >= 0; attrEndPos--)
                                                    {
                                                        char lastChar = _sbTagAttributesBuilder[attrEndPos];
                                                        if (commonHTML.FasterIsWhiteSpaceLimited(lastChar))
                                                        {
                                                            continue;
                                                        }
                                                        else
                                                        {
                                                            if (lastChar == '\'' || lastChar == '\"')
                                                            {
                                                                // it seems be there is other tag is appearing next. it should be end quote
                                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 20)
                                                                {
                                                                    commonLog.LogEntry("Attributes character at {0} in quote but will timerminated due to just before character was ({1})", ___curHTMLParsePosition, lastChar);
                                                                }
                                                                IsWithInAttributeQuote = false;
                                                                AttributeQuoteStartChar = "";
                                                                goto NormalLessThanSignCheck;
                                                            }
                                                            if (char.IsLetterOrDigit(lastChar))
                                                            {
                                                                goto LookupByNextTagSection;
                                                            }
                                                        }
                                                    }
                                                }
                                            LookupByNextTagSection:
                                                for (int __CharNext = ___curHTMLParsePosition + 1; __CharNext < this.___HtmlBuilderLength ; __CharNext++)
                                                {
                                                    char __CharN = this.___HtmlBuilder[__CharNext];
                                                    if (commonHTML.FasterIsWhiteSpaceLimited(__CharN))
                                                    {
                                                        continue;
                                                    }

                                                    if (char.IsLetterOrDigit(__CharN))
                                                    {
                                                        break;
                                                    }
                                                    if (__CharN == '<')
                                                    {
                                                        // it seems be there is other tag is appearing next. it should be end quote
                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 20)
                                                        {
                                                            commonLog.LogEntry("Attributes character at {0} in quote but will timerminated due to {1}", ___curHTMLParsePosition, __CharN);
                                                        }
                                                        IsWithInAttributeQuote = false;
                                                        AttributeQuoteStartChar = "";
                                                        goto NormalLessThanSignCheck;
                                                    }

                                                }
                                                if (_sbTagAttributesBuilder != null)
                                                {
                                                    _sbTagAttributesBuilder.Append(c_0);
                                                    _sbTagAttributesBuilderLen = _sbTagAttributesBuilder.Length;
                                                }
                                                goto NextChar;
                                            }
                                        }
                                    NormalLessThanSignCheck:
                                        switch (___ParseMode)
                                        {
                                            case CHtmlParseModeType.Comment:
                                                {
                                                    if (c_b1 == '-' && c_b2 == '-')
                                                    {
                                                        //commonLog.LogEntry("Comment : {0} ",_sbCommentBuilder);
                                                        ___ParseMode = CHtmlParseModeType.None;
                                                        _sbCommentBuilder = null;
                                                        goto NextChar;
                                                    }
                                                    else
                                                    {
                                                        // To remove ie special conditina comment like
                                                        // ----------------------------------------------------------------------------------
                                                        // "WII.<![if lt IE 6.0000]> ...Rommney <![endif]>Rice hates us!"
                                                        // ----------------------------------------------------------------------------------
                                                        char c_b2Low = c_b2;
                                                        char c_b3Low = c_b3;
                                                        if(c_b1 == '!' && c_b2 == '-' && c_b3 == '-')
                                                        {
                                                            // ============================================
                                                            // Some site uses <!-- <a><h1></h1></a> --!> as comment
                                                            // like. innovationexcellence.com
                                                            // we must treat as comment as of 2016/10/19
                                                            // =============================================
                                                            ___ParseMode = CHtmlParseModeType.None;
                                                            _sbCommentBuilder = null;
                                                            goto NextChar;
                                                        }
                                                        if (c_b2Low >= 'A' && c_b2Low <= 'Z')
                                                        {
                                                            c_b2Low = commonHTML.FasterToLower(c_b2Low);
                                                        }
                                                        if (c_b3Low >= 'A' && c_b3Low <= 'Z')
                                                        {
                                                            c_b3Low = commonHTML.FasterToLower(c_b3Low);
                                                        }
                                                        if (c_b1 == ']' && c_b2Low == 'f' && c_b3Low == 'i')
                                                        {
                                                            ___ParseMode = CHtmlParseModeType.None;
                                                            _sbCommentBuilder = null;
                                                            goto NextChar;
                                                        }
                                                        else
                                                        {
                                                            _sbCommentBuilder.Append(c_0);
                                                            goto NextChar;
                                                        }
                                                        
                                                    }
                                                }
                                            case CHtmlParseModeType.TagName:
                                            case CHtmlParseModeType.TagAttribute:
                                                if (_sbTagNameBuilder == null)
                                                {
                                                    ___ParseMode = CHtmlParseModeType.None;
                                                    _sbCommentBuilder = null;
                                                    goto NextChar;
                                                }
                                                if (_sbTagNameBuilder[0] == '/')
                                                {

                                                    _sbTagNameBuilder.Remove(0, 1);
                                                    _sbTagNameCaseSensitiveBuilder.Remove(0, 1);
                                                    string __closingTagName = _sbTagNameBuilder.ToString();
                                                    bool __IsBypassClose = false;


    


                                                    #region SlashClose

                                                    // Means the document already contains tag name at parent node

                                                    if (!__IsBypassClose)
                                                    {
                                                        if (_sbInnerTextBuilder != null)
                                                        {
                                                            if (this.___tagSkipMode == CHtmlTagReadSkipModeType.none)
                                                            {
                                                                this.___CreateTextNodeElement(___currentParentElement, _sbInnerTextBuilder, -1, ___curHTMLParsePosition, _sbInnerTextNBSPPointList);
                                                            }
                                                        }
                                                        _sbInnerTextBuilder = null;
                                                        _sbInnerTextNBSPPointList = null;
                                                        if (this.___tagSkipMode == CHtmlTagReadSkipModeType.none)
                                                        {
                                                            this.___closeElementWithTagString(__closingTagName, ___curHTMLParsePosition - _sbTagNameBuilder.Length - 2, ___curHTMLParsePosition, true, null);
                                                        }
                                                        else
                                                        {
                                                            switch (__closingTagName)
                                                            {
                                                                case "BODY":
                                                                case "HEAD":
                                                                case "HTML":
                                                                    int skipTagCount = this.___skipTagStack.Count;
                                                                    if (skipTagCount == 0)
                                                                    {
                                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                                                        {

                                                                            commonLog.LogEntry("BUGUBUG!!!! ___parseDocument() skiped tags \"{0}\" but top tags does not exist", __closingTagName);
                                                                        }
                                                                        this.___closeElementWithTagString(__closingTagName, ___curHTMLParsePosition - _sbTagNameBuilder.Length - 2, ___curHTMLParsePosition, true, null);
                                                                        this.___skipTagStack.Clear();
                                                                        this.___tagSkipMode = CHtmlTagReadSkipModeType.none;
                                                                        ___ParseMode = CHtmlParseModeType.None;
                                                                        _sbTagNameBuilder = null;
                                                                        _sbTagAttributesBuilder = null;
                                                                        _sbTagNameCaseSensitiveBuilder = null;
                                                                        goto NextChar;
                                                                    }else if (skipTagCount == 1 && string.Equals(__closingTagName, this.___skipTagStack[0], StringComparison.Ordinal) == true)
                                                                    {
                                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                                                        {
                                                                            commonLog.LogEntry("___parseDocument() skiped tags \"{0}\" until position for  {1}", __closingTagName, ___curHTMLParsePosition);
                                                                        }
                                                                        this.___skipTagStack.Clear();
                                                                        this.___tagSkipMode = CHtmlTagReadSkipModeType.none;
                                                                        ___ParseMode = CHtmlParseModeType.None;
                                                                        _sbTagNameBuilder = null;
                                                                        _sbTagAttributesBuilder = null;
                                                                        _sbTagNameCaseSensitiveBuilder = null;
                                                                        goto NextChar;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                                                        {
                                                                            if (skipTagCount == 1)
                                                                            {
                                                                                commonLog.LogEntry("BUGUBUG!!!! ___parseDocument() skiped tags \"{0}\" but top tags does not match {1}", __closingTagName, this.___skipTagStack[0]);
                                                                            }
                                                                        }
                                                                        
                                                                        System.Collections.Generic.List<int> ___removeList = new System.Collections.Generic.List<int>();
                                                                        for (int spos = skipTagCount - 1; spos >= 0; spos--)
                                                                        {
                                                                            string strInStack = this.___skipTagStack[spos];
                                                                            if (string.IsNullOrEmpty(strInStack) == false)
                                                                            {
                                                                                if (string.Equals(strInStack, __closingTagName, StringComparison.Ordinal) == true)
                                                                                {
                                                                                    this.___skipTagStack.RemoveAt(spos);
                                                                                    if (___removeList.Count > 0)
                                                                                    {
                                                                                        foreach (int removePos in ___removeList)
                                                                                        {
                                                                                            this.___skipTagStack.RemoveAt(removePos);
                                                                                        }
                                                                                    }
                                                                                    ___removeList.Clear();
                                                                                    break;
                                                                                }
                                                                                else
                                                                                {
                                                                                    ___removeList.Add(spos);
                                                                                    continue;
                                                                                }
                                                                            }
                                                                        }

                                                                    }
                                                                    break;
                                                            }
                                                            ___ParseMode = CHtmlParseModeType.None;
                                                            _sbTagNameBuilder = null;
                                                            _sbTagAttributesBuilder = null;
                                                            _sbTagNameCaseSensitiveBuilder = null;
                                                            goto NextChar;
                                                        }
                                                    }
                                                    if (___DocumentWriteBuilder != null)
                                                    {
                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 50)
                                                        {
                                                            commonLog.LogEntry("calling MergeDocumentWriteBuilder({0}) with {1} char string", this.___curHTMLParsePosition.ToString(), ___DocumentWriteBuilder.Length);
                                                        }
                                                        try
                                                        {
                                                            this.MergeDocumentWriteBuilder(this.___curHTMLParsePosition);
                                                            this.___HtmlBuilderLength = this.___HtmlBuilder.Length;
                                                        }
                                                        catch { }
                                                    }


                                                    #endregion

                                                }
                                                else
                                                {
                                                    if (_sbTagNameBuilder.Length >= 3 && _sbTagNameBuilder[0] == '!')
                                                    {
                                                        //![IF
                                                        bool IsMayBeCommentSection = false;
                                                        if (_sbTagNameBuilder[1] != 'D')
                                                        {
                                                            if (_sbTagNameBuilder[1] == 'I' && _sbTagNameBuilder[2] == 'F')
                                                            {
                                                                IsMayBeCommentSection = true;
                                                            }
                                                            else if (_sbTagNameBuilder[1] == '[' && _sbTagNameBuilder[2] == 'I' && _sbTagNameBuilder[3] == 'F')
                                                            {
                                                                IsMayBeCommentSection = true;
                                                            }
                                                            if (IsMayBeCommentSection == true)
                                                            {
                                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 100)
                                                                {
                                                                    commonLog.LogEntry("Conditional Comment is found. {0} is found skip to next...", _sbTagNameBuilder.ToString());
                                                                }
                                                                goto ContinueToNextCharacter;
                                                            }
                                                        }

                                                    }

                                                
                                                    bool __ImmediateClose = false;


                                                    if (_sbTagAttributesBuilder != null)
                                                    {
                                                        int _sbTagAttributesBuilderLen = _sbTagAttributesBuilder.Length;
                                                        //_sbTagAttributesBuilder = _sbTagAttributesBuilder.Replace('\n', ' ');
                                                        //_sbTagAttributesBuilder = _sbTagAttributesBuilder.Replace('\r', ' ');
                                                        /* <!-- COMMENT OUT  
                                                         * This process should have done at Append() Time.
                                                        _sbTagAttributesBuilder.Replace('\n', ' ');
                                                        _sbTagAttributesBuilder.Replace('\r', ' ');
                                                        _sbTagAttributesBuilder.Replace('\t', ' ');
                                                            -->*/
                                                        if (   _sbTagAttributesBuilderLen > 0 && (commonHTML.FasterIsWhiteSpaceLimited(_sbTagAttributesBuilder[0]) || commonHTML.FasterIsWhiteSpaceLimited(_sbTagAttributesBuilder[   _sbTagAttributesBuilderLen - 1])))
                                                        {
                                                            _sbTagAttributesBuilder.ToString().Trim();
                                                        }
                                                        _sbTagAttributesBuilderLen = _sbTagAttributesBuilder.Length;
                                         
                                                            
                                                        

                                                        if (    _sbTagAttributesBuilderLen > 0 &&  _sbTagAttributesBuilder[   _sbTagAttributesBuilderLen - 1] == '/')
                                                        {
                                                            int __lastAttributesEqual = _sbTagAttributesBuilder.ToString().LastIndexOf('=');
                                                            if (__lastAttributesEqual > -1)
                                                            {
                                                                try
                                                                {
                                                                    // okay attributes is contains "=". 
                                                                    // 
                                                                    // Case 1) Last char is Quote Sign
                                                                    // <a href="afdasfdafdafdsa"/>

                                                                    bool ___LastCharIsAlphabet = false;
                                                                    for (int cAttributesEnd =     _sbTagAttributesBuilderLen - 2; cAttributesEnd >= 0; cAttributesEnd--)
                                                                    {
                                                                        char curAttrEndChar =  _sbTagAttributesBuilder[cAttributesEnd];
                                                                        if (commonHTML.FasterIsWhiteSpaceLimited(curAttrEndChar))
                                                                        {
                                                                            continue;
                                                                        }
                                                                        else if (curAttrEndChar == '\'' || curAttrEndChar == '\"')
                                                                        {

                                                                            __ImmediateClose = true;
                                                                            break;

                                                                        }
                                                                        else
                                                                        {
                                                                            ___LastCharIsAlphabet = true;
                                                                            break;
                                                                        }
                                                                    }
                                                                    if (___LastCharIsAlphabet == true)
                                                                    {
                                                                        // okay attributes is may be alphabet chars
                                                                        // may be it is url or href string
                                                                        // href=http://test/ => href="http://test/"
                                                                        string strLastAfterEqual =  _sbTagAttributesBuilder.ToString(__lastAttributesEqual + 1,     _sbTagAttributesBuilderLen - (__lastAttributesEqual + 1));
                                                                        bool IsstrLastAfterEqualContainsWhiteSpace = false;
                                                                        for (int i = 0; i < strLastAfterEqual.Length; i++)
                                                                        {
                                                                            if (commonHTML.FasterIsWhiteSpaceLimited(strLastAfterEqual[i]) == true)
                                                                            {
                                                                                IsstrLastAfterEqualContainsWhiteSpace = true;
                                                                                break;
                                                                            }
                                                                        }
                                                                        if (IsstrLastAfterEqualContainsWhiteSpace == false)
                                                                        {
 
                                                                            _sbTagAttributesBuilder.Remove(   _sbTagAttributesBuilderLen -1, 1);
                                                                            _sbTagAttributesBuilder.Append('\'');
                                                                            _sbTagAttributesBuilderLen = _sbTagAttributesBuilder.Length;
                                                                        }
                                                                        else
                                                                        {
                                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                                            {
                                                                                commonLog.LogEntry("Slash EndAttributes Check could not handle properly, treat it as no tag end. : " + _sbTagAttributesBuilder.ToString());
                                                                            }
                                                                        }

                                                                        goto LastSlashCheckDone;
                                                                    }
                                                                }
                                                                catch (Exception ex)
                                                                {
                                                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 50)
                                                                    {
                                                                        commonLog.LogEntry("Slash EndAttributes Check Error : ", ex);
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                // No Equal is immidiate close.
                                                                __ImmediateClose = true;
                                                            }
                                                            if (__ImmediateClose == true)
                                                            {
                                                                if (_sbTagNameBuilder.Length > 0 && _sbTagNameBuilder[_sbTagNameBuilder.Length - 1] == '/')
                                                                {
                                                                    _sbTagNameBuilder.Remove(_sbTagNameBuilder.Length - 1, 1);
                                                                    _sbTagNameCaseSensitiveBuilder.Remove(_sbTagNameCaseSensitiveBuilder.Length - 1, 1);
                                                                    __ImmediateClose = true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                LastSlashCheckDone:

                                                    if (_sbTagNameBuilder.Length > 0 && _sbTagNameBuilder[_sbTagNameBuilder.Length - 1] == '/')
                                                    {
                                                        __ImmediateClose = true;
                                                        _sbTagNameBuilder.Remove(_sbTagNameBuilder.Length - 1, 1);
                                                        _sbTagNameCaseSensitiveBuilder.Remove(_sbTagNameCaseSensitiveBuilder.Length - 1, 1);
                                                    }
                                                    string ___tagNameTemp = _sbTagNameBuilder.ToString();
                                                    if (this.___tagSkipMode != CHtmlTagReadSkipModeType.none)
                                                    {
                                                        switch (___tagNameTemp)
                                                        {
                                                            case "BODY":
                                                            case "HEAD":
                                                            case "HTML":
                                                                ___skipTagStack.Add(___tagNameTemp);
                                                                break;
                                                        }
                                                        ___ParseMode = CHtmlParseModeType.None;
                                                        _sbTagNameBuilder = null;
                                                        _sbTagAttributesBuilder = null;
                                                        _sbTagNameCaseSensitiveBuilder = null;
                                                        goto NextChar;
                                                    }

                                               
                                                    if (_sbInnerTextBuilder != null && ___currentParentElement != null)
                                                    {
                                                        this.___CreateTextNodeElement(this.___currentParentElement, _sbInnerTextBuilder, -1, ___curHTMLParsePosition,_sbInnerTextNBSPPointList);
                                                        _sbInnerTextBuilder = null;
                                                        _sbInnerTextNBSPPointList = null;
                                                    }
                                                    bool ___skipAddToParentElement = false;

                                                    CHtmlElement tagElement = null;
                                                    if (___tagNameTemp.Length != 0 && ___tagNameTemp[0] == '!' && string.Equals(___tagNameTemp, "!DOCTYPE", StringComparison.Ordinal) == true)
                                                    {
                                                        tagElement = new CHtmlDTD();
                                                    }
                                                    else if (this.___IsDomModeXMLLikeStyleMode() == false)
                                                    {
                                                        if (___tagNameTemp.Length == 4 && (string.Equals(___tagNameTemp, "BODY",StringComparison.Ordinal) == true || string.Equals(___tagNameTemp, "HEAD",StringComparison.Ordinal) == true))
                                                        {
                                                            if (this.___body == null && string.Equals(___tagNameTemp, "BODY", StringComparison.Ordinal) == true)
                                                            {
                                                                if (this.___bodyDummyElement != null)
                                                                {
                                                                    tagElement = this.___bodyDummyElement;
                                                                    this.___bodyDummyElement = null;
                                                                    if ( tagElement.___ChildNodeIndex != -1)
                                                                    {
                                                                        ___skipAddToParentElement = true;
                                                                        this.___currentParentElement = tagElement;

                                                                    }
                                                                    goto ElementExistsFound;
                                                                }
                                                                else
                                                                {
                                                                    int allElementCount =this.___childNodes.Count; 
                                                                    for (int i = 0; i < allElementCount; i++)
                                                                    {
                                                                        CHtmlElement __checkElement = this.___childNodes[i] as CHtmlElement;
                                                                        if (__checkElement != null)
                                                                        {
                                                                            if (__checkElement.___elementTagType == CHtmlElementType.BODY &&  string.Equals(___tagNameTemp, "BODY", StringComparison.Ordinal) == true)
                                                                            {
                             
                                                                                
                                                                                
                                                                                    tagElement = __checkElement;
                                                                                    if (tagElement.___ChildNodeIndex != -1)
                                                                                    {
                                                                                        ___skipAddToParentElement = true;
                                                                                        this.___currentParentElement = tagElement;

                                                                                    }
                                                                                    goto ElementExistsFound;
                                                                                
                                                                            }
                                                                            else if (__checkElement.___elementTagType == CHtmlElementType.HEAD && string.Equals(___tagNameTemp, "HEAD", StringComparison.Ordinal) == true)
                                                                            {
                                
                                                                                    tagElement = __checkElement;
                                                                                    if (tagElement.___ChildNodeIndex != -1)
                                                                                    {
                                                                                        ___skipAddToParentElement = true;
                                                                                        this.___currentParentElement = tagElement;

                                                                                    }
                                                                                    goto ElementExistsFound;
                                                                                

                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                if (this.___body != null && this.___body.___IsDynamicElement == true)
                                                                {
                                                                    if (this.___body.___parent.___elementTagType == CHtmlElementType.HTML)
                                                                    {
                                                                        if (this.___body.___parent != null)
                                                                        {
                                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                                                            {
                                                                                commonLog.LogEntry("Found Dynamic Body Tag in {0}", ___tagNameTemp, this.___curHTMLParsePosition);
                                                                            }

                                                                            tagElement = this.___body;
    
                                                                                ___skipAddToParentElement = true;
                                                                                this.___currentParentElement = tagElement;

                                                                            

                                                                            goto ElementExistsFound;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            if (string.Equals(___tagNameTemp, "HEAD",StringComparison.Ordinal) == true)
                                                            {
                                                                if (this.___headDummyElement != null)
                                                                {

                                                                    tagElement = this.___headDummyElement;
                                                                    this.___headDummyElement = null;
                                                                }
                                                                if (this.___head != null)
                                                                {
                                                                    tagElement = this.___head;

                                                                }
                                                            }
                                                            if (tagElement == null)
                                                            {
                                                                tagElement = createCHtmlElementWithDomType(___tagNameTemp, this.___documentDomType, null);
                                                            }
                                                        }

                                                    }
                                                    if (tagElement == null)
                                                    {
                                                        if (___tagNameTemp.Length == 4)
                                                        {
                                                            if (string.Equals(___tagNameTemp, "HTML", StringComparison.Ordinal) == true)
                                                            {
                                                                if (this.___is1stHtmlTagFound == false)
                                                                {
                                                                    this.___is1stHtmlTagFound = true;
                                                                }
                                                                else
                                                                {
                                                                    if (((this.___tagSkipMode & CHtmlTagReadSkipModeType.skip_html) == CHtmlTagReadSkipModeType.skip_html) == false)
                                                                    {
                                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                                                        {
                                                                            commonLog.LogEntry("Found Strange Tag {0}. Start Skip to end...", ___tagNameTemp);
                                                                        }
                                                                        this.___skipTagStack.Add(___tagNameTemp);
                                                                        this.___tagSkipMode =    this.___tagSkipMode | CHtmlTagReadSkipModeType.skip_html;
                                                                        ___ParseMode = CHtmlParseModeType.None;
                                                                        _sbTagNameBuilder = null;
                                                                        _sbTagAttributesBuilder = null;
                                                                        _sbTagNameCaseSensitiveBuilder = null;
                                                                        goto NextChar;
                                                                    }
                                                                }
                                                            }
                                                            else if (string.Equals(___tagNameTemp, "BODY",StringComparison.Ordinal) == true)
                                                            {
                                                                if (this.___is1stBodyTagFound == false)
                                                                {
                                                                    this.___is1stBodyTagFound = true;
                                                                }
                                                                else
                                                                {
                                                                    if (((this.___tagSkipMode & CHtmlTagReadSkipModeType.skip_body) == CHtmlTagReadSkipModeType.skip_body) == false)
                                                                    {
                                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                                                        {
                                                                            commonLog.LogEntry("Found Strange Tag {0}. Start Skip to end...", ___tagNameTemp);
                                                                        }
                                                                        this.___skipTagStack.Add(___tagNameTemp);
                                                                        this.___tagSkipMode = this.___tagSkipMode | CHtmlTagReadSkipModeType.skip_body;
                                                                        ___ParseMode = CHtmlParseModeType.None;
                                                                        _sbTagNameBuilder = null;
                                                                        _sbTagAttributesBuilder = null;
                                                                        _sbTagNameCaseSensitiveBuilder = null;
                                                                        goto NextChar;
                                                                    }
                                                                }
                                                            }
                                                            else if (string.Equals(___tagNameTemp, "HEAD", StringComparison.Ordinal) == true)
                                                            {
                                                                if (this.___is1stHeadTagFound  == false)
                                                                {
                                                                    this.___is1stHeadTagFound = true;
                                                                }
                                                                else
                                                                {
                                                                    if (((this.___tagSkipMode & CHtmlTagReadSkipModeType.skip_head) == CHtmlTagReadSkipModeType.skip_head) == false)
                                                                    {
                                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                                                        {
                                                                            commonLog.LogEntry("Found Strange Tag {0}. Start Skip to end...", ___tagNameTemp);
                                                                        }
                                                                        this.___tagSkipMode = this.___tagSkipMode | CHtmlTagReadSkipModeType.skip_head;
                                                                        this.___skipTagStack.Add(___tagNameTemp);
                                                                        ___ParseMode = CHtmlParseModeType.None;
                                                                        _sbTagNameBuilder = null;
                                                                        _sbTagAttributesBuilder = null;
                                                                        _sbTagNameCaseSensitiveBuilder = null;
                                                                        goto NextChar;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        tagElement = createCHtmlElementWithDomType(___tagNameTemp, this.___documentDomType, this.___currentParentElement);
                                                    }
                                                ElementExistsFound:

              
                                                tagElement.___ElementVersion = CHtmlVersionType.Version3;
                                                tagElement.___documentWeakRef = new WeakReference(this, false);
                                                    tagElement.tagName = ___tagNameTemp;
                                                    if(tagElement.___elementTagType != CHtmlElementType._ITEXT)
                                                    {
                                                        this.___documentElementTotalCount++;
                                                    }
                                                    if (tagElement.___prototypeWeakReference == null)
                                                    {
                                                        if (this.___MultiversalWindow != null)
                                                        {
                                                            this.___MultiversalWindow.___assignElementPrototype(tagElement);
                                                        }
                                                    }
                                                    if (this.___HTMLTagRemUnitSize != -1)
                                                    {
                                                        // =============================
                                                        // Copy RemSize to each Object is value is positive.
                                                        // ==============================
                                                        tagElement.___HTMLTagRemUnitSize = this.___HTMLTagRemUnitSize;
                                                        if (tagElement.___style != null)
                                                        {
                                                            tagElement.___style.___HTMLTagRemUnitSize = this.___HTMLTagRemUnitSize;
                                                        }
                                                        if (tagElement.___styleHover != null)
                                                        {
                                                            tagElement.___styleHover.___HTMLTagRemUnitSize = this.___HTMLTagRemUnitSize;
                                                        }
                                                        if (tagElement.___styleActive != null)
                                                        {
                                                            tagElement.___styleActive.___HTMLTagRemUnitSize = this.___HTMLTagRemUnitSize;
                                                        }
                                                    }
                                                    if (this.___IsDomModeXMLLikeStyleMode() == false)
                                                    {
                                                        if (tagElement.___elementTagType == CHtmlElementType.UNKNOWN)
                                                        {
                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                            {
                                                                commonLog.LogEntry("UNKOWN TAG <{0}> in {1}", ___tagNameTemp, this.___curHTMLParsePosition);
                                                            }
                                                        }
                                                    }

                                                    if (tagElement.___elementTagType != CHtmlElementType.IFRAME && tagElement.___elementTagType != CHtmlElementType.FRAME)
                                                    {
                                                        if (this.___locationBase != null)
                                                        {
                                                            tagElement.___locationBase.href = string.Copy(this.___locationBase.href);
                                                        }
                                                        else
                                                        {
                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                                            {
                                                                commonLog.LogEntry("BUGUBUG Document.___locatonBase has set to null, but recreate for now...");
                                                            }
                                                            this.___locationBase = this.RecreateLocationBase();
                                                            this.___locationBase.___DisableLocationAnalyzation = true;
                                                            this.___locationBase.___DisableHrefNavigate = true;
                                                            this.___locationBase.ownerElement = this;
                                                            tagElement.___locationBase.href = string.Copy(this.___locationBase.href);
                                                            this.___locationBase.___DisableHrefNavigate = false;
                                                        }

                                                    }
                                                    if (_sbTagNameCaseSensitiveBuilder != null)
                                                    {
                                                        tagElement.___createCaseSensitiveElementNames(_sbTagNameCaseSensitiveBuilder.ToString());
                                                    }


                                                    if (_sbTagAttributesBuilder != null &&    _sbTagAttributesBuilder.Length != 0)
                                                    {
                                                        tagElement.___createElementAttributesFromString(ref _sbTagAttributesBuilder);
                                                    }


                                                    if (commonHTML.isElementCanGenerateCSSStylesheetObject(tagElement) == true)
                                                    {
                                                        CHtmlCSSStyleSheet.___createCHtmlCSSStylesheetForElement(tagElement);
                                                    }
                                                    /*
#if DEBUG
                                                    if(string.IsNullOrEmpty(tagElement.___href) == false && tagElement.___href.IndexOf("00-top.jpg") > -1)
                                                    {
                                                        commonLog.LogEntry("HERE" + tagElement.ToString());
                                                    }
#endif
                                                     */
                                                     
                                                    // ----------------------------------------------------
                                                    // Iframe , Frame, HTML can analyze location
                                                    // ----------------------------------------------------
                                                    if (tagElement.___elementTagType == CHtmlElementType.IFRAME || tagElement.___elementTagType == CHtmlElementType.FRAME || tagElement.___elementTagType == CHtmlElementType.HTML)
                                                    {
                                                        tagElement.___locationBase.___DisableLocationAnalyzation = false;
                                                        if (this.___MultiversalWindow != null)
                                                        {
                                                            tagElement.___iframeMultiversalWindow = commonHTML.createIFrameMultiversalWindow(this.___MultiversalWindow, this, tagElement);
                                                        }
                                                    }






                                                    tagElement.___TagOpenStartPosition = __ElementStartPosition;
                                                    tagElement.___TagOpenEndPosition = this.___curHTMLParsePosition;

                                                    #region StyleSheetWaiting
                                                    // ===========================================================================================
                                                    // StyleSheetWaiting
                                                    // ===========================================================================================
                                                    
                                                    if (this.___IsDomModeCSSApplyMode() && this.___IsHtmlBodyTagPassed == false && commonHTML.elementTagTypesMostlyAppearsInHeaderSortedList.ContainsKey(tagElement.___elementTagType) == false)
                                                    {
                                                        if (this.___isHeadEndTagExistsInHTMLBuilder == false || this.___isBodyStartTagExistsInHTMLBuilder == false)
                                                        {
                                                            ___checkBodyHeadExistanceInHTMLBuilder();
                                                        }
                                                        if (___isHeadEndTagExistsInHTMLBuilder == true || this.___isBodyStartTagExistsInHTMLBuilder == true)
                                                        {
                                                            if (tagElement.___elementTagType != CHtmlElementType.BODY)
                                                            {
                                                                if ((this.___headEndTagPositionInHTMLBuilder > 0 && ___curHTMLParsePosition > this.___headEndTagPositionInHTMLBuilder) || (this.___bodyStartTagPositionInHTMLBuilder > 0 && ___curHTMLParsePosition > this.___bodyStartTagPositionInHTMLBuilder))
                                                                {

                                                                    if (this.___body == null)
                                                                    {
                                                                        if (this.___bodyDummyElement == null && this.___body == null)
                                                                        {
                                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                                            {
                                                                                commonLog.LogEntry("<body> tag does not exists creat one from dummy body Element. Head EndPostion : {0} Current : {1} Element : {2}", this.___headEndTagPositionInHTMLBuilder, this.___curHTMLParsePosition, tagElement);
                                                                            }
                                                                            this.___body = new CHtmlElement();
                                                                        }
                                                                        else if(this.___bodyDummyElement != null)
                                                                        {
                                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                                            {
                                                                                commonLog.LogEntry("<body> tag does not exists creat one from dummy body Element. Head EndPostion : {0} Current : {1} Element : {2}",  this.___headEndTagPositionInHTMLBuilder,this.___curHTMLParsePosition, tagElement);
                                                                            }
                                                                            this.___body = this.___bodyDummyElement;
                                                                            this.___bodyDummyElement = null;
                                                                        }
                                                                        this.___body.___SetTagNameOnly("BODY");
                                                                        this.___body.___elementTagType = CHtmlElementType.BODY;
                                                                        this.___body.___parentWeakRef = new WeakReference(this.___documentElement, false);
                                                                        
                                                                        if (this.___documentElement != null)
                                                                        {
                                                                            this.___body.___ChildNodeIndex = this.___documentElement.___childNodes.Add(this.___body);
                                                                        }
                                                                        this.___currentParentElement = this.___body;
                                                                        this.___IsHtmlBodyTagPassed = true;
                                                                        goto BodyElementFound;
                                                                    }
                                                                }
                                                            }
                                                            //
                                                            // note)
                                                            // this section shoud be hit when element normally is not head section, but </head> appears later on
                                                            if (tagElement.___elementTagType != CHtmlElementType.BODY)
                                                            {
                                                                goto CSSWaitSectionCompleted;
                                                            }
                                                            else
                                                            {
                                                                goto BodyElementFound;
                                                            }
                                                        }

                                                    BodyElementFound:


                                                        TimeSpan __tpSleep = DateTime.Now.Subtract(this.___responseStartTime);
                                                        bool IsEnquedLeft = ___IsStyleEnqueued();
                                                        if (this.___StyleScriptFileDownloadRequestedTotalCount > 0 || IsEnquedLeft == true)
                                                        {
                                                            if (this.___StyleSheetOnlyFileDownloadPendingCount > 0 || IsEnquedLeft)
                                                            {

                                                                while (this.___StyleSheetOnlyFileDownloadPendingCount > 0 || IsEnquedLeft)
                                                                {
                                                                    if (this.___ThreadStylesheetCompleteEvent != null)
                                                                    {

                                                                        try
                                                                        {

                                                                            this.___ThreadStylesheetCompleteEvent.WaitOne(400, false);
                                                                            IsEnquedLeft = this.___IsStyleEnqueued();
                                                                        }
                                                                        catch (Exception ex)
                                                                        {
                                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 8)
                                                                            {
                                                                                commonLog.LogEntry("WaitOne", ex);
                                                                            }
                                                                        }

                                                                    }
                                                                    else
                                                                    {
                                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 8)
                                                                        {
                                                                            commonLog.LogEntry("CSS Not Completed. Strange But Waiting...");
                                                                        }
                                                                        IsEnquedLeft = this.___IsStyleEnqueued();

                                                                    }
                                                                    if (this.___StyleSheetOnlyFileDownloadPendingCount <= 0 && IsEnquedLeft == false)
                                                                    {
                                                                        break;
                                                                    }
                                                                    __tpSleep = DateTime.Now.Subtract(this.___responseStartTime);
                                                                    if (__tpSleep.TotalMilliseconds >= commonHTML.StylesheetMaximumWaitMilliseconds)
                                                                    {
                                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 3)
                                                                        {
                                                                            commonLog.LogEntry("CSS Timeup!");
                                                                        }
                                                                        break;
                                                                    }
                                                                    else
                                                                    {


                                                                    }

                                                                }
                                                            }
                                                            if (this.___StyleQueue != null && this.___StyleQueue.Count > 0)
                                                            {
                                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 8)
                                                                {
                                                                    commonLog.LogEntry("There is still some style remains on queue {0}...", this.___StyleQueue.Count);
                                                                }

                                                            }
                                                            if (this.___StyleSheetOnlyFileDownloadPendingCount <= 0)
                                                            {

                                                                this.___StylesheetProcessMode = DOMCSSApplyModeType.BOF;
                                                                this.___isStyleQueueShouldBeStopedAfterBodyTag = true;
                                                                ___DetectIdenticalStylePreviousSiblingCloningEnabled();
                                                                this.___cssRuleGourndItemsCount = this.___cssRuleGroundList.Count;
                                                                this.___CHtmlStyleElementListsCountAtBodyTagPassed = this.___cssRuleGourndItemsCount;
                                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                                                                {
                                                                    TimeSpan tpStyleWaitResult = DateTime.Now.Subtract(this.___responseStartTime);
                                                                    commonLog.LogEntry("'{0}' <body> {1} started with all stylesheets obtained of {2}/{3} CSS Accu : {4} within {5} ms ...", this.___UrlShortName, this.___StylesheetProcessMode, this.___StyleSheetOnlyFileDownloadPendingCount, this.___StyleScriptFileDownloadRequestedTotalCount, (int)this.___CSSDocumentTotalPseudoClass, tpStyleWaitResult.TotalMilliseconds);
                                                                }
                                                                this.___FinishStyleQueueThread();
                                                                if (this.___ThreadStylesheetCompleteEvent != null)
                                                                {
                                                                    this.CloseAndDisposeAutoResetEvent(ref this.___ThreadStylesheetCompleteEvent);
                                                                    this.___ThreadStylesheetCompleteEvent = null;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                // ======================================================================
                                                                // Stylesheet and Script Remainds but Time out
                                                                // ======================================================================
                                                                if (this.___ThreadStylesheetCompleteEvent != null)
                                                                {
                                                                    this.CloseAndDisposeAutoResetEvent(ref this.___ThreadStylesheetCompleteEvent);
                                                                    this.___ThreadStylesheetCompleteEvent = null;
                                                                }
                                                                if (this.___StyleSheetOnlyFileDownloadPendingCount <= 0)
                                                                {
                                                                    this.___StylesheetProcessMode = DOMCSSApplyModeType.BOF;
                                                                }
                                                                else if ((long)this.___StyleSheetOnlyFileDownloadPendingCount / (long)this.___StyleScriptFileDownloadRequestedTotalCount >= 0.3F)
                                                                {
                                                                    this.___StylesheetProcessMode = DOMCSSApplyModeType.BOF;
                                                                }
                                                                else
                                                                {
                                                                    this.___StylesheetProcessMode = DOMCSSApplyModeType.EOF;
                                                                }
                                                                this.___isStyleQueueShouldBeStopedAfterBodyTag = true;

                                                                ___DetectIdenticalStylePreviousSiblingCloningEnabled();
                                                                this.___cssRuleGourndItemsCount = this.___cssRuleGroundList.Count;
                                                               
                                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                                                                {
                                                                    TimeSpan tpStyleWaitResult = DateTime.Now.Subtract(this.___responseStartTime);
                                                                    commonLog.LogEntry("'{0}' <body> {1} started with some stylesheets not obtained of {2}:{3}/{4} CSS Acu: {5} within {6} ms...", this.___UrlShortName, this.___StylesheetProcessMode, this.___StyleSheetOnlyFileDownloadPendingCount, this.___StyleSheetOnlyFileDownloadPendingCount, this.___StyleScriptFileDownloadRequestedTotalCount, (int)this.___CSSDocumentTotalPseudoClass, tpStyleWaitResult.TotalMilliseconds);
                                                                }
                                                                this.___FinishStyleQueueThread();

                                                            }


                                                        }
                                                        else
                                                        {
                                                            if (this.___ThreadStylesheetCompleteEvent != null)
                                                            {
                                                                this.CloseAndDisposeAutoResetEvent(ref this.___ThreadStylesheetCompleteEvent);
                                                                this.___ThreadStylesheetCompleteEvent = null;
                                                            }
                                                            this.___cssRuleGourndItemsCount = this.___cssRuleGroundList.Count;
                                                            this.___isStyleQueueShouldBeStopedAfterBodyTag = true;
                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                                                            {
                                                                TimeSpan tpStyleWaitResult = DateTime.Now.Subtract(this.___responseStartTime);
                                                                commonLog.LogEntry("'{0}' <body> {1} started with zero stylesheets {2} within {3} ms...", this.___UrlShortName, this.___curHTMLParsePosition, this.___StylesheetProcessMode, tpStyleWaitResult.TotalMilliseconds);
                                                            }
                                                            this.___FinishStyleQueueThread();

                                                        }
                                                        this.___IsHtmlBodyTagPassed = true;
                                                    }
                                                    #endregion
                                                CSSWaitSectionCompleted:
                                                    if (this.___IsDomModeAnyHTML())
                                                    {
                                                        CHtmlElementType[] ___possibleParentOpenTags = commonHTML.GetPossibleClosingChildTagName(tagElement.___elementTagType);
                                                        if (___possibleParentOpenTags != null && ___possibleParentOpenTags.Length > 0)
                                                        {
                                                            int OpenTagCheckCount = ___possibleParentOpenTags.Length;
                                                            for (int otagPos = 0; otagPos < OpenTagCheckCount; otagPos++)
                                                            {
                                                                CHtmlElementType ___pTag = ___possibleParentOpenTags[otagPos];
                                                                CHtmlElement openElement = ___getParentElementOpenFromTagType(___pTag, this.___currentParentElement, 3);
                                                                if (openElement  != null)
                                                                {
                                                                    this.___closeElementWithTagString("", __ElementStartPosition - 1, __ElementStartPosition - 1, true, openElement);
                                                                    break;
                                                                }
                                                            }

                                                        }
                                                    }
                                                    //Prior___AddToParentElement:




                                                    // =======================================================
                                                    //  ___AddToParentElement
                                                    // 
                                                    // =======================================================
                                                    if (___skipAddToParentElement == false)
                                                    {
                                                        this.___addToCurrentParentElement(tagElement);
                                                    }
                                                    else
                                                    {

                                                    }
                                                    //HTML.CHtmlDocument.CreateAttributesEventEntry(tagElement);

                                                    // =======================================================



                                                    // =================== Progress Checker ================================
                                                    // [        [******  95%   ]
                                                    // =================== Progress Checker ================================

                                                //ProgressReportDone:

                                                    // =====================================================================
                                                    switch (tagElement.___elementTagType)
                                                    {
                                                        case CHtmlElementType.BODY:
                                                            //tagElement.BackgroundColor = Color.White;
                                                            //tagElement.ForegroundColor = Color.Black;
                                                            tagElement.___offsetWidth = ___DocumentMinSize.Width;
                                                            tagElement.___offsetHeight = ___DocumentMinSize.Height;
                                                            tagElement.___availWidth = tagElement.___offsetWidth;
                                                            tagElement.___availHeight = tagElement.___offsetHeight;
                                                            break;
                                                        case CHtmlElementType.TITLE:

                                                            break;
                                                        case CHtmlElementType.META:
                                                            {
                                                                if (this.___charset_position_in_html == -1 || this.___charset_position_in_html + 36 < this.___curHTMLParsePosition)
                                                                {
                                                                    if (tagElement.___attributes.ContainsKey("charset") == true || (tagElement.___attributes.ContainsKey("content") == true && tagElement.___attributes.ContainsKey("http-equiv") == true && commonHTML.GetElementAttributeInString(tagElement, "http-equiv").Equals("content-type", StringComparison.OrdinalIgnoreCase) == true))
                                                                    {
                                                                        string _newcharset = GetEncodingByElement(tagElement);
                                                                        this.___defaultCharset = string.Copy(_newcharset);
                                                                        if (_newcharset.Length != 0 && string.Equals(_newcharset, "autodetect", StringComparison.Ordinal) == false && string.Equals(_newcharset,"auto", StringComparison.Ordinal) == false && string.Equals(this.___charset, _newcharset,StringComparison.OrdinalIgnoreCase) == false)
                                                                        {
                                                                            System.Text.Encoding _encNew = null;
                                                                            try
                                                                            {
                                                                                _encNew = System.Text.Encoding.GetEncoding(_newcharset);
                                                                            }
                                                                            catch
                                                                            {
                                                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                                                                                {
                                                                                    commonLog.LogEntry("GetEncoding in body Failed : " + _newcharset);
                                                                                }
                                                                            }
                                                                            if(this.___encText == null && ___encText != null)
                                                                            {
                                                                                if (commonLog.LoggingEnabled)
                                                                                {
                                                                                    commonLog.LogEntry("encoding shift : " + this.___charset + " => " + _newcharset + " : " + _encNew.EncodingName);
                                                                                }
                                                                                this.___charset = _newcharset;
                                                                                this.___encText = _encNew;
                                                                            }
                                                                            else if (_encNew != null  && string.Equals(_encNew.EncodingName, this.___encText.EncodingName,StringComparison.Ordinal) == false)
                                                                            {
                                                                                if (commonLog.LoggingEnabled)
                                                                                {
                                                                                    commonLog.LogEntry("encoding shift : " + this.___charset + " => " + _newcharset + " : " + _encNew.EncodingName);
                                                                                }
                                                                                this.___charset = _newcharset;
                                                                                this.___encText = _encNew;
                                                                            }
                                                                            else
                                                                            {
                                                                                if (commonLog.LoggingEnabled)
                                                                                {
                                                                                    commonLog.LogEntry("encoding shift : " + _newcharset + ", but no encoding found");
                                                                                }

                                                                            }

                                                                        }

                                                                    }
                                                                }
                                                                if (tagElement.___attributes.Count > 0 && tagElement.___attributes.ContainsKey("name") == true)
                                                                {
                                                                    string ____nameValue = commonHTML.GetElementAttributeInString(tagElement, "name");
                                                                    if (string.Equals(____nameValue, "keywords", StringComparison.OrdinalIgnoreCase) == true)
                                                                    {
                                                                        if (tagElement.___attributes.ContainsKey("content"))
                                                                        {
                                                                            this.___keywords = commonHTML.GetElementAttributeInString(tagElement, "content");

                                                                        }

                                                                    }
                                                                }
                                                                if (tagElement.___attributes.ContainsKey("http-equiv"))
                                                                {
                                                                    string ____nameValue = commonHTML.GetElementAttributeInString(tagElement, "http-equiv");
                                                                    string ____nameValueLow = commonHTML.FasterToLower(____nameValue);
                                                                    switch (____nameValueLow)
                                                                    {
                                                                        case "refresh":
                                                                            {
                                                                                if (tagElement.___IsNoScriptBlock == true || tagElement.___IsParentVisible == false)
                                                                                {
                                                                                    goto BeginSyleSheetLookupSection;
                                                                                }
                                                                                if (tagElement.___parentWeakRef != null && tagElement.___parentWeakRef.Target  is CHtmlElement && tagElement.___getParentElement().___IsNoScriptBlock == true)
                                                                                {
                                                                                    goto BeginSyleSheetLookupSection;

                                                                                }
                                                                                if (tagElement.___attributes.ContainsKey("content"))
                                                                                {
                                                                                    string strRefreshContent = commonHTML.GetElementAttributeInString(tagElement, "content");
                                                                                    if (strRefreshContent.Length > 3)
                                                                                    {
                                                                                        string[] strRefreshSp = strRefreshContent.Split(';');
                                                                                        foreach (string s in strRefreshSp)
                                                                                        {
                                                                                            bool ___IsStringUrl = false;
                                                                                            if (s.StartsWith("http", StringComparison.OrdinalIgnoreCase) || s.StartsWith("url", StringComparison.OrdinalIgnoreCase))
                                                                                            {
                                                                                                ___IsStringUrl = true;
                                                                                            }
                                                                                            else if (s.IndexOf('.') > -1)
                                                                                            {
                                                                                                ___IsStringUrl = true;
                                                                                            }
                                                                                            else if (s.Length > 0 && s.Length < 5)
                                                                                            {
                                                                                                try
                                                                                                {
                                                                                                    this.___MetaRefreshSeconds = int.Parse(s);
                                                                                                }
                                                                                                catch
                                                                                                {
                                                                                                    this.___MetaRefreshSeconds = 0;

                                                                                                }
                                                                                                continue;
                                                                                            }
                                                                                            ___IsStringUrl = true;
                                                                                            if (___IsStringUrl == true)
                                                                                            {


                                                                                                string sL = s;
                                                                                                int iUrlPos = sL.IndexOf("url=", StringComparison.OrdinalIgnoreCase);
                                                                                                if (iUrlPos > -1)
                                                                                                {
                                                                                                    this.___MetaRefreshUrl = s.Substring(iUrlPos + 4);
                                                                                                    if (___MetaRefreshUrl.Length > 0 && (commonHTML.FasterIsWhiteSpaceLimited(___MetaRefreshUrl[0]) == true || commonHTML.FasterIsWhiteSpaceLimited(___MetaRefreshUrl[___MetaRefreshUrl.Length - 1]) == true))
                                                                                                    {
                                                                                                        ___MetaRefreshUrl = ___MetaRefreshUrl.Trim();
                                                                                                    }

                                                                                                }



                                                                                                this.___MetaRefreshUrl = commonHTML.GetAbsoluteUri(this.___URL, this.___baseUrl, this.___MetaRefreshUrl);
                                                                                                if (string.Equals(this.___MetaRefreshUrl, this.___URL, StringComparison.Ordinal) == true)
                                                                                                {
                                                                                                    this.___HasMetaRefresh = false;
                                                                                                    this.___MetaRefreshUrl = "";
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    this.___MetaRefreshBaseElement = new WeakReference(tagElement, false);
                                                                                                    this.___HasMetaRefresh = true;

                                                                                                }

                                                                                            }
                                                                                        }

                                                                                    }


                                                                                }

                                                                            }
                                                                            break;
                                                                        case "set-cookie":
                                                                            {
                                                                                try
                                                                                {
                                                                                    string strCookieContent = commonHTML.GetElementAttributeInString(tagElement, "content");
                                                                                    if (strCookieContent.Length != 0)
                                                                                    {
                                                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 20)
                                                                                        {
                                                                                            commonLog.LogEntry("Meta Set-cookie : {0}", strCookieContent);
                                                                                        }
                                                                                        this.cookie = strCookieContent;
                                                                                    }
                                                                                }
                                                                                catch (Exception ex)
                                                                                {
                                                                                    commonLog.LogEntry("Meta Set-Cookie Error", ex);
                                                                                }
                                                                            }
                                                                            break;
                                                                        default:
                                                                            break;

                                                                    }
                                                                }
                                                            }
                                                            break;
                                                        case CHtmlElementType.BASE:
                                                            {
                                                                if (string.IsNullOrEmpty(tagElement.___href) == false)
                                                                {
                                                                    this.___baseUrl = string.Copy(tagElement.___href);
                                                                    if (!this.___baseUrl.StartsWith("http://", StringComparison.Ordinal) && !this.___baseUrl.StartsWith("https://", StringComparison.Ordinal) && !this.___baseUrl.StartsWith("file://", StringComparison.OrdinalIgnoreCase))
                                                                    {
                                                                        string _tempBase = this.___baseUrl;
                                                                        this.___baseUrl = commonHTML.GetAbsoluteUri(this.___URL, "", this.___baseUrl);
                                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                                        {
                                                                            commonLog.LogEntry("Base Url Assigned as  {0} from  \"{1}\"", this.___baseUrl, _tempBase);
                                                                        }
                                                                        //this._BaseUrl = "";

                                                                    }
                                                                }
                                                                break;
                                                            }
                                                    }
                                                BeginSyleSheetLookupSection:




                                                    if (this.___IsDomModeCSSApplyMode())
                                                    {
                                                        if ( commonHTML.elementTagTypesNoStylesheetLookupHtmlExcludeSortedList.ContainsKey(tagElement.___elementTagType) == false && tagElement.___IsNoScriptBlock == false)
                                                        {
                                                            if (tagElement.___elementTagType == CHtmlElementType.BODY)
                                                            {

                                                                // <html> tag may contains style lists, so go lookup now
                                                                CHtmlElement ___htmlTopElement = this.___documentElement  as CHtmlElement;
                                                                if(___htmlTopElement == null)
                                                                {
                                                                    if (commonLog.LoggingEnabled)
                                                                    {
                                                                        commonLog.LogEntry("BUGX");
                                                                    }
                                                                
                                                                if (___htmlTopElement.___documentWeakRef  == null)
                                                                {
                                                                    ___htmlTopElement.___documentWeakRef = new WeakReference(this, false);
                                                                }
                                                                    if (this.___cssRuleGourndItemsCount > 0 || this.___cssRuleGroundList.Count > 0)
                                                                    {

                                                                        if (___htmlTopElement.___elementTagType == CHtmlElementType.HTML)
                                                                        {
                                                                            if (___htmlTopElement.___style == null)
                                                                            {
                                                                                ___htmlTopElement.___style = new CHtmlCSSStyleSheet(CHtmlElementStyleType.Element);
                                                                            }

                                                                            this.___cssRuleGroundList.CreateCHtmlStyleElementCandidateListIntoElement(___htmlTopElement);

                                                                            if (___htmlTopElement.___stylesheetsForNextNodeList.Count > 1)
                                                                            {
                                                                                // lock(___htmlTopElement.styleList.SyncRoot)
                                                                                // {
                                                                                ___htmlTopElement.___stylesheetsForNextNodeList.Sort(new CHtmlCSSRuleWorkingKeyStringComparer());
                                                                                // }
                                                                            }



                                                                            this.___applyElemenetStyleSheets(___htmlTopElement, false, false, false);
                                                                        }

                                                                        ___htmlTopElement.___IsStyleListSortedByHitForThisNode = true;
                                                                    }
                                                                }
                                                            }
                                                            #region CollectStyleSheets
                                                            if (commonHTML.elementTagTypesNeverSeachStyleSheetSortedList.ContainsKey(tagElement.___elementTagType) == true)
                                                            {
                                                                tagElement.___isCalculateElementBoundsCalled = true;
                                                                tagElement.___isApplyElemenetStyleSheetCalled = true;
                                                                goto ApplyElementStyleSheetDone;
                                                            }
                                                            if (this.___IsHtmlBodyTagPassed)
                                                            {

                                                                /*
#if DEBUG
                                                                if(tagElement.id == "body")
                                                                {
                                                                    commonLog.LogEntry("HERE");
                                                                }
#endif
                                                                */


                                                                if (this.___CSSAttributeLookupFieldList != null && this.___CSSAttributeLookupFieldList.Count > 0)
                                                                {
                                                                    goto StyleAccumulation;
                                                                }
                                                                // ===============================================================================
                                                                // If tagElement is first element OR has ID Specified it can not copy from siblings
                                                                // ================================================================================
                                                                if (tagElement.___ChildNodeIndex == 0 || tagElement.___elementTagType == CHtmlElementType.BODY || tagElement.___elementTagType == CHtmlElementType.HEAD || ((tagElement.___KeyAttributes & CHtmlElementDeclaredAttributeType.ID) == CHtmlElementDeclaredAttributeType.ID) == true)
                                                                {

                                                                    goto StyleAccumulation;
                                                                }
                                                                if (this.___CSSNthOfTypeTagTypesList.Count > 0)
                                                                {
                                                                    // If tagType exists on the .___CSSNthOfTypeTagTypesList use
                                                                    // normal accumulation. otherwise, it may be clonable.
                                                                    // ex.
                                                                    //     :nth-of-type
                                                                    //     :last-of-type
                                                                    //     :fist-of-type
                                                                    //     :only-type
                                                                    if (this.___CSSNthOfTypeTagTypesList.ContainsKey(tagElement.___tagName) == true)
                                                                    {
                                                                        goto StyleAccumulation;
                                                                    }
                                                                }
                                                                if (this.___IsIdenticalStylePreviousSiblingCloningEnabled == true)
                                                                {
                                                                    CHtmlElement ___parentNodeCur = tagElement.___parent as CHtmlElement;
                                                                    if (___parentNodeCur != null && ___parentNodeCur.___HasCSSIndirectAdjacentCombinator == true)
                                                                    {
                                                                        goto StyleAccumulation;
                                                                    }
                                                                    if (___parentNodeCur != null && tagElement.___ChildNodeIndex > 0)
                                                                    {
                                                                        try
                                                                        {
                                                                            int ___LookupIndex = tagElement.___ChildNodeIndex;
                                                                            int ___CurrentLookupCount = 0;
                                                                            while (___LookupIndex >= 1)
                                                                            {
                                                                                ___LookupIndex--;
                                                                                ___CurrentLookupCount++;
                                                                                if (___CurrentLookupCount >= 2)
                                                                                {
                                                                                    break;
                                                                                }

                                                                                CHtmlElement __PreviousElement = ___parentNodeCur.___childNodes[___LookupIndex] as CHtmlElement;
                                                                                if (__PreviousElement != null)
                                                                                {


                                                                                    if (__PreviousElement.___elementTagType == tagElement.___elementTagType)
                                                                                    {
                                                                                        if (__PreviousElement.___KeyAttributes == tagElement.___KeyAttributes)
                                                                                        {
                                                                                            if (((tagElement.___KeyAttributes & CHtmlElementDeclaredAttributeType.Class) == CHtmlElementDeclaredAttributeType.Class) == true)
                                                                                            {

                                                                                                if (string.Equals(__PreviousElement.@class, tagElement.@class, StringComparison.Ordinal) == false)
                                                                                                {
                                                                                                    continue;

                                                                                                }
                                                                                            }
                                                                                            if (__PreviousElement.___HasCSSAdjacentSiblingCombinator == true || __PreviousElement.___HasCSSIndirectAdjacentCombinator == true)
                                                                                            {
                                                                                                goto StyleAccumulation;
                                                                                            }

                                                                                            if (((__PreviousElement.___KeyAttributes & CHtmlElementDeclaredAttributeType.ID) == CHtmlElementDeclaredAttributeType.ID) == true)
                                                                                            {

                                                                                                if (string.Equals(__PreviousElement.___idLowSimple, tagElement.___idLowSimple,StringComparison.Ordinal) == false)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

      
                                                                                            if (string.IsNullOrEmpty(tagElement.___type) == false)
                                                                                            {
                                                                                                if (this.___CSSAttributeLookupFieldList.ContainsKey(tagElement.___type) == false)
                                                                                                {
                                                                                                    goto TypeLookupDone;

                                                                                                }

                                                                                                if (string.Equals(tagElement.___type, __PreviousElement.___type,StringComparison.OrdinalIgnoreCase ) == false)
                                                                                                {
                                                                                                    continue;
                                                                                                }

                                                                                            }
                                                                                        TypeLookupDone:
                                                                                            // =========================================================================
                                                                                            // Copy Element Next Node Style
                                                                                            // =========================================================================
                                                                                            int NextNodeListPreviousCount = __PreviousElement.___stylesheetsForNextNodeList.Count;
                                                                                            if (NextNodeListPreviousCount > 0)
                                                                                            {
                                                                                                for (int stylePos = 0; stylePos < NextNodeListPreviousCount; stylePos++)
                                                                                                {
                                                                                                    CHtmlCSSRule stylePreiv = __PreviousElement.___stylesheetsForNextNodeList[stylePos];
                                                                                                    if (stylePreiv != null)
                                                                                                    {

                                                                                                        CHtmlCSSRule copyPart = stylePreiv;
                                                                                                        if (tagElement.___stylesheetsForNextNodeListWorkingSelectorMaximumCount < copyPart.___styleKeyWorkingList.Count)
                                                                                                        {
                                                                                                            tagElement.___stylesheetsForNextNodeListWorkingSelectorMaximumCount = copyPart.___styleKeyWorkingList.Count;
                                                                                                        }
                                                                                                        if (tagElement.___stylesheetsForNextNodeListOriginalSelectorMaximumCount < copyPart.___styleKeyOrignalList.Count)
                                                                                                        {
                                                                                                            tagElement.___stylesheetsForNextNodeListOriginalSelectorMaximumCount = copyPart.___styleKeyOrignalList.Count;
                                                                                                        }

                                                                                                        tagElement.___stylesheetsForNextNodeList.Add(copyPart);

                                                                                                    }

                                                                                                }
                                                                                                tagElement.___stylesheetsForNextNodeListNextLevelTopSelectorKeyClassType = __PreviousElement.___stylesheetsForNextNodeListNextLevelTopSelectorKeyClassType;
                                                                                            }
                                                                                            // =========================================================================
                                                                                            // Copy Element Hit Style
                                                                                            // =========================================================================
                                                                                            int ___previousElementStyleCount =__PreviousElement.___stylesheetsForCurrentNodeList.Count; 
                                                                                            for (int StylePos = 0; StylePos < ___previousElementStyleCount; StylePos++)
                                                                                            {
                                                                                                CHtmlCSSRule styleCurrentPreiv = __PreviousElement.___stylesheetsForCurrentNodeList[StylePos];
                                                                                                if (styleCurrentPreiv != null)
                                                                                                {
                                                                                                    if (styleCurrentPreiv.___HasFirstChildPseudoClass == true || styleCurrentPreiv.___HasFirstLetterPseudoClass == true || styleCurrentPreiv.___HasFirstOfTypePseudoClass || styleCurrentPreiv.___HasNthChildPseudoClass == true || styleCurrentPreiv.___HasNthChildPseudoClass == true || styleCurrentPreiv.___HasLastChildPseudoClass == true || styleCurrentPreiv.___HasOnlyChildPseudoClass == true || styleCurrentPreiv.___HasNthOfTypePseudoClass == true || styleCurrentPreiv.___IsDirectStyleElement == true)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    CHtmlCSSRule copyPart = styleCurrentPreiv.cloneCSSRule();
                                                                                                    if (tagElement.___stylesheetsForNextNodeListWorkingSelectorMaximumCount < copyPart.___styleKeyWorkingList.Count)
                                                                                                    {
                                                                                                        tagElement.___stylesheetsForNextNodeListWorkingSelectorMaximumCount = copyPart.___styleKeyWorkingList.Count;
                                                                                                    }
                                                                                                    if (tagElement.___stylesheetsForNextNodeListOriginalSelectorMaximumCount < copyPart.___styleKeyOrignalList.Count)
                                                                                                    {
                                                                                                        tagElement.___stylesheetsForNextNodeListOriginalSelectorMaximumCount = copyPart.___styleKeyOrignalList.Count;
                                                                                                    }

                                                                                                    tagElement.___stylesheetsForCurrentNodeList.Add(copyPart);

                                                                                                }

                                                                                            }

                                                                                            tagElement.___IsStyleCopiedFromIdenticalSibling = true;
                                                                                            this.___IdenticalElementStyleSiblingCloneCount++;
                                                                                            goto StyleAccumulatedDone;


                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        catch (Exception ex)
                                                                        {
                                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 1)
                                                                            {
                                                                                commonLog.LogEntry("PreviousNodeCheck", ex);
                                                                            }
                                                                        }

                                                                    }
                                                                }
                                                            StyleAccumulation:
                                                                if (commonHTML.elementTagTypesNeverSeachStyleSheetSortedList.ContainsKey(tagElement.___elementTagType) == false)
                                                                {
                                                                    /*
#if DEBUG
                                                                    if (tagElement.id == "HOGEHOGE")
                                                                    {
                                                                        commonLog.LogEntry("HERE");
                                                                    }
#endif
                                                                     */
                                                                    if (this.___cssRuleGourndItemsCount == 0)
                                                                    {
                                                                        // May be Count is incremented after body. re-check
                                                                        if (this.___cssRuleGroundList.Count > 0)
                                                                        {
                                                                            this.___cssRuleGourndItemsCount = this.___cssRuleGroundList.Count;
                                                                        }
                                                                        else
                                                                        {
                                                                            goto StyleAccumulatedDone;
                                                                        }
                                                                    }

                                                                    if (___cssRuleGourndItemsCount > 0)
                                                                    {
                                                                        this.___cssRuleGroundList.CreateCHtmlStyleElementCandidateListIntoElement(tagElement);
                                                                    }
                                                                }
                                                            StyleAccumulatedDone:

                                                                if (tagElement.___stylesheetsForNextNodeList.Count > 1)
                                                                {
                                                                    tagElement.___stylesheetsForNextNodeList.Sort(new CHtmlCSSRuleWorkingKeyStringComparer());
                                                                }
                                                                tagElement.___IsStyleListSortedByHitForThisNode = true;
                                                            }
                                                            #endregion
                                                        
                                                            #region ApplyHTMLDesign
                                                            // ===========================================================
                                                            // ApplyHTMLDesign
                                                            // ===========================================================
                                                            /*
#if DEBUG
                                                            if(tagElement.id == "HERE")
                                                            {
                                                                commonLog.LogEntry("HERE");
                                                            }
#endif
                                                            */

                                                            if (this.___IsDomModeCSSApplyMode())
                                                            {
                                                                if (tagElement.___elementTagType != CHtmlElementType.HTML && tagElement.___elementTagType != CHtmlElementType.DOCTYPE)
                                                                {

                                                                    this.___applyElemenetStyleSheets(tagElement, false, false, false);
                                                                    /*
#if DEBUG
                                                                    if (string.IsNullOrEmpty(tagElement.___src) == false && tagElement.___src.Contains("150x") == true)
                                                                    {
                                                                        commonLog.LogEntry("StyleSizeMode : {0}", tagElement.___style.___styleSizeMode);
                                                                    }

#endif
                                                                    */
                                                                }
                                                            }

                                                            // ===========================================================
                                                            #endregion

                                                        }

                                                    }
                                            ApplyElementStyleSheetDone:

                                                    if (tagElement.___style == null)
                                                    {
                                                        // ALL ELEMENT SHOULD HAVE STYLE Element
                                                        tagElement.___style = new CHtmlCSSStyleSheet(CHtmlElementStyleType.Element);
                                                        tagElement.___isApplyElemenetStyleSheetCalled = true;

                                                    }

                                                    bool __IsEnqueued = false;
                                                    if (tagElement.___IsNoScriptBlock == false && this.___IsDomModeFullParseMode() == true && tagElement.___attributes.Count > 0)
                                                    {

                                                        #region Download
                                                        // ========================================================
                                                        // Download Content
                                                        // ========================================================
                                                        if (commonHTML.elementTagTypesForDownloadSortedList.ContainsKey(tagElement.___elementTagType) == true)
                                                        {
                                                            if (tagElement.___isInactivativeElementNodeChild == true)
                                                            {
                                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                                {
                                                                    commonLog.LogEntry("{0}  element has inactive element. process skip....", tagElement);
                                                                }
                                                                goto LineContinueAnalysis;
                                                            }
                                                            if (tagElement.___elementTagType == CHtmlElementType.LINK)
                                                            {
                                                                if (commonHTML.IsLinkElementDisabledAttributTrue(tagElement) == true)
                                                                {
                                                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                                    {
                                                                        commonLog.LogEntry("{0} link element has disabled true '{1}'. Skip....", tagElement, tagElement.___href);
                                                                    }
                                                                    goto LineContinueAnalysis;
                                                                }
                                                            }
                                                            if (tagElement.___elementTagType == CHtmlElementType.VIDEO || tagElement.___elementTagType == CHtmlElementType.AUDIO)
                                                            {
                                                                if (tagElement.___preloadType == CHtmlMediaElementPreloadType.unkonwn)
                                                                {
                                                                    if (tagElement.___attributes.ContainsKey("preload") == true)
                                                                    {
                                                                        tagElement.___preloadType = CHtmlMediaElement.___getPreloadType(commonHTML.GetElementAttributeInString(tagElement, "preload"));
                                                                    }
                                                                }
                                                                if (tagElement.___preloadType == CHtmlMediaElementPreloadType.auto || tagElement.___preloadType == CHtmlMediaElementPreloadType.metadata)
                                                                {

                                                                }
                                                                goto LineContinueAnalysis;
                                                            }


                                                            string __srcUrl = "";
                                                            string __srcCharSet = "";
                                                            string __attributeType = "";
                                                            __attributeType = commonHTML.GetElementAttributeInString(tagElement, "type");

                                                            __srcCharSet = commonHTML.GetElementAttributeInString(tagElement, "charset");
                                                            if (__srcCharSet.Length != 0)
                                                            {
                                                                __srcCharSet = commonHTML.FasterToLower(__srcCharSet);
                                                            }

                                                            if (__srcCharSet.Length == 0)
                                                            {
                                                                __srcCharSet = this.charset;
                                                            }

                                                            bool __IsForDownloadBeforeHand = false;
                                                            CHtmlUrlSourceType __UrlSourceType = CHtmlUrlSourceType.Unknown;
                                                            CHtmlFileType _fileType = commonHTML.GetHTMLFileType(tagElement.tagName, tagElement.___attributes, "", ref __srcUrl, ref __IsForDownloadBeforeHand, tagElement);
                                                            /*
#if DEBUG
                                                            commonLog.LogEntry("HTML FileType {0} : {1} : {2}",_fileType , __srcUrl, __IsForDownloadBeforeHand);
#endif
                                                            */
                                                            if (tagElement.___elementTagType == CHtmlElementType.OBJECT)
                                                            {
                                                                switch (commonHTML.FasterToLower(__attributeType))
                                                                {
                                                                    case "image/gif":
                                                                    case "image/jpeg":
                                                                    case "image/png":
                                                                    case "image/jpe":
                                                                    case "image/jfif":
                                                                    case "image/jfi":
                                                                    case "image/tiff":
                                                                    case "image/tif":
                                                                    case "image/bmp":
                                                                    case "image/dib":
                                                                        if (__srcUrl.Length == 0)
                                                                        {
                                                                            __srcUrl = commonHTML.GetElementAttributeInString(tagElement, "data");
                                                                        }
                                                                        __IsForDownloadBeforeHand = true;
                                                                        break;
                                                                    default:
                                                                        __IsForDownloadBeforeHand = false;
                                                                        goto LineContinueAnalysis;
                                                                }
                                                            }

                                                            if (tagElement.___elementTagType == CHtmlElementType.SCRIPT)
                                                            {
                                                                if (__srcUrl.Length == 0 && tagElement.src.Length != 0)
                                                                {
                                                                    __srcUrl = tagElement.src;
                                                                }
                                                                if (__srcUrl.Length != 0)
                                                                {
                                                                    __IsForDownloadBeforeHand = true;
                                                                }
                                                                if (_fileType == CHtmlFileType.Unknown)
                                                                {
                                                                    _fileType = CHtmlFileType.JavaScript;
                                                                }
                                                            }
                                                            if (__IsForDownloadBeforeHand == false && tagElement.___elementTagType == CHtmlElementType.INPUT
                                                                && string.Equals(__attributeType, "image", StringComparison.OrdinalIgnoreCase) == true && __srcUrl.Length != 0)
                                                            {

                                                                __IsForDownloadBeforeHand = true;
                                                            }
                                                            if (__IsForDownloadBeforeHand == true && __srcUrl.Length == 1 && __srcUrl[0] ==  '/')
                                                            {
                                                                tagElement.X_DOM_ProcessorAdd("src '/' is invalid");
                                                                tagElement.src = "";
                                                                goto LineContinueAnalysis;
                                                            }
                                                            if (string.IsNullOrEmpty(__srcUrl) == false && __IsForDownloadBeforeHand == true && __srcUrl.StartsWith("data:", StringComparison.Ordinal) == true)
                                                            {
                                                                if (this.___images.ContainsKey(__srcUrl) == false)
                                                                {
                                                                    string ImageHeader = "";
                                                                    string DataString = "";
                                                                    bool r = commonHTML.IsUrlImageData(__srcUrl, ref ImageHeader, ref DataString);
                                                                    try
                                                                    {

                                                                        Image imgBase64 = null;// commonGraphics.ConvertBase64ToImage(DataString);
                                                                        if (imgBase64 != null)
                                                                        {
                                                                            bool __ImageEntered = false;
                                                                            try
                                                                            {
                                                                                if (Monitor.TryEnter(this.___ImageRawListLockingObject, 1000))
                                                                                {
                                                                                    __ImageEntered = true;
                                                                                    this.___images[__srcUrl] = imgBase64;
                                                                                }
                                                                            }
                                                                            finally
                                                                            {
                                                                                if (__ImageEntered)
                                                                                {
                                                                                    Monitor.Exit(this.___ImageRawListLockingObject);
                                                                                }
                                                                            }
                                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                                            {
                                                                                commonLog.LogEntry("{0} created data image {1}", tagElement, ImageHeader);
                                                                            }
                                                                        }
                                                                        if (imgBase64 != null && tagElement.___style.___styleSizeMode != CHtmlSizeModeType.Both)
                                                                        {
                                                                            if (tagElement.___elementTagType == CHtmlElementType.IMG)
                                                                            {
                                                                                ___resetElementSizeByImageSize(tagElement, imgBase64);
                                                                                tagElement.___style.___styleSizeMode = CHtmlSizeModeType.Both;
                                                                            }
                                                                        }
                                                                    }
                                                                    catch (Exception ex)
                                                                    {
                                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                                        {
                                                                            commonLog.LogEntry("Can not convert to image" + ex.Message + " : " + ImageHeader);
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (tagElement.___style.___styleSizeMode == CHtmlSizeModeType.Undefined)
                                                                    {
                                                                        Image imgBase64 = null;
                                                                        this.___images.TryGetValue(__srcUrl, out imgBase64);
                                                                        if (imgBase64 != null)
                                                                        {
                                                                            if (tagElement.___elementTagType == CHtmlElementType.IMG)
                                                                            {
                                                                                ___resetElementSizeByImageSize(tagElement, imgBase64);
                                                                                tagElement.___style.___styleSizeMode = CHtmlSizeModeType.Both;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                goto LineContinueAnalysis;
                                                            }


                                                            if (__srcUrl.Length == 0 || _fileType == CHtmlFileType.Unknown)
                                                            {
                                                                goto LineContinueAnalysis;
                                                            }
                                                            switch (_fileType)
                                                            {
                                                                case CHtmlFileType.Rss:
                                                                case CHtmlFileType.ICO:
                                                                    goto LineContinueAnalysis;
                                                                case CHtmlFileType.Css:
                                                                    if (__IsForDownloadBeforeHand == false)
                                                                    {
                                                                        goto LineContinueAnalysis;
                                                                    }
          
                                                                    break;
                                                                default:
                                                                    break;
                                                            }
                                                            string __srcFullUrl = null;
                                                            if (__srcUrl.IndexOf(':',0,8) == -1)
                                                            {
                                                                __srcFullUrl = commonHTML.GetAbsoluteUri(this.___URL, this.___baseUrl, __srcUrl);
                                                            }
                                                            else
                                                            {
                                                                __srcFullUrl = string.Copy(__srcUrl);

                                                            }
                                                            //bool IsCached = commonMCS.MCSImageFdr.MCSDownloadManager.IsContentExistsOnCache(__srcFullUrl);

                                                            if ((_fileType == CHtmlFileType.JavaScript
                                                                || _fileType == CHtmlFileType.Css
                                                                || _fileType == CHtmlFileType.VBScript
                                                                || _fileType == CHtmlFileType.Json))
                                                            {
                                                                // Download beforehand

                                                                if (_fileType != CHtmlFileType.Css)
                                                                {
                                                                    if (_fileType == CHtmlFileType.JavaScript || _fileType == CHtmlFileType.Json || _fileType == CHtmlFileType.VBScript)
                                                                    {
                                                                        /* ============================================================
                                                                         *     Comment off if always donload
                                                                          ==============================================================*/
         
                                                                        
                                                                        if (__attributeType.Length > 0)
                                                                        {
                                                                            switch (__attributeType)
                                                                            {
                                                                                case "prefetch":
                                                                                case "psa_prefetch":
                                                                                case "psa-prefetch":
                                                                                    goto LineContinueAnalysis;


                                                                            }
                                                                        }

                                                                    }
                                                                    int __Waits = 100;
                                                                    commonHTML.checkHTMLScriptElementAsycAndDefer(tagElement);
                                                                    if (tagElement.___async == false && tagElement.___defer == false )
                                                                    {
                                                                        // =============================================
                                                                        // No Async and Defer will be processed as direct.
                                                                        // =============================================
                                                                        try
                                                                        {

                                                                            ___downloaddirectly(__srcFullUrl, tagElement.tagName, __attributeType, tagElement.tagName, this.___URL, __srcCharSet, CHtmlThreadPoolQueueObjectType.UrlScript, __srcUrl, tagElement, 0, __UrlSourceType, false);
                                                                        }
                                                                        catch
                                                                        {
                                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                                            {
                                                                                commonLog.LogEntry("Direct Download Error");
                                                                            }
                                                                        }
                                                                        goto LineContinueAnalysis;

                                                                    }
                                                                    else
                                                                    {
                                                                        // =============================================
                                                                        // Header Script Element shall be processed in ThreadPool
                                                                        // =============================================
                                                                        __Waits = 0;

                                                                        __IsEnqueued = this.___downloadviaQueue(__srcFullUrl, tagElement.tagName, tagElement.media, __attributeType, this.___URL, __srcCharSet, CHtmlThreadPoolQueueObjectType.UrlScript, __srcUrl, tagElement, __Waits, __UrlSourceType, false);
                                                                        this.___setEnqueuedCounter(__IsEnqueued, CHtmlThreadPoolQueueObjectType.UrlScript);

                                                                        goto LineContinueAnalysis;

                                                                    }

                                                                }
                                                                else if (_fileType == CHtmlFileType.Css)
                                                                {
                                                                    if (this.___IsHtmlBodyTagPassed == false)
                                                                    {

                                                                        // Only Before Body Tag Passed allowd in enqueue
                                                                        __IsEnqueued = this.___downloadviaQueue(__srcFullUrl, tagElement.tagName, tagElement.media, "stylsheet", this.___URL, __srcCharSet, CHtmlThreadPoolQueueObjectType.UrlStyleSheet, __srcUrl, tagElement, 0, __UrlSourceType, false);
                                                                        this.___setEnqueuedCounter(__IsEnqueued, CHtmlThreadPoolQueueObjectType.UrlStyleSheet);

                                                                    }
                                                                    else
                                                                    {
                                                                        try
                                                                        {
                                                                            ___downloaddirectly(__srcFullUrl, tagElement.tagName, tagElement.media, __attributeType, this.___URL, __srcCharSet, CHtmlThreadPoolQueueObjectType.UrlStyleSheet, __srcUrl, tagElement, 0, __UrlSourceType, false);
                                                                        }
                                                                        catch
                                                                        {
                                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                                            {
                                                                                commonLog.LogEntry("Direct Stylesheet Downloading Error");
                                                                            }
                                                                        }
                                                                        goto LineContinueAnalysis;

                                                                    }
                                                                    goto LineContinueAnalysis;

                                                                }
                                                                else
                                                                {
                                                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                                    {
                                                                        commonLog.LogEntry("Unknown File Process Type {0}", _fileType.ToString());
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                if (tagElement.___elementTagType == CHtmlElementType.LINK)
                                                                {
                                                                    goto LineContinueAnalysis;
                                                                }
                                                                /*
                                                                if (commonMCS.MCSGeneralFdr == null || !commonMCS.MCSGeneralFdr.EnableImageDownloadOnBrowser)
                                                                {
                                                                    goto LineContinueAnalysis;
                                                                }
                                                                */
                                                                try
                                                                {
                                                                    if (this.___images.ContainsKey(__srcFullUrl) && tagElement.___IsElementVisible == true)
                                                                    {
                                                                        if (tagElement.___elementTagType == CHtmlElementType.IMG || tagElement.___elementTagType == CHtmlElementType.INPUT || tagElement.___elementTagType == CHtmlElementType.OBJECT)
                                                                        {
                                                                            if (tagElement.___offsetWidth == 0 || tagElement.___offsetHeight == 0)
                                                                            {
                                                                                // ----------------------------------
                                                                                // Size may be zero because parent
                                                                                // uses overflow = 'hidden'
                                                                                // ----------------------------------
                                                                                if (tagElement.___style != null && string.IsNullOrEmpty(tagElement.___style.___OverFlowFromParent) == false)
                                                                                {

                                                                                    goto LineContinueAnalysis;
                                                                                }
                                                                                Image ___imgCache = null;
                                                                                this.___images.TryGetValue(__srcFullUrl, out ___imgCache);
                                                                                if (___imgCache != null)
                                                                                {

                                                                                    ___resetElementSizeByImageSize(tagElement, ___imgCache);
                                                                                }
                                                                            }
                                                                        }
                                                                        goto LineContinueAnalysis;
                                                                    }
                                                                    if (tagElement.___style.___styleSizeMode != CHtmlSizeModeType.Both) 
                                                                    {
                                                                        ___downloaddirectly(__srcFullUrl, tagElement.tagName, null, "image", this.___URL, null, CHtmlThreadPoolQueueObjectType.UrlImage, __srcUrl, tagElement, 0, __UrlSourceType, false);
                                                                        //goto LineContinueAnalysis;
                                                                    }
                                                                    else
                                                                    {
                                                                      

                                                                        __IsEnqueued = this.___downloadviaQueue(__srcFullUrl, tagElement.tagName, null, "image", this.___URL, null, CHtmlThreadPoolQueueObjectType.UrlImage, __srcUrl, tagElement, 0, __UrlSourceType, false);
                                                                        //goto LineContinueAnalysis;
                                                                    }
                                                                    if (tagElement.___elementTagType == CHtmlElementType.IMG || tagElement.___elementTagType == CHtmlElementType.INPUT)
                                                                    {
                                                                        tagElement.___style.___IMG_FullURL = __srcFullUrl;
                                                                    }
                                                                }
                                                                catch (Exception ex)
                                                                {
                                                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                                    {
                                                                        commonLog.LogEntry("Download Queue", ex);
                                                                    }
                                                                }


                                                            }
                                                            if (__IsEnqueued)
                                                            {

                                                            }
                                                        }
                                                        else
                                                        {
                                                            // Means Object is not downloable tagtype
                                                            if (string.IsNullOrEmpty(tagElement.___style.___BackgroundImage) == false)
                                                            {
                                                                // Means object has background Image
                                                                //commonLog.LogEntry("{0} has {1}", tagElement, tagElement.___style.BackgroundImage);


                                                            }
                                                        }

                                                        // ========================================================
                                                        // Download Contents End
                                                        // ========================================================
                                                        #endregion
                                                    }


                                                    if (tagElement.___elementTagType == CHtmlElementType.A && tagElement.___attributes.Count == 1)
                                                    {
                                                        if (tagElement.___attributes.ContainsKey("name") == true)
                                                        {
                                                            int __nextAStart = this.GetStringPositionInHtmlBuilder("<A", this.___curHTMLParsePosition);
                                                            int __nextAEnd = this.GetStringPositionInHtmlBuilder("</A", this.___curHTMLParsePosition);

                                                            if (__nextAStart > 0 && __nextAEnd < __nextAStart)
                                                            {
                                                                __ImmediateClose = false;
                                                            }
                                                            else if (__nextAStart > 0 && __nextAEnd > __nextAStart)
                                                            {
                                                                __ImmediateClose = true;
                                                            }
                                                            else
                                                            {
                                                                __ImmediateClose = true;
                                                            }

                                                        }
                                                    }
                                                LineContinueAnalysis:
                                                    if (tagElement.___elementTagType == CHtmlElementType.DOCTYPE)
                                                    {
                                                        tagElement.___TagCloseEndPosition = ___curHTMLParsePosition;
                                                        tagElement.___TagCloseStartPosition = __ElementStartPosition;
                                                        tagElement.___ClosedReson = CHtmlTagClosedReasonType.Direct;
                                                        goto ContinueToNextCharacter;
                                                    }
                                                if (this.___IsDomModeAnyHTML() == true && commonHTML.elementTagTypesReadThroughForInnnerTextDictionary.ContainsKey(tagElement.___elementTagType) == true)
                                                    {
                                                        __IsNonInnerTextChar = true;
                                                        if ((tagElement.___elementTagType == CHtmlElementType.SCRIPT   || tagElement.___elementTagType == CHtmlElementType.STYLE || tagElement.___elementTagType == CHtmlElementType.COMMENT) || (tagElement.___elementTagType == CHtmlElementType.NOSCRIPT))
                                                        {
                                                            bool ___useNextCharAfterProcess = false;
                                                            /*
#if DEBUG
                                                            if (tagElement.___elementTagType == CHtmlElementType.NOSCRIPT)
                                                            {
                                                                commonLog.LogEntry("HERE");
                                                            }
#endif
                                                             */
                                                            // =============================================================
                                                            // If it is IE <COMMENT> tag are comment out.
                                                            // If Not IE child will be parsed. and node are created as normal
                                                            // ==============================================================
                                  

                                                            string ____endingTagScript = "</" + tagElement.tagName;
                                                      
                                                            System.Text.StringBuilder _sbStyleOrScriptTextBuilderPartial = new StringBuilder();
                                                            int findPoint = GetStringPositionInHtmlBuilder(____endingTagScript, this.___curHTMLParsePosition, -1, _sbStyleOrScriptTextBuilderPartial);
                                                            if (findPoint != -1)
                                                            {

                                                                if (_sbStyleOrScriptTextBuilderPartial.Length > 1)
                                                                {
                                                                    int ___removedCharacterCount = 0;
                                                                    if (_sbStyleOrScriptTextBuilderPartial[0] == '>')
                                                                    {
                                                                        if (tagElement.___elementTagType == CHtmlElementType.SCRIPT)
                                                                        {
                                                                            _sbStyleOrScriptTextBuilderPartial[0] = ' ';
                                                                            ___removedCharacterCount++;
                                                                        }
                                                                        else
                                                                        {

                                                                            _sbStyleOrScriptTextBuilderPartial.Remove(0, 1);
                                                                            ___removedCharacterCount++;
                                                                        }
                                                                    }
                                                                    if (_sbStyleOrScriptTextBuilderPartial[_sbStyleOrScriptTextBuilderPartial.Length - 1] == '<')
                                                                    {
                                                                        if (tagElement.___elementTagType == CHtmlElementType.SCRIPT)
                                                                        {
                                                                            _sbStyleOrScriptTextBuilderPartial[_sbStyleOrScriptTextBuilderPartial.Length - 1 ]= ' ';
                                                                            ___removedCharacterCount++;
                                                                            if (___removedCharacterCount == 2 && _sbStyleOrScriptTextBuilderPartial.Length == 2)
                                                                            {
                                                                               
                                                                                _sbStyleOrScriptTextBuilderPartial = new StringBuilder();
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            _sbStyleOrScriptTextBuilderPartial.Remove(_sbStyleOrScriptTextBuilderPartial.Length - 1, 1);
                                                                            ___removedCharacterCount++;
                                                                        }
                                                                    }
                                                                    //commonLog.LogEntry("{0} : {1}", tagElement.tagName, _sbStyleOrScriptTextBuilder.ToString());
                                                                }
                                                                if (findPoint > -1)
                                                                {
                                                                    if (this.___HtmlBuilder[findPoint] == '<')
                                                                    {
                                                                        this.___curHTMLParsePosition = findPoint - 1;
                                                                        ___useNextCharAfterProcess = true;
                     
                                                                    }
                                                                    else
                                                                    {

                                                                    }
                                                                }
                                                                tagElement.___TagCloseStartPosition = findPoint;
                                                                tagElement.___TagCloseEndPosition = findPoint + 8;
                                                                if (tagElement.___ClosedReson == CHtmlTagClosedReasonType.Open)
                                                                {
                                                                    tagElement.___ClosedReson = CHtmlTagClosedReasonType.Direct;
                                                                }
              
                                                                #region DirectProcessSection
                                                                if (this.___IsDomModeFullParseMode() == true)
                                                                {
                                                                    try
                                                                    {
                                                                        
                                                                        switch (tagElement.___elementTagType)
                                                                        {
                                                                            case CHtmlElementType.STYLE:
                                                                                {
                                                                                    if (tagElement.___IsNoScriptBlock == true)
                                                                                    {
                                                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 10)
                                                                                        {
                                                                                            commonLog.LogEntry("Style found inside Noscript Skip");

                                                                                        }
                                                                                        goto DirectStyleScriptTagProcessDone;
                                                                                    }
                                                                                    if (tagElement.___attributes.ContainsKey("media") == true)
                                                                                    {
                                                                                        tagElement.___MediaQueryNode = new CHtmlMediaQueryNode(CHtmlMediaQueryNodeType.RootNode);
                                                                                        try
                                                                                        {
                                                                                            tagElement.___MediaQueryNode.OwnerElementType = MediaQueryOwnerElementType.StyleElement;
                                                                                            tagElement.___MediaQueryNode.Text = commonHTML.GetElementAttributeInString(tagElement, "media");
                                                                                            if (tagElement.___MediaQueryNode.Result == CHtmlMediaQueryResult.Fail)
                                                                                            {
                                                                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                                                                                {
                                                                                                    commonLog.LogEntry("[Style MediaQuery] {0} Dynamic Style Element download will be skip MediaQueries", tagElement.___MediaQueryNode.Text);
                                                                                                }
                                                                                                goto DirectStyleScriptTagProcessDone;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                                                                                {
                                                                                                    commonLog.LogEntry("[Style MediaQuery] {0} Dynamic Style Element will be processed", tagElement.___MediaQueryNode.Text);
                                                                                                }

                                                                                            }
                                                                                        }
                                                                                        catch (Exception ex)
                                                                                        {
                                                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                                                                            {
                                                                                                commonLog.LogEntry("Style media Error", ex);
                                                                                            }

                                                                                        }
                                                                                    }

                                                                                    this.___processStyleTagSheetString(tagElement.___TagOpenEndPosition + 1, this.___curHTMLParsePosition - 7, tagElement, ref  _sbStyleOrScriptTextBuilderPartial);
                                                                                }
                                                                               
                                                                                break;

                                                                            case CHtmlElementType.SCRIPT:
                                                                                {
                                                                                    if (tagElement.___IsNoScriptBlock == true)
                                                                                    {
                                                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 10)
                                                                                        {
                                                                                            commonLog.LogEntry("Script found inside Noscript Skip");
                                                                                        }
                                                                                        goto DirectStyleScriptTagProcessDone;
                                                                                    }

                                                                                        CHtmlElement cscriptElement = tagElement;
                                                                                        if (cscriptElement != null && cscriptElement.___elementTagType == CHtmlElementType.SCRIPT && cscriptElement.___attributes.ContainsKey("src") == false && cscriptElement.___attributes.ContainsKey("href") == false)
                                                                                        {
                                                                                            string __language = cscriptElement.language;
                                                                                            if (cscriptElement.___TagOpenEndPosition == -1)
                                                                                            {
                                                                                                if (cscriptElement.___TagOpenStartPosition == -1)
                                                                                                {
                                                                                                    goto DirectStyleScriptTagProcessDone;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    goto DirectStyleScriptTagProcessDone;
                                                                                                }
                                                                                            }
                                                                                            if (commonHTML.isTemplateScriptBlock(cscriptElement.type))
                                                                                            {
                                                                                                this.CreateTemplateScriptBlockEntry(cscriptElement, _sbStyleOrScriptTextBuilderPartial);
                                                                                                cscriptElement.value = _sbStyleOrScriptTextBuilderPartial.ToString();
                                                                                                goto DirectStyleScriptTagProcessDone;
                                                                                            }
                                                                                            if (this.___currentParentElement.___elementTagType == CHtmlElementType.SCRIPT)
                                                                                            {
                                                                                                // CurrentParent Tag is Scrip Tag
                                                                                                // Script may delete script node after execution
                                                                                                // we should close the script tag now
                                                                                                this.___closeElementWithTagString("SCRIPT", tagElement.___TagCloseStartPosition, tagElement.___TagCloseEndPosition, false, this.___currentParentElement);
                                                                                                // Now move ___curHTMLParsePosition cursor to after close script tag
                                                                                                int EndScriptCheckCount = 0;
                                                                                                for (int posScriptTagEnd = findPoint; posScriptTagEnd < this.___HtmlBuilderLength; posScriptTagEnd++)
                                                                                                {
                                                                                                    if (EndScriptCheckCount > 16)
                                                                                                    {
                                                                                                        break;
                                                                                                    }
                                                                                                    if (this.___HtmlBuilder[posScriptTagEnd] == '>')
                                                                                                    {
                                                                                                        this.___curHTMLParsePosition = posScriptTagEnd;
                                                                                                        ___useNextCharAfterProcess = true;
                                                                                                        break;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        EndScriptCheckCount++;
                                                                                                    }
                                                                                                }

                                                                                            }
                                                                                            this.___processScriptElementScript(cscriptElement, cscriptElement.___TagOpenEndPosition + 1, this.___curHTMLParsePosition - 8, tagElement.language, ref  _sbStyleOrScriptTextBuilderPartial);
                                                                                            if (___DocumentWriteBuilder != null)
                                                                                            {
                                                                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 50)
                                                                                                {
                                                                                                    commonLog.LogEntry("calling MergeDocumentWriteBuilder({0}) with {1} char string", this.___curHTMLParsePosition.ToString(), ___DocumentWriteBuilder.Length);
                                                                                                }
                                                                                                try
                                                                                                {
                                                                                                    this.MergeDocumentWriteBuilder(this.___curHTMLParsePosition);
                                                                                                    this.___HtmlBuilderLength = this.___HtmlBuilder.Length;
                                                                                                }
                                                                                                catch { }
                                                                                            }

                                                                                        }



                                                                                    }

                                                                                    _sbStyleOrScriptTextBuilderPartial = null;
                                                                                    _sbTagNameBuilder = null;
                                                                                    _sbTagAttributesBuilder = null;
                                                                                    ___ParseMode = CHtmlParseModeType.None;
                                                                                    IsWithInAttributeQuote = false;
                                                                                    AttributeQuoteStartChar = "";
                                                                                    if (___useNextCharAfterProcess == true)
                                                                                    {
                                                                                        goto NextChar;
                                                                                    }
                                                                                    break;
                                                                                

                                                                        }
                                                                    }
                                                                    catch (Exception exStyleScript)
                                                                    {
                                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                                                                        {
                                                                            commonLog.LogEntry("Direct Process Style or Script Block Error", exStyleScript);
                                                                        }
                                                                    }
                                                                }




                                                            DirectStyleScriptTagProcessDone:

                                                                #endregion
                                                                __ImmediateClose = false;
                                                                goto NextChar;
                                                            }
                                                            else
                                                            {
                                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
                                                                {
                                                                    commonLog.LogEntry("GetStringPositionInHtmlBuilder failed {0}", tagElement.ToString());
                                                                }
                                                              
                                                            }

                                                        }
                                                    }
                                                    else
                                                    {
                                                        __IsNonInnerTextChar = false;
                                                    }
                                                
                                                    if (__ImmediateClose == false)
                                                    {
                                                        if (tagElement.___elementTagType == CHtmlElementType.COLGROUP || tagElement.___elementTagType == CHtmlElementType.COL)
                                                        {
                                                            __ImmediateClose = IsColGroupOrColElementMustBeImmdiateClose(tagElement);
                                                        }
                                                    }

                                                    //commonLog.LogEntry("{0} {1} [{2}]", _sbTagNameBuilder, __strAttributes, tagElement.attributes.Count);
                                                    if (__ImmediateClose == false)
                                                    {
                                                        if (commonHTML.elementTagTypesCanEndWithNoSlashWithoutAnyFollowingInfoSortedList.ContainsKey(tagElement.___elementTagType) == true)
                                                        {
                                                            __ImmediateClose = true;
                                                        }
                                                    }
                                                    if (__ImmediateClose == false)
                                                    {
                                                        if (commonHTML.elementTagTypesMayCloseImmediatelyIfNoClosingTagExistsSortedList.ContainsKey(tagElement.___elementTagType) == true)
                                                        {
                                                            string ____endingTag = "</" + tagElement.tagName + ">";
                                                            if (this.GetStringPositionInHtmlBuilder(____endingTag, this.___curHTMLParsePosition, 500, null) == -1)
                                                            {
                                                                __ImmediateClose = true;
                                                            }
                                                        }

                                                    }


                                                    if (__ImmediateClose)
                                                    {
                                                        if (tagElement.___IsTagImmediateClosed == false)
                                                        {

                                                            this.___closeElementWithTagString(tagElement.tagName, __ElementStartPosition, ___curHTMLParsePosition, false, tagElement);
                                                            tagElement.___IsTagImmediateClosed = true;
                                                        }
                                                        //commonLog.LogEntry("{0} immediate closed", _sbTagNameBuilder);
                                                    }
                                                    if (this.___IsDomModeFullParseMode() && tagElement.___IsTagImmediateClosed)
                                                    {
                                                        if (this.___IsElementCreationNeedsToBeDynamic == false)
                                                        {
                                                            if (commonHTML.elementTagTypesNoStylesheetLookupSortedList.ContainsKey(tagElement.___elementTagType) == false)
                                                            {
                                                                if (tagElement.___isCalculateElementBoundsCalled == false)
                                                                {
                                                                    this.___calculateElementBounds(tagElement);
                                                                }
                                                            }
                                                        }
                                                    }

                                                }
                                            ContinueToNextCharacter:
                                                _sbTagNameBuilder = null;
                                                _sbTagNameCaseSensitiveBuilder = null;
                                                _sbTagAttributesBuilder = null;
                                                ___ParseMode = CHtmlParseModeType.None;
                                                goto NextChar;

                                        }
                                        break;

                                    default:
                                        {
                                            if (___ParseMode == CHtmlParseModeType.TagAttribute)
                                            {
                                                if (c_0 == '\'' || c_0 == '\"')
                                                {
                                                    if (IsWithInAttributeQuote == false)
                                                    {
                                                        bool ___IsCharCanbeTreatAsQuote = false;
                                                        bool ___QuoteTestSuccess = false;
                                                        
                                                        for (int ___quoteCheck = this.___curHTMLParsePosition + 1; ___quoteCheck < this.___curHTMLParsePosition + 50; ___quoteCheck++)
                                                        {
                                                            if (___quoteCheck >= this.___HtmlBuilderLength  - 1)
                                                                break;
                                                            char quoteNext = this.___HtmlBuilder[___quoteCheck];
                                                            if (quoteNext == '>')
                                                            {
                                                                // Following Next is '>' should be treated as tag end
                                                                ___IsCharCanbeTreatAsQuote = false;
                                                                IsWithInAttributeQuote = false;
                                                                AttributeQuoteStartChar = "";
                                                                ___QuoteTestSuccess = true;
                                                                break;
                                                            }
                                                            else if (quoteNext == c_0)
                                                            {
                                                                /// src="" or src=''
                                                                ___IsCharCanbeTreatAsQuote = true;
                                                                ___QuoteTestSuccess = true;
                                                                break;
                                                            }
                                                            else if (Array.IndexOf(commonHTML.CharSpaceCrLfTabZentakuSpace, quoteNext) > -1)
                                                            {
                                                                continue;
                                                            }
                                                            else if (Char.IsLetterOrDigit(quoteNext))
                                                            {
                                                                ___IsCharCanbeTreatAsQuote = true;
                                                                ___QuoteTestSuccess = true;
                                                                break;
                                                            }
                                                            else if (quoteNext == '.' || quoteNext == ',' || quoteNext == '(' || quoteNext == '#' || quoteNext == '@' || quoteNext == '/' || quoteNext == '[' || quoteNext == '?')
                                                            {
                                                                ___IsCharCanbeTreatAsQuote = true;
                                                                ___QuoteTestSuccess = true;
                                                                break;
                                                            }
                                                        }
                                                        if (___QuoteTestSuccess == false)
                                                        {
                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                            {
                                                                commonLog.LogEntry("HTML Erorr : Invalid Attribute Quote Found! {0}", this.GeRawHTMLStringClean(this.___curHTMLParsePosition - 5, 16));
                                                            }
                                                        }
                                                        if (___IsCharCanbeTreatAsQuote)
                                                        {
                                                            IsWithInAttributeQuote = true;
                                                            AttributeQuoteStartChar = c_0.ToString();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (c_0.ToString() == AttributeQuoteStartChar)
                                                        {
                                                            IsWithInAttributeQuote = false;
                                                            AttributeQuoteStartChar = "";
                                                        }
                                                    }
                                                }
                                            }

                                            if (___ParseMode == CHtmlParseModeType.TagName && (Array.IndexOf(commonHTML.CharSpaceCrLfTabZentakuSpace, c_0) > -1))
                                            {
                                                ___ParseMode = CHtmlParseModeType.TagAttribute;
                                                if (_sbTagAttributesBuilder != null)
                                                {
                                                    _sbTagAttributesBuilder = null;
                                                }
                                                _sbTagAttributesBuilder = new System.Text.StringBuilder();
                                            }
                                            switch (___ParseMode)
                                            {
                                                case CHtmlParseModeType.TagName:
                                                    if (_sbTagNameBuilder != null)
                                                    {
                                                        if (commonHTML.FasterIsWhiteSpaceLimited(c_0) == false)
                                                        {
                                                            _sbTagNameCaseSensitiveBuilder.Append(c_0);
                                                            if (c_0 >= 'a' && c_0 <= 'z')
                                                            {
                                                                _sbTagNameBuilder.Append(commonHTML.FasterToUpper(c_0));
                                                            }
                                                            else
                                                            {
                                                                _sbTagNameBuilder.Append(c_0);
                                                            }
                                                        }
                                                    }
                                                    break;
                                                case CHtmlParseModeType.TagAttribute:
                                                    if (commonHTML.FasterIsWhiteSpaceLimited(c_0) == true || c_0 == '\0' || c_0 == '\b')
                                                    {   //Cr or LF should converted to space
                                                        // Note IsWhiteSpace is fast method.
                                                        _sbTagAttributesBuilder.Append(' ');
                                                    }
                                                    else
                                                    {
                                                        _sbTagAttributesBuilder.Append(c_0);
                                                    }
                                                    break;
                                                case CHtmlParseModeType.Comment:
                                                    _sbCommentBuilder.Append(c_0);
                                                    break;
                                                case CHtmlParseModeType.InnerText:
                                                case CHtmlParseModeType.None:
                                                    if (this.___documentElement  == null)
                                                        break;
                                                    if (c_0 == 59)
                                                    {
                                                        System.Text.StringBuilder sbSymbol = new StringBuilder(commonHTML.StringBuilder_BUFFER_Size_For_CSS_Tag);
                                                        for (int symbolpos = ___curHTMLParsePosition ; symbolpos  > ___curHTMLParsePosition - 10; symbolpos--)
                                                        {
                                                            char cym = this.___HtmlBuilder[symbolpos];
                                                            if (cym == '=' ||  cym == '?' || cym == ':' || cym == ' '  || cym == '.' || cym == '\'' || cym =='\"' ||  cym =='\\' ||  cym =='/')
                                                            {
                                                                goto SymbolCheckDone;
                                                            }
                                                            else if (cym == ';')
                                                            {
                                                                if (symbolpos == ___curHTMLParsePosition)
                                                                {
                                                                    sbSymbol.Append(cym);
                                                                }
                                                                else
                                                                {
                                                                    goto SymbolCheckDone;
                                                                }
                                                            }
                                                            else if (cym == '&')
                                                            {
                                                                sbSymbol.Append(cym);
                                                                char[] csSymolArray = sbSymbol.ToString().ToCharArray();
                                                                Array.Reverse(csSymolArray);

                                                                // ==========================================================
                                                                // D
                                                                // ==========================================================
                                                                string strSymbol = new string(csSymolArray);

                                                                c_0 = commonHTML.GetHTMLCharStringHTMLString(strSymbol, '?');
                                                                int charBack = ___curHTMLParsePosition - symbolpos;
                                                                if (_sbInnerTextBuilder != null)
                                                                {
                                                                    if (_sbInnerTextBuilder.Length < charBack)
                                                                    {
                                                                        commonLog.LogEntry("BUGUBUG!  SymolCoversion may has problem  : {0} Position : {1}. just add to text.", strSymbol, ___curHTMLParsePosition);
                                                                        goto SymbolCheckDone;
                                                                    }
                                                                    if (_sbInnerTextBuilder[_sbInnerTextBuilder.Length - charBack] == '&')
                                                                    {
                                                                        _sbInnerTextBuilder.Remove(_sbInnerTextBuilder.Length - charBack, charBack);
                                                                        _sbInnerTextBuilder.Append(c_0);
                                                                        if (string.Equals(strSymbol, "&nbsp;", StringComparison.Ordinal) == true)
                                                                        {
                                                                            if (_sbInnerTextNBSPPointList == null)
                                                                            {
                                                                                _sbInnerTextNBSPPointList = new System.Collections.Generic.SortedList<int, char>();
                                                                            }
                                                                            _sbInnerTextNBSPPointList[_sbInnerTextBuilder.Length] = ' ';
                                                                        }
                                                                        goto NextChar;
                                                                    }
                                                                    else
                                                                    {
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    goto NextChar;
                                                                }
                                                                goto NextChar;
                                                            }
                                                            else
                                                            {
                                                                sbSymbol.Append(cym);
                                                                continue;

                                                            }
                                                            
                                                        }
                                                        goto SymbolCheckDone;
                                                    }
                                            SymbolCheckDone:
                                                    if (this.___is1stHtmlTagFound == true)
                                                    {
                                                        if (_sbInnerTextBuilder != null)
                                                        {
                                                            if (this.___tagSkipMode == CHtmlTagReadSkipModeType.none)
                                                            {
                                                                _sbInnerTextBuilder.Append(c_0);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (this.___tagSkipMode == CHtmlTagReadSkipModeType.none)
                                                            {
                                                                _sbInnerTextBuilder = new StringBuilder();
                                                                _sbInnerTextBuilder.Append(c_0);
                                                            }
                                                        }
                                                    }
                                                    break;
                                            }
                                        }
                                        break;
                                }
                                #endregion

                               

                                  
                                
							NextChar:
								___curHTMLParsePosition++;
								//this._curLine = "InterlockIncrement";
								//this._curLine = "Fetching Next Character";
							}
							//commonLog.LogEntry("Parse {0} {1}",___PreviousParseStartPosition,___curHTMLParsePosition);
                            if (this.___IsHtmlResponseCompleted && ___curHTMLParsePosition == this.___HtmlBuilderLength)
								break;
						}
						else
						{
                            if (this.___IsNavigationStopped == true || this.___Disposing || this == null || this.___IsThreadAbortOccurred == true)
							{
								goto ___parseDocumentCleanUp;
							}
							if(___IsHtmlResponseCompleted == false)
							{
                                if (___curHTMLParsePosition < this.___HtmlBuilderLength)
								{
									continue;
								}

								if(this.___ThreadParseSuspendEvent != null)
								{
								
			

								}
							}
							else
							{
							
								// THIS SECTION IS REQUIRED TO VERY SHORT HTML DOCUMENTS
                                if (___curHTMLParsePosition < this.___HtmlBuilderLength  - 1)
								{
									continue;
								}
								if(this.___IsHtmlResponseCompleted == true)
								{
									if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
									{
                                        commonLog.LogEntry("Parse Done With {0} {1} {2} Completed: {3}", ___PreviousParseStartPosition, ___curHTMLParsePosition, this.___HtmlBuilderLength , this.___IsHtmlResponseCompleted);
									}
									break;
								}
								else
								{
									if(this.___ThreadParseSuspendEvent!= null)
									{
										if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
										{
											commonLog.LogEntry("Waiting IsHtmlResponseCompleted becomes true....");
										}
										this.___ThreadParseSuspendEvent.WaitOne(100, false);
										if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
										{
											commonLog.LogEntry("Waiting IsHtmlResponseCompleted becomes true....");
										}
									}
									else
									{
										if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
										{
											commonLog.LogEntry("Waiting IsHtmlResponseCompleted becomes true...., but emptry event");
										}

									}
								}
							}
						}
					}
				}
				catch(System.Threading.ThreadAbortException)
				{
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 50)
					{
						commonLog.LogEntry("ParseThread ThreadAbort : " + this.___UrlShortName  + "...");
					}
					this.___IsNavigationStopped = true;
					this.___IsThreadAbortOccurred = true;
                    this.___Disposing = true;
					goto ___parseDocumentCleanUp;
				}
				catch(Exception ex)
				{
					if(ex is System.Threading.ThreadAbortException)
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 50)
						{
							commonLog.LogEntry("ParseThread ThreadAbort : " + this.___UrlShortName  + "...");
						}
						this.___IsNavigationStopped = true;
						this.___IsThreadAbortOccurred = true;
                        this.___Disposing = true;
						goto ___parseDocumentCleanUp;
					}

					if(this.___IsThreadAbortOccurred == false)
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
						{
							commonLog.LogEntry("___parseDocument", ex);
						}
					}
				}

				if(this.___IsDomModeAnyHTML()  && this.___documentElement  != null &&  this.___documentElement.___ClosedReson == CHtmlTagClosedReasonType.Open)
				{
                    this.___closeRootElementIfOpen();
				}

                if (this.___IsDomModeFullParseMode() == true && this != null && this.___Disposing == false)
				{
					if(this.___NoProgressReport == false && this.___IsParentWindowUnicusWebBrower == true)
					{
						//Threading.UnicusThreadPool.MainProcessProgress = 1F;
						//___LastProgressStatus = 1;
						//commonGraphics.RefreshStatusBarMain();
					}
					if(this.___documentElement != null )
					{

                        if (this.___documentElement.___style.___IsBackgroundColorSpecified == true)
                        {
                            this.___BackgroundSysColor = this.___documentElement.___style.___BackgroundSysColor;
                        }
                        if (this.___documentElement.___style.___IsForegroundSysColorSpecified == true)
                        {
                            this.___ForegroundSysColor = this.___documentElement.___style.___ForegroundSysColor;
                        }
						
					}
                    if (this.___body != null )
                    {
                        if (this.___body.___style.___IsBackgroundColorSpecified == true)
                        {
                            this.___BackgroundSysColor = this.___body.___style.___BackgroundSysColor;
                        }
                        if (this.___body.___style.___IsForegroundSysColorSpecified == true)
                        {
                            this.___ForegroundSysColor = this.___body.___style.___ForegroundSysColor;
                        }
                    }
                    else
					{

						this.___BackgroundSysColor = Color.White;
						//this.ForegroundColor = Color.Black;
					}

                    /*
                    try
                    {
                        if (this.___documentDomType == CHtmlDomModeType.HTMLDOM || this.___documentDomType == CHtmlDomModeType.HTMLDOM_NoGUI)
                        {
                            if (this.___IsThreadAbortOccurred == false && this.Disposing == false)
                            {
                                ___PerformElementParentReferenceCheck();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        commonLog.LogEntry("  ___PerformElementParentReferenceCheck()", ex);
                    }
                     */
                    




					// ###########################################################################################
                    #region ProcessOnreadyComplete

                    if (this.___Disposing == false && this.___IsDomModeFullParseMode() && this.___IsThreadAbortOccurred == false)
					{

                        if (commonHTML.CompileAsyncScriptAtDoucmentLoaded == true)
                        {
                            if (this.___DeferredEnqueuedScriptCount > 0)
                            {

                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                {
                                    commonLog.LogEntry("There is async scripts needs to process : {0}", this.___DeferredEnqueuedScriptCount);
                                }
                                try
                                {
                                    this.___processDocumentEnqueuedScripts(CHtmlEnqeueStatusType.ProcessQueue);
                                }
                                catch { }
                            }
                        }
                        if (this.___readyStateType != CHtmlReadytStateType.loading)
						{
                            ___readyStateType = CHtmlReadytStateType.loading;
						}
                        // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                        //                                    [Caution!!!]
                        // firing document.readystatechange HTML_DOM_LoadEventTester.htm:27
                        // firing window.DOMContentLoad HTML_DOM_LoadEventTester.htm:11
                        // firing document.readystatechange HTML_DOM_LoadEventTester.htm:27
                        // firing window.onload 
                        // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                        this.___event.___resetToDefaults();
						int __MethodCalled = 0;
						//int __OnReadyStateChangeSuccess = 0;
						DateTime dtOnReadyStageChangeStart = DateTime.Now;
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                        {
                            commonLog.LogEntry("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                            commonLog.LogEntry("entering final load procedure process : {0}", this.___UrlShortName);
                            commonLog.LogEntry("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                        }

                        bool ___IsOneOfDOMContetLoadFuctionExecuted = false;
                        bool ___IsOneOfReadyStateChangeFuctionExecuted = false;
                        if (___IsOneOfReadyStateChangeFuctionExecuted == true)
                        { }
                        if (this.___WindowDOMContentLoadedFunctionWeakReference != null)
                        {
                            if(this.___WindowDOMCotentLoadedFunctionQueue != null)
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                {
                                    commonLog.LogEntry("window.DOMContentLoaded has queued functions...");
                                }
                                int qCount = this.___WindowDOMCotentLoadedFunctionQueue.Count;
                                try
                                {
                                    for (int qi = 0; qi < qCount; qi++)
                                    {
                                        System.WeakReference funcref = this.___WindowDOMCotentLoadedFunctionQueue.GetByIndex(0) as System.WeakReference;
                                        if (funcref != null)
                                        {
                                            // System.WeakReference funcref in this.___WindowDOMCotentLoadedFunctionQueue.TryGetValue()
                                            this.___CalledFunctionHashtable[funcref.Target] = funcref.Target;
                                            this.___PerformDocumentOrWindowEventFunction(funcref.Target, "DomContentLoaded", null, this.___event, false, "window DomContentLoaded");
                                            __MethodCalled++;
                                        }
                                        this.___WindowDOMCotentLoadedFunctionQueue.RemoveAt(0);
                                        qCount = this.___WindowDOMCotentLoadedFunctionQueue.Count;
                                        ___IsOneOfDOMContetLoadFuctionExecuted = true;
                                    }
                                }catch(Exception exLoop)
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                    {
                                        commonLog.LogEntry("window.DOMContentLoaded has queued functions loop error", exLoop);
                                    }
                                }
                                this.___WindowDOMCotentLoadedFunctionQueue.Clear();
                            }
                            if (this.___WindowDOMContentLoadedFunctionWeakReference != null && this.___WindowDOMContentLoadedFunctionWeakReference.IsAlive)
                            {
                                this.___CalledFunctionHashtable[this.___WindowDOMContentLoadedFunctionWeakReference.Target] = this.___WindowDOMContentLoadedFunctionWeakReference.Target;
                            }
                            this.___PerformDocumentOrWindowEventFunction(this.___WindowDOMContentLoadedFunctionWeakReference.Target, "DomContentLoaded", null, this.___event,false, "window DomContentLoaded");
                            __MethodCalled++;
                            ___IsOneOfDOMContetLoadFuctionExecuted = true;
                            goto DOMContentLoaded1stStageDone;
                        }
                 
                        if (this.___DocumentDOMCotentLoadedFunctionWeakReference != null)
                        {
                            if (this.___DocumentDOMCotentLoadedFunctionQueue != null)
                            {
                                int qCount = this.___DocumentDOMCotentLoadedFunctionQueue.Count;
                                try
                                {
                                    for (int qi = 0; qi < qCount; qi++)
                                    {
                                        System.WeakReference funcref = this.___DocumentDOMCotentLoadedFunctionQueue.GetByIndex(0) as System.WeakReference;
                                        if (funcref != null)
                                        {
                                            // System.WeakReference funcref in this.___WindowDOMCotentLoadedFunctionQueue.TryGetValue()
                                            this.___CalledFunctionHashtable[funcref.Target] = funcref.Target;
                                            this.___PerformDocumentOrWindowEventFunction(funcref.Target, "DomContentLoaded", null, this.___event, false, "document DomContentLoaded");
                                            __MethodCalled++;
                                        }
                                        this.___DocumentDOMCotentLoadedFunctionQueue.RemoveAt(0);
                                        qCount = this.___DocumentDOMCotentLoadedFunctionQueue.Count;
                                        ___IsOneOfDOMContetLoadFuctionExecuted = true;
                                    }
                                }
                                catch (Exception exLoop)
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                    {
                                        commonLog.LogEntry("document.DOMContentLoaded has queued functions loop error", exLoop);
                                    }
                                }
                                this.___DocumentDOMCotentLoadedFunctionQueue.Clear();
                            }
                            if (this.___DocumentDOMCotentLoadedFunctionWeakReference != null && this.___IsCalledFunctionContainsOnCalledList(this.___DocumentDOMCotentLoadedFunctionWeakReference.Target) == false)
                            {
                                if (this.___DocumentDOMCotentLoadedFunctionWeakReference != null && this.___DocumentDOMCotentLoadedFunctionWeakReference.IsAlive == true)
                                {
                                    this.___CalledFunctionHashtable[this.___DocumentDOMCotentLoadedFunctionWeakReference.Target] = this.___DocumentDOMCotentLoadedFunctionWeakReference.Target;
                                }
                                this.___PerformDocumentOrWindowEventFunction(this.___DocumentDOMCotentLoadedFunctionWeakReference.Target, "DomContentLoaded",null, this.___event,false, "document DomContentLoaded");
                                ___IsOneOfDOMContetLoadFuctionExecuted = true;
                                __MethodCalled++;

                                goto DOMContentLoaded1stStageDone;
                            }
                            else
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                {
                                    commonLog.LogEntry("domcontentload on document has been called");
                                }
                            }
                        }
                    DOMContentLoaded1stStageDone:
                        // NOTE)
                        // IE triggers will both triggers onreadystatechange
                        // Chrome and Firefox only execute One if any. (document has higher priority)
                        // We will obey chrome and firefox way.

                        if (this.___DocumentReadyStateChangeFunctionWeakReference != null)
                        {
                            if (this.___IsCalledFunctionContainsOnCalledList(this.___DocumentReadyStateChangeFunctionWeakReference.Target) == false)
                            {
                                this.___CalledFunctionHashtable[this.___DocumentReadyStateChangeFunctionWeakReference.Target] = this.___DocumentReadyStateChangeFunctionWeakReference.Target;
                                this.___PerformDocumentOrWindowEventFunction(this.___DocumentReadyStateChangeFunctionWeakReference.Target, "readystagechange", null, this.___event, false, "document.readystatechange");
                                ___IsOneOfReadyStateChangeFuctionExecuted = true;
                                __MethodCalled++;

                                goto ReadyStateChangeCompletePhase;
                            }
                        }
                        if (this.___WindowReadyStateChangeFunctionWeakReference != null)
                        {
                            if (this.___IsCalledFunctionContainsOnCalledList(this.___WindowReadyStateChangeFunctionWeakReference.Target) == false)
                            {
                                this.___CalledFunctionHashtable[this.___WindowReadyStateChangeFunctionWeakReference.Target] = this.___WindowReadyStateChangeFunctionWeakReference.Target;
                                this.___PerformDocumentOrWindowEventFunction(this.___WindowReadyStateChangeFunctionWeakReference.Target, "readystagechange", null, this.___event, false, "window.readystatechange");
                                ___IsOneOfReadyStateChangeFuctionExecuted = true;
                                __MethodCalled++;

                                goto ReadyStateChangeCompletePhase;
                            }
 
                        }
                    ReadyStateChangeCompletePhase:
    
                        if (this.___WindowLoadFunctionWeakReference != null)
                        {
                            if(this.___WindowLoadFunctionQueue != null)
                            {
                                int qCount = this.___WindowLoadFunctionQueue.Count;
                                try
                                {
                                    for (int qi = 0; qi < qCount; qi++)
                                    {
                                        System.WeakReference funcref = this.___WindowLoadFunctionQueue.GetByIndex(0) as System.WeakReference;
                                        if (funcref != null)
                                        {
                                            // System.WeakReference funcref in this.___WindowDOMCotentLoadedFunctionQueue.TryGetValue()
                                            this.___CalledFunctionHashtable[funcref.Target] = funcref.Target;
                                            this.___PerformDocumentOrWindowEventFunction(funcref.Target, "Load", null, this.___event, false, "window load");
                                            __MethodCalled++;
                                        }
                                        this.___WindowLoadFunctionQueue.RemoveAt(0);
                                        qCount = this.___WindowLoadFunctionQueue.Count;
                                        ___IsOneOfDOMContetLoadFuctionExecuted = true;
                                    }
                                }
                                catch (Exception exLoop)
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                    {
                                        commonLog.LogEntry("window.load has queued functions loop error", exLoop);
                                    }
                                }
                                this.___WindowLoadFunctionQueue.Clear();
                            }

                            if (this.___IsCalledFunctionContainsOnCalledList(this.___WindowLoadFunctionWeakReference.Target) == false)
                            {
                                this.___CalledFunctionHashtable[this.___WindowLoadFunctionWeakReference.Target] = this.___WindowLoadFunctionWeakReference.Target;
                                this.___PerformDocumentOrWindowEventFunction(this.___WindowLoadFunctionWeakReference.Target, "load", null, this.___event, false, "window onload");
                                __MethodCalled++;


                                goto LoadFucntionDone;
                            }
                            else
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                {
                                    commonLog.LogEntry("window load has been called. Skip.");
                                }
                            }

                        }
                        if (this.___DocumentLoadFunctionWeakReference != null)
                        {
                            if(this.___DocumentLoadFunctionQueue != null)
                            {
                                int qCount = this.___WindowLoadFunctionQueue.Count;
                                try
                                {
                                    for (int qi = 0; qi < qCount; qi++)
                                    {
                                        System.WeakReference funcref = this.___DocumentLoadFunctionQueue.GetByIndex(0) as System.WeakReference;
                                        if (funcref != null)
                                        {
                                            // System.WeakReference funcref in this.___WindowDOMCotentLoadedFunctionQueue.TryGetValue()
                                            this.___CalledFunctionHashtable[funcref.Target] = funcref.Target;
                                            this.___PerformDocumentOrWindowEventFunction(funcref.Target, "Load", null, this.___event, false, "window load");
                                            __MethodCalled++;
                                        }
                                        this.___DocumentLoadFunctionQueue.RemoveAt(0);
                                        qCount = this.___DocumentLoadFunctionQueue.Count;
                                        ___IsOneOfDOMContetLoadFuctionExecuted = true;
                                    }
                                }
                                catch (Exception exLoop)
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                    {
                                        commonLog.LogEntry("window.load has queued functions loop error", exLoop);
                                    }
                                }
                                this.___DocumentLoadFunctionQueue.Clear();
                            }
                            if (this.___IsCalledFunctionContainsOnCalledList(this.___DocumentLoadFunctionWeakReference.Target) == false)
                            {
                                this.___CalledFunctionHashtable[this.___DocumentLoadFunctionWeakReference.Target] = this.___DocumentLoadFunctionWeakReference.Target;
                                this.___PerformDocumentOrWindowEventFunction(this.___DocumentLoadFunctionWeakReference.Target, "load",this, this.___event,false, "document onload");
                                __MethodCalled++;

                                goto LoadFucntionDone;
                            }
                            else
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                {
                                    commonLog.LogEntry("document load has been called. Skip");
                                }
                            }
                        }


                    LoadFucntionDone:

                    if (___IsOneOfDOMContetLoadFuctionExecuted == false)
                        { 

                        if (this.___WindowDOMContentLoadedFunctionWeakReference != null)
                        {
                            if (this.___IsCalledFunctionContainsOnCalledList(this.___WindowDOMContentLoadedFunctionWeakReference.Target) == false)
                            {
                                if (this.___WindowDOMContentLoadedFunctionWeakReference != null && this.___WindowDOMContentLoadedFunctionWeakReference.IsAlive)
                                {
                                    this.___CalledFunctionHashtable[this.___WindowDOMContentLoadedFunctionWeakReference.Target] = this.___WindowDOMContentLoadedFunctionWeakReference.Target;
                                }
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                                {
                                    commonLog.LogEntry("window.DOMContentLoaed function is created after load()... execute now...");
                                }
                                this.___PerformDocumentOrWindowEventFunction(this.___WindowDOMContentLoadedFunctionWeakReference.Target, "DomContentLoaded", null, this.___event, false, "window DomContentLoaded");
                                    __MethodCalled++;


                                    ___IsOneOfDOMContetLoadFuctionExecuted = true;
                                goto DOMContentLoaded2ndStageDone;
                            }
                        }
                        if (this.___DocumentDOMCotentLoadedFunctionWeakReference != null)
                        {
                            if (this.___IsCalledFunctionContainsOnCalledList(this.___DocumentDOMCotentLoadedFunctionWeakReference.Target) == false)
                            {
                                if (this.___DocumentDOMCotentLoadedFunctionWeakReference != null && this.___DocumentDOMCotentLoadedFunctionWeakReference.IsAlive)
                                {
                                    this.___CalledFunctionHashtable[this.___DocumentDOMCotentLoadedFunctionWeakReference.Target] = this.___DocumentDOMCotentLoadedFunctionWeakReference.Target;
                                }

                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                                {
                                    commonLog.LogEntry("document.DOMContentLoaed function is created after load()... execute now...");
                                }
                                this.___PerformDocumentOrWindowEventFunction(this.___DocumentDOMCotentLoadedFunctionWeakReference.Target, "DomContentLoaded", null, this.___event, false, "document DomContentLoaded");
                                    __MethodCalled++;


                                    ___IsOneOfDOMContetLoadFuctionExecuted = true;
                                goto DOMContentLoaded2ndStageDone;
                            }
                        }
                    }
                    DOMContentLoaded2ndStageDone:
                    
                  


           

                     


						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
						{
							TimeSpan tpSpan = DateTime.Now.Subtract(dtOnReadyStageChangeStart);
							commonLog.LogEntry("({0}).onreadystagechange processed {1} function(s) with {2} ms...", this.toLogString(), __MethodCalled , tpSpan.TotalMilliseconds);
						}
					}
                    #endregion
					if(this.___IsHtmlParseCompleted == false)
					{
						___IsHtmlParseCompleted = true;
					}

					// ###########################################################################################

				}
                if (this.___IsDomModeFullParseMode() == true && this.___IsDomModeAnyHTML() == true)
                {
                    if (this.___documentDomType != CHtmlDomModeType.HTMLDOM || this.___documentElement == null || this.___body == null || this.___body.___offsetWidth == 0 || this.___body.___offsetHeight == 0)
                    {
                        this.___willSkipDocumentPainting = true;
                        this.___documentPaintedCount = 99999;
                    }
                    else
                    {
                        this.___willSkipDocumentPainting = false;
                    }
                    if (this.___cssRuleGroundList != null && this.___cssRuleGroundList.Count - this.___CHtmlStyleElementListsCountAtBodyTagPassed > commonHTML.CSS_RECALUCURATION_ENFORCE_LIMIT_DIFFERENCE)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
                        {
                            commonLog.LogEntry("CSS Count (Body) : {0} DOM completed phase : {1} has big difference. Recaluculation may be required.", this.___CHtmlStyleElementListsCountAtBodyTagPassed, this.___cssRuleGroundList.Count);
                        }
                        if (this.___documentElement != null && this.___documentElement.___classList.Count >= 5)
                        {
                            if (System.Threading.Monitor.TryEnter(this.___CSSSearchDeepPendingElementList_LockingObject, 1000))
                            {
                                try
                                {
                                    if (this.___CSSSearchDeepPendingElementList != null && this.___CSSSearchDeepPendingElementList.ContainsKey(this.___documentElement.___elementOID) == false)
                                    {
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                        {
                                            commonLog.LogEntry("CSS lookup needs to deep css search (many css createdafter body tag)... enqueue now: {0}", this);
                                        }
                                        this.___CSSSearchDeepPendingElementList[this.___documentElement.___elementOID] = new WeakReference(this.___documentElement, false);
                                    }
                                }
                                finally
                                {
                                    System.Threading.Monitor.Exit(this.___CSSSearchDeepPendingElementList_LockingObject);
                                }
                            }
                        }
                    }

                }
                else
                {
                    this.___willSkipDocumentPainting = true;
                    this.___documentPaintedCount = 99999;
                }
				
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
				{
					TimeSpan tpSpan = DateTime.Now.Subtract(this.___parseStartTime);
					commonLog.LogEntry("___parseDocument('{0}') complete {1} chars in {2} ms {3} elements...", this.UrlShortName, this.___HtmlBuilderLength , tpSpan.TotalMilliseconds, this.___documentElementTotalCount);

				}

				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
				{
					if(this.___documentDomType == CHtmlDomModeType.HTMLDOM)
					{
						if(___TotalCSSListLookupTime > 0 || this.___TotalCSSListLookupTime > 0)
						{
							try
							{
								commonLog.LogEntry("+---------------------[ CSS Score Board Recursion:{0} ]----------------+", commonHTML.UseCSSRecursion);
								commonLog.LogEntry("| CSS List Search Total Time   :\t\t{0}\t\t\t\tms", this.___TotalCSSListLookupTime);
								commonLog.LogEntry("| CSS Parent Lookup Total Time :\t\t{0}\t\t\t\tms", this.___TotalCSSParentLookupTime);
								commonLog.LogEntry("| Total [{0}]        :\t\t{1}\t\t\tms", this.UrlShortName, this.___TotalCSSListLookupTime + this.___TotalCSSParentLookupTime);
								//commonLog.LogEntry("| CSS Pseudo Accumulation       :\t\t{0}\t{1}",(int)this.___CSSPseudoClassAccumulated, this.___CSSPseudoClassAccumulated);
                                string ___TotalPseudoCSSNames = commonHTML.GetCHtmlPseudoClassTypeString(this.___CSSDocumentTotalPseudoClass);
                                commonLog.LogEntry("| CSS Pseudo Accumulation       :\t\t{0}\t{1}", (int)this.___CSSDocumentTotalPseudoClass, ___TotalPseudoCSSNames);
								commonLog.LogEntry("| CSS Neighbor Copy             :\t\t{0}", this.___IdenticalElementStyleSiblingCloneCount);
								if(this.___CSSAttributeLookupFieldList.Count > 0)
								{
									System.Text.StringBuilder sbCSSAttributes =new StringBuilder();
									foreach(string sKey in this.___CSSAttributeLookupFieldList.Keys)
									{
										sbCSSAttributes.Append(sKey);
										sbCSSAttributes.Append(',');
										sbCSSAttributes.Append(' ');
									}
									if(sbCSSAttributes.Length > 2)
									{
										sbCSSAttributes.Remove(sbCSSAttributes.Length -2, 2);
									}
									commonLog.LogEntry("| CSS Attributes Key Name                 :\t\t{0}", sbCSSAttributes.ToString());
								}
								else
								{
									commonLog.LogEntry("| CSS Attributes Key Name                 :\t\t-");
								}
								if(this.___CSSNthOfTypeTagTypesList.Count > 0)
								{
									System.Text.StringBuilder sbCSSTagTypes =new StringBuilder();
									foreach(object strTagKey in this.___CSSNthOfTypeTagTypesList.Keys)
									{
										sbCSSTagTypes.Append(strTagKey);
										sbCSSTagTypes.Append(',');
										sbCSSTagTypes.Append(' ');

									}
									if(sbCSSTagTypes.Length > 2)
									{
										sbCSSTagTypes.Remove(sbCSSTagTypes.Length -2, 2);
									}
									commonLog.LogEntry("| CSS Pseudo TagName (ex :nth-type)                 :\t\t{0}", sbCSSTagTypes.ToString());

								}
								else
								{
									commonLog.LogEntry("| CSS Pseudo TagName (for :nth-type)                 :\t\t-");
								}
								commonLog.LogEntry("| Pretech ({0})\t\tTime\t    :\t\t{1}", this.___isPrefetchThreadStarted , this.___PrefetchThreadResultTime);
                                TimeSpan tpResponseComleteAferTime = DateTime.Now.Subtract(this.___HtmlResponseComleteTime);
                                commonLog.LogEntry("| Elapsed After ResponseComlete  \t\tTime\t    :\t\t{0} ms", tpResponseComleteAferTime.TotalMilliseconds);

								commonLog.LogEntry("+------------------------------------------------------------------------+");
							}
							catch(Exception ex)
							{
								if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
								{
									commonLog.LogEntry("CSS Score Error",ex);
								}

							}
						}
					}
				}

				/*
				if(this._body != null)
				{
					Rectangle paintRect = new Rectangle(0,0, ___DocumentMinSize.Width, ___DocumentMinSize.Height);
					this.drawRootElementRecursively(this._body, paintRect, this.DocumentGraphics);
				}detected! skip for position Current
				*/
			
			___parseDocumentCleanUp:
                if (this.___StyleQueue != null)
                {
                    if (this.___StyleQueue.IsAllCSSComplete == false)
                    {
                        this.___StyleQueue.IsAllCSSComplete = true;
                    }
                }
				if(this.___currentParentElement != null)
				{
					this.___currentParentElement = null;
				}
				if(this.___currentClosedElement != null)
				{
					this.___currentClosedElement = null;
				}
				if(this.___encText != null)
				{
					this.___encText = null;
				}
	


				if(this.___HtmlGraphics != null)
				{
					try
					{
						this.___HtmlGraphics.Dispose(true);
					}
                    catch (Exception ex)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                        }
                    }
					this.___HtmlGraphics = null;
				}


				if(this.___IsHtmlParseCompleted == false)
				{
					___IsHtmlParseCompleted = true;
				}
				
				if( this.___readyStateType != CHtmlReadytStateType.complete)
				{
                    this.___readyStateType = CHtmlReadytStateType.complete;
				}
				
				/*
				if(this.ThreadParseCharSetDetectCompleteEvent != null)
				{
					this.CloseAndDisposeAutoResetEvent(ref this.ThreadParseCharSetDetectCompleteEvent);
				}
				*/

                
				if(this.___ThreadStylesheetCompleteEvent != null)
				{
					this.CloseAndDisposeAutoResetEvent(ref this.___ThreadStylesheetCompleteEvent);
				}
				if(this.___ThreadParseSuspendEvent != null)
				{
					this.CloseAndDisposeAutoResetEvent(ref this.___ThreadParseSuspendEvent);
				}
				if(this.___ThreadParseCompleteEvent != null)
				{
					try
					{
						if(this.___IsNavigationStopped == false)
						{
							this.___ThreadParseCompleteEvent.Set();
							if(this.___ThreadParseCompleteEvent != null)
							{
								this.CloseAndDisposeAutoResetEvent(ref this.___ThreadParseCompleteEvent);
							}
                            this.___ThreadParseCompleteEvent = null;
						}
						else
						{
							if( this.___ThreadParseCompleteEvent != null)
							{
								this.CloseAndDisposeAutoResetEvent(ref this.___ThreadParseCompleteEvent);
							}
                            this.___ThreadParseCompleteEvent = null;
						}
					}
                    catch (Exception ex)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                        }
                    }
					finally
					{
						this.___ThreadParseCompleteEvent = null;
					}
				}
			}
			catch(Exception finalParseThread)
			{
				if(this.___IsThreadAbortOccurred == false)
				{
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
					{
						commonLog.LogEntry("___parseDocument Has Final Exception", finalParseThread);
					}
				}
			}
			finally
			{
				try
				{
					if(this.___ThreadStylesheetCompleteEvent != null)
					{
						this.CloseAndDisposeAutoResetEvent(ref this.___ThreadStylesheetCompleteEvent);
					}
				}
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                    }
                }
			}
			if(this.___threadDOMParse != null)
			{
				//commonLog.LogEntry("Setting Thread Parse null...");
				this.___threadDOMParse = null;
			}
			
		}
		public static void ___GetMaximumNumberOfSelectorKeyClassInElement(CHtmlElement ___element)
		{
			if(___element == null || ___element.___stylesheetsForNextNodeList.Count == 0)
			{
				return;
			}
			else
			{
				int c = ___element.___stylesheetsForNextNodeList.Count; 
				for(int i = 0; i < c; c ++)
				{
					CHtmlCSSRule ___styleElement = ___element.___stylesheetsForNextNodeList[i];
					if(___styleElement == null)
						continue;
					/*
					if(___element.___MaxNumOfSelectorWorkingKeyCountInElement < ___styleElement.___styleKeyWorkingList.Count)
					{
						___element.___MaxNumOfSelectorWorkingKeyCountInElement  = ___styleElement.___styleKeyWorkingList.Count;

					}
					*/
				}
			}
		}
     
		/// <summary>
		/// Buggy function do not use this.s
		/// </summary>
		/// <param name="__element"></param>
		/// <param name="__OpenEndPosition"></param>
		/// <returns></returns>
		public bool IsElementLastChildInHTML(CHtmlElement __element, int __OpenEndPosition)
		{
			if(__element.___parentWeakRef  == null)
			{
				return false;
			}
			// the element has relastionship parent
			System.Text.StringBuilder sbTag = null;
			System.Collections.Stack stack =new Stack();
			stack.Push(__element.tagName);
			int i = 0;
			int n = 0;
            int _htmlBuilderLen = this.___HtmlBuilder.Length;
			try
			{
			
				for(i= __OpenEndPosition + 1; i <  _htmlBuilderLen  -1 ; i ++)
				{
                    char c = this.___HtmlBuilder[i];
					if(c == '<')
					{
						sbTag = new StringBuilder();
						continue;
					}
					else if(c == '>')
					{
						if(sbTag != null && sbTag.Length > 0)
						{
							if(sbTag[0] == '/')
							{
								stack.Push(sbTag.ToString());
								sbTag.Remove(0,1);
								if(sbTag.ToString() != __element.tagName && sbTag.ToString() == __element.parent.___tagName)
								{
									if(stack.Contains(sbTag.ToString()) == false)
									{
										return true;
									}
									else
									{
										return false;
									}
								}
								else
								{
									if(sbTag.ToString() == __element.tagName)
									{
										sbTag = null;
										continue;
									}
									return false;
								}	
							}
							else if(char.IsLetterOrDigit(sbTag[0]))
							{
								if(stack.Contains(sbTag.ToString()))
								{
									return false;
								}
								stack.Push(sbTag.ToString());
							}
						}
						sbTag = null;
					}
					if(sbTag != null)
					{
                        if (commonHTML.FasterIsWhiteSpaceLimited(c) && sbTag.Length > 0)
						{
							
							for(n = i; n <  _htmlBuilderLen -1 ; n ++)
							{
                                if (this.___HtmlBuilder[n] == '>')
								{
									i = n -1;
									goto NextChar;
								}
							}
						}
                        if(c >= 'a' &&  c<= 'z')
                        {
						    sbTag.Append(commonHTML.FasterToUpper(c));
                        }
                        else
                        {
                            sbTag.Append(c);
                        }
					}
				NextChar:
					if(false){;}
				}
			}
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
				{
					commonLog.LogEntry("IsElementLastChildInHTML", ex);
				}
			}
			return false;
		}
		private int ___PerformInvalidTagSkipWithinAttribute(int ___StartPoint)
		{
			try
			{
				System.Text.StringBuilder sbFirstTag = new StringBuilder();
				int __FirstTagEndPos = -1;
				int __HtmlBuilderLen = this.___HtmlBuilder.Length;
                for (int i = ___StartPoint + 1; i < __HtmlBuilderLen; i++)
				{
                    char c = this.___HtmlBuilder[i];
					if(c == '>')
					{
						__FirstTagEndPos = i;
						break;
					}
                    if (c >= 'a' && c <= 'z')
                    {
                        sbFirstTag.Append(commonHTML.FasterToUpper(c));
                    }
                    else
                    {
                        sbFirstTag.Append(c);
                    }
				}
				if(sbFirstTag.Length > 0 && sbFirstTag[0] != '/')
				{
					int __EndPos = this.GetStringPositionInHtmlBuilder("</" + sbFirstTag.ToString(),  __FirstTagEndPos);
					if(__EndPos > -1)
					{
						// Found Same tag in attribute. Good Condition to ignore all.
						return this.GetStringPositionInHtmlBuilder(">",  __EndPos);
					}
					else
					{
						// Hoops. Tags in attribute is not well composed.
						// Just Skip From __SartPoint
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
						{
							commonLog.LogEntry("PerformInvalidTagSkipWithinAttribute has found tag " + sbFirstTag.ToString() + " but no ending tag found. Just Skip For next");
						}
						return this.GetStringPositionInHtmlBuilder(">",  ___StartPoint);
					
					}

				}
			} 
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
				{
					commonLog.LogEntry("PerformInvalidTagSkipWithinAttribute", ex);
				}
			}
		
			return -1;
		}

		private bool IsConditionalTagValid(string __ConditonalComment, int __CurrentPosition)
		{
			string __ConditonalCommentComposed = "";
			bool _ConditionMatch = false;
			if( __ConditonalComment.Length != 0)
			{
				__ConditonalCommentComposed = __ConditonalComment;
			}
            else if (__CurrentPosition > 0 && __CurrentPosition < this.___HtmlBuilder.Length)
			{
				System.Text.StringBuilder sbText = new StringBuilder();
                char cs = '\0';
                int ___HtmlBuilderLen = ___HtmlBuilder.Length;
                for (int i = __CurrentPosition; i < ___HtmlBuilderLen; i++)
				{
                    cs = this.___HtmlBuilder[i];
					if(cs == '>')
						break;
					if(sbText.Length == 0)
					{
						if(cs == '<')
						{
							return false;
						}
						if(char.IsLetterOrDigit(cs))
						{
							return false;
						}
                        else if (commonHTML.FasterIsWhiteSpaceLimited(cs) || cs == '-' || cs == '!')
						{
							continue;
						}
					}
                    if (cs >= 'a' && cs <= 'z')
                    {
                        sbText.Append(commonHTML.FasterToUpper(cs));
                    }
                    else
                    {
                        sbText.Append(cs);
                    }
				}
				__ConditonalCommentComposed = sbText.ToString();
			}
			if(__ConditonalCommentComposed .Length != 0)
			{
				int KakoStart = __ConditonalCommentComposed.IndexOf('[');
				if(KakoStart >-1)
				{
					__ConditonalCommentComposed = __ConditonalCommentComposed.Remove(0, KakoStart + 1);
				}
				int KakoEnd = __ConditonalCommentComposed.IndexOf(']');
				if(KakoEnd > -1)
				{
					__ConditonalCommentComposed = __ConditonalCommentComposed.Substring(0, KakoEnd);
				}
			}
            if (__ConditonalCommentComposed.Length > 0 && (commonHTML.FasterIsWhiteSpaceLimited(__ConditonalCommentComposed[0]) == true || commonHTML.FasterIsWhiteSpaceLimited(__ConditonalCommentComposed[__ConditonalCommentComposed.Length - 1]) == true))
            {
                __ConditonalCommentComposed = __ConditonalCommentComposed.Trim();
            }
			if(__ConditonalCommentComposed .Length != 0)
			{
				if(__ConditonalCommentComposed.StartsWith("IF",StringComparison.OrdinalIgnoreCase) == false)
				{
					return false;
				}
				
				if(__ConditonalCommentComposed.IndexOf("!IE", StringComparison.OrdinalIgnoreCase) > -1)
				{
					_ConditionMatch = false;
				}
				if(_ConditionMatch  == false && __ConditonalCommentComposed.IndexOf("!(IE)", StringComparison.OrdinalIgnoreCase) > -1)
				{
					_ConditionMatch = false;
				}
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel > 1)
				{
					commonLog.LogEntry("Conditional Comment : {0} : {1}  : {2}", __ConditonalCommentComposed,_ConditionMatch, __CurrentPosition);
				}
				
			}
			
			return _ConditionMatch;
		}
		private int GetStringPositionInHtmlBuilder(string findString, int ___StartingPoint)
		{
			return  GetStringPositionInHtmlBuilder(findString,  ___StartingPoint,-1, null);
		}
		/// <summary>
		/// Returns postion in HTMLBuilder with Waiting Methods
		/// </summary>
		/// <param name="findString"></param>
		/// <param name="___StartingPoint"></param>
		/// <param name="LookupLimit"></param>
		/// <param name="sbText"></param>
		/// <returns></returns>
		internal int GetStringPositionInHtmlBuilder(string findString, int ___StartingPoint,int LookupLimit,  System.Text.StringBuilder sbText)
		{
			CHtmlStopWatch ___StopWatch = null;
			bool __IsSearchingForScriptEndBlock = false;
			int ___StartingPointOriginalPoint = ___StartingPoint;
			if(string.Equals(findString, "</SCRIPT",StringComparison.Ordinal) == true)
			{
				 __IsSearchingForScriptEndBlock = true;
			}
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				___StopWatch = new CHtmlStopWatch();
			}
			bool IsResponseCompletedAtBegin = this.___IsHtmlResponseCompleted;
            int _test = commonHTML.StringBuilderIndexOf(this.___HtmlBuilder, findString, ___StartingPoint, true, this.___HtmlBuilderText);
			if( __IsSearchingForScriptEndBlock && _test > -1)
			{
                if (commonHTML.___IsCurrentScriptEndBlockValid(_test, ___StartingPoint, this.___HtmlBuilder) == false)
				{
					___StartingPoint = _test + 8;
					_test = -1;
					IsResponseCompletedAtBegin = false;
				}
			}
			while(_test == -1)
			{
				if(this.___IsThreadAbortOccurred == true)
					break;
                int _oldLength = this.___HtmlBuilder.Length;
				if(this.___IsHtmlResponseCompleted == false)
				{
					
					if(this.___ThreadParseSuspendEvent != null)
					{
						this.___ThreadParseSuspendEvent.WaitOne(50, false);
					}
                    if (_oldLength == this.___HtmlBuilder.Length)
						continue;
                    _test = commonHTML.StringBuilderIndexOf(this.___HtmlBuilder, findString, ___StartingPoint, true, this.___HtmlBuilderText);
					if( __IsSearchingForScriptEndBlock && _test > -1 )
					{
                        if (commonHTML.___IsCurrentScriptEndBlockValid(_test, ___StartingPoint, this.___HtmlBuilder) == false)
						{
							___StartingPoint = _test + 8;
							_test = -1;
							IsResponseCompletedAtBegin = false;
					

						}
					}
				}
				else
				{
					if( IsResponseCompletedAtBegin)
					{
						break;
					}
					else
					{
						IsResponseCompletedAtBegin = true;
                        _test = commonHTML.StringBuilderIndexOf(this.___HtmlBuilder, findString, ___StartingPoint, true, this.___HtmlBuilderText);
						if( __IsSearchingForScriptEndBlock && _test > -1 )
						{
                            if (commonHTML.___IsCurrentScriptEndBlockValid(_test, ___StartingPoint, this.___HtmlBuilder) == false)
							{
								___StartingPoint = _test + 8;
								_test = -1;
								IsResponseCompletedAtBegin = false;
					

							}
						}
					}
				}
			}
			if(sbText == null || _test == -1 || _test < ___StartingPointOriginalPoint)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
				{
					if(___StopWatch != null)
					{
						___StopWatch.Stop();
						if(___StopWatch.TotalMilliseconds > 1000)
						{
							commonLog.LogEntry("GetStringPositionInHtmlBuilder tooks tool long  I {0}", ___StopWatch);
						}

					}
				}
			
				return _test;
			}
			for(int p = ___StartingPointOriginalPoint; p <= _test ; p ++)
			{
                sbText.Append(this.___HtmlBuilder[p]);
			}
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				if(___StopWatch != null)
				{
					___StopWatch.Stop();
					if(___StopWatch.TotalMilliseconds > 1000)
					{
						commonLog.LogEntry("GetStringPositionInHtmlBuilder tooks tool long II {0}", ___StopWatch);
					}

				}
			}
			return _test;
		}

		/// <summary>
		/// Get Next Tag End Or Start Position
		/// It will creates skip commenting area in SortedList
		/// it will wait in Response Also.
		/// </summary>
		/// <param name="___StartingPoint">Next Tag Start Position</param>
		/// <param name="_srSkipList">Comment Area Position Sorted List</param>
		/// <returns></returns>
		
		internal System.Text.StringBuilder ___BuildStringBuilder4InnerTextNextEndOrStartPosition(int ___StartingPoint, bool __PreserveCRLF, ref int __NextTagStartPos)
		{
			System.Text.StringBuilder sbText = new StringBuilder();
			int LookupCount = 0;
			bool IsResponseCompletedAtBegin = false;
			int __HTMLBuilderLengthAtBegin = -1;
			string findString = "<";
			int __resultOfFindString = -1;
			int __resultOfCommendBegin = -1;
			int __resultOfCommentEnd = -1;
			int ___OriginalPoint = ___StartingPoint;
			bool ___IsFirstCharDetected = false;
			try
			{
				while(true)
				{
					
					LookupCount ++;
                    if (this.___IsThreadAbortOccurred == true || this.___Disposing)
					{
						__NextTagStartPos =  -1;
						return sbText;
					}
					if(LookupCount > 50)
					{
                        if (this.___IsHtmlResponseCompleted == true)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 1)
                            {
                                commonLog.LogEntry(" Infite loop! Abort StartingPoint: {0} HtmlLen : {1}", ___StartingPoint, this.___HtmlBuilder.Length);
                            }
                            __NextTagStartPos = -1;
                            return sbText;
                        }
                        else
                        {
                            System.Threading.Thread.Sleep(0);
                        }
					}
					IsResponseCompletedAtBegin = this.___IsHtmlResponseCompleted;
                    __HTMLBuilderLengthAtBegin = this.___HtmlBuilder.Length;
                    __resultOfFindString = commonHTML.StringBuilderIndexOf(this.___HtmlBuilder, findString, ___StartingPoint, true, this.___HtmlBuilderText);
					if(__resultOfFindString == -1)
					{
						if(IsResponseCompletedAtBegin == true)
						{
							// Means No Next End
                            if (___StartingPoint < this.___HtmlBuilder.Length)
							{
                                sbText.Append(___GetRangeStringInHTMLBuilderWithAmpsandProcessing(___StartingPoint, this.___HtmlBuilder.Length - ___StartingPoint, __PreserveCRLF, true, ref  ___IsFirstCharDetected));
							}
                            __NextTagStartPos = this.___HtmlBuilder.Length;
							return sbText;
						}
						else
						{
                            int ___intOldLength = this.___HtmlBuilder.Length;
							int ___SameLenCount = 0;
						WaitForResponse:
                            if (___intOldLength == this.___HtmlBuilder.Length)
							{
								___SameLenCount ++;
								if(___SameLenCount >= 15)
								{
									if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
									{
                                        commonLog.LogEntry("__BuildStringBuilder4InnerTextNextEndOrStartPosition Waitted 15 Times Current Length : {0}. Aborting...", this.___HtmlBuilder.Length);
									}
									__NextTagStartPos = -1;
									return sbText;
								}
							}
							if(this.___ThreadParseSuspendEvent != null)
							{
								this.___ThreadParseSuspendEvent.WaitOne(50, false);
								if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
								{
                                    commonLog.LogEntry("__BuildStringBuilder4InnerTextNextEndOrStartPosition Waitng Current Length : {0}...", this.___HtmlBuilder.Length);
								}
							}

                            if (this.___IsThreadAbortOccurred || this.___Disposing)
							{
								break;
							}
                            if (__HTMLBuilderLengthAtBegin < this.___HtmlBuilder.Length || this.___IsHtmlResponseCompleted)
							{
                                ___intOldLength = this.___HtmlBuilder.Length;
								continue;
							}
							else
							{
								if(this.___ThreadParseSuspendEvent != null)
								{
									try
									{
										this.___ThreadParseSuspendEvent.WaitOne(50, false);
									}
                                    catch (Exception ex)
                                    {
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                        {
                                            commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                        }
                                    }
								}

								if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
								{
                                    commonLog.LogEntry("__BuildStringBuilder4InnerTextNextEndOrStartPosition Sleep(50)...", this.___HtmlBuilder.Length);
								}
								goto WaitForResponse;
							}
						}
					}
					else
					{  // Means next first '<' is found.
					   // 1) Check if it started with '<!-'
                        char _rightNextChar;
                        if (__resultOfFindString + 1 <= this.___HtmlBuilder.Length)
						{
                            _rightNextChar = this.___HtmlBuilder[__resultOfFindString + 1];
							if(char.IsLetterOrDigit(_rightNextChar) || _rightNextChar == '/' || _rightNextChar == '?')
							{
								// Means it look like next '<' is valid
								sbText.Append(___GetRangeStringInHTMLBuilderWithAmpsandProcessing(___StartingPoint, __resultOfFindString - ___StartingPoint,__PreserveCRLF,true, ref  ___IsFirstCharDetected));
								__NextTagStartPos = __resultOfFindString;
								return sbText;

							}
							else if(_rightNextChar == '!')
							{
                            CheckForCommentBlock:
                                char _rightNext2Char;
                                if (this.___HtmlBuilder.Length > __resultOfFindString + 2)
								{
                                    _rightNext2Char = this.___HtmlBuilder[__resultOfFindString + 2];
									if(_rightNext2Char == '-')
									{
									  // it seems comment block is started now.
									  // it may be '<!->' it is iregular case but ignore the block. and continue
                                        if (this.___HtmlBuilder[__resultOfFindString + 3] == '>')
										{
											sbText.Append(___GetRangeStringInHTMLBuilderWithAmpsandProcessing(___StartingPoint, __resultOfFindString - ___StartingPoint,__PreserveCRLF, false, ref  ___IsFirstCharDetected));
											___StartingPoint = __resultOfFindString + 4;
											continue;
										}
										else
										{
											__resultOfCommendBegin = __resultOfFindString;
											__resultOfCommentEnd = this.GetStringPositionInHtmlBuilder("-->", __resultOfCommendBegin);
											if(__resultOfCommentEnd > -1 && __resultOfCommentEnd > __resultOfCommendBegin)
											{
												// Comment Ending Block has been detected sucessfully. Skip It Now;
												sbText.Append(___GetRangeStringInHTMLBuilderWithAmpsandProcessing(___StartingPoint, __resultOfFindString - ___StartingPoint,__PreserveCRLF, false, ref  ___IsFirstCharDetected));
												___StartingPoint = __resultOfCommentEnd + 3;
												continue;

											}
											else
											{
												if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
												{
													commonLog.LogEntry("HTMLBuilder has strange comment block {0} no end ", __resultOfFindString);
												}
												sbText.Append(___GetRangeStringInHTMLBuilderWithAmpsandProcessing(___StartingPoint, __resultOfFindString - ___StartingPoint,__PreserveCRLF, true, ref  ___IsFirstCharDetected));
												__NextTagStartPos = this.___HtmlBuilder.Length;
												return sbText;

											}
										}
									}
									else
									{ // strange. it means '<!' is not follow '-'
										if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 20)
										{
											commonLog.LogEntry("HTMLBuilder has strange comment block {0} skip the block to create text", __resultOfFindString);
										}
										int __NextTagPos = this.GetStringPositionInHtmlBuilder(">", __resultOfFindString);
										if(__NextTagPos > -1)
										{
											sbText.Append(___GetRangeStringInHTMLBuilderWithAmpsandProcessing(___StartingPoint, __resultOfFindString - ___StartingPoint,__PreserveCRLF, false, ref  ___IsFirstCharDetected));
											___StartingPoint = __NextTagPos + 1;
											continue;

										}

									}

								}
								else
								{
									int ___NextMinus = this.GetStringPositionInHtmlBuilder("-", __resultOfFindString);
									if(___NextMinus == -1)
									{
										sbText.Append(___GetRangeStringInHTMLBuilderWithAmpsandProcessing(___StartingPoint, __resultOfFindString - ___StartingPoint,__PreserveCRLF, true, ref  ___IsFirstCharDetected));
										return sbText;

									}
									else
									{
										goto CheckForCommentBlock;
									}
								}

							}
						}
						else
						{
							// findString appears just very end of text block
							// append all and return
							sbText.Append(___GetRangeStringInHTMLBuilderWithAmpsandProcessing(___StartingPoint, __resultOfFindString - ___StartingPoint,__PreserveCRLF, true, ref  ___IsFirstCharDetected));
							__NextTagStartPos = this.___HtmlBuilder.Length;
							return sbText;

						}

					}
				}

			}
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel > 8)
				{
					commonLog.LogEntry("GetNextTagEndOrStartPositionInHtmlBuilder", ex);
				}
				
			}
			return sbText;
		}
		public string ___GetRangeStringInHTMLBuilderWithAmpsandProcessing(int ___StartingPoint, int __Length, bool __IsPreserveWhiteSpace,bool ___IsLastAppend, ref bool ___IsFirstCharDetected)
		{
		
			System.Text.StringBuilder sbFirstTextBlock = new StringBuilder(__Length);
			char c = '\0';
			char ecc = '\0';
			System.Text.StringBuilder sbSymbol = null;
			int __limitc = -1;
			for(int i = ___StartingPoint ; i < __Length + ___StartingPoint ; i ++)
			{
				c = this.___HtmlBuilder[i];
				if(___IsFirstCharDetected == false )
				{

                    if (commonHTML.FasterIsWhiteSpaceLimited(c) == false)
                    {
                        ___IsFirstCharDetected = true;
                    }
     
                    
				}
				if(__IsPreserveWhiteSpace == true || ___IsFirstCharDetected)
				{
					if(c == '&')
					{
						__limitc = i + 13;
						sbSymbol = new StringBuilder();
						sbSymbol.Append('&');
						for(int ec = i + 1; ec < __limitc; ec ++)
						{
							ecc = this.___HtmlBuilder[ec];
							if(ecc == '&' || ecc == '=' || ecc == ':' || ecc == '*' || ecc == '_' || commonHTML.FasterIsWhiteSpaceLimited(ecc))
							{
								goto AppendCharSection;
							}
							sbSymbol.Append(ecc);
							if(ecc == ';')
							{
								
								if(sbSymbol.Length > 0)
								{
									ecc = commonHTML.GetHTMLCharStringHTMLString(sbSymbol.ToString(), '?');
									sbFirstTextBlock.Append(ecc);
									i = ec;
									goto NextCharSection;
								}
								break;
							}
						}
						sbSymbol = null;
					}
				AppendCharSection:
					sbFirstTextBlock .Append(c);
				NextCharSection:
					if(false){;}
				}
			}
			if(___IsLastAppend && __IsPreserveWhiteSpace == false)
			{
				for(int lc = sbFirstTextBlock.Length -1; lc >= 0; lc --)
				{
                    if (commonHTML.FasterIsWhiteSpaceLimited(sbFirstTextBlock[lc]))
                    {
                        sbFirstTextBlock.Remove(lc, 1);
                    }
                    else
                    {
                        break;
                    }
				}
			}
			return sbFirstTextBlock.ToString();
		}
        /// <summary>
        /// Get Multiversal Window Instance of this document.
        /// </summary>
        /// <returns></returns>
        internal CHtmlMultiversalWindow ___getMultiversalWindow()
        {
            if (this.___MultiversalWindow != null)
            {
                return this.___MultiversalWindow;
            }
            else if (this.___MultiversalWindowWeakReference != null)
            {
                return this.___MultiversalWindowWeakReference.Target as CHtmlMultiversalWindow;
            }
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
            {
                commonLog.LogEntry("Strange! {0}. ___getMultiversalWindow() returns null.", this);
            }
            return null;
        }
        internal CHtmlMultiversalWindow parentWindow
        {
            get
            {
                return this.___getMultiversalWindow();
            }
        }

		/*
		
		public static int StringBuilderIndexOf(StringBuilder sb, string __value, int startIndex, bool ignoreCase)
		{   
			if(sb == null)
				return -1;
			if(commonHTML.UseStringBuilderIndexOf == true && commonData.StringIndexOfMethod != null)
			{
				try
				{
					if(startIndex < 0)
					{
						startIndex = 0;
					}
					else if(startIndex >= sb.Length)
					{
						startIndex = 0;
					}
					if(ignoreCase)
					{
						return (int)commonData.StringIndexOfMethod.Invoke(sb.ToString(), new object[]{__value, startIndex, sb.Length - startIndex, Enum.ToObject(commonData.StringComparisionType, 3)});
					}
					else
					{
						return (int)commonData.StringIndexOfMethod.Invoke(sb.ToString(), new object[]{__value, startIndex, sb.Length - startIndex, Enum.ToObject(commonData.StringComparisionType, 2)});

					}
				}
				catch(Exception ex)
				{
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
					{
						commonLog.LogEntry("StringBuilderIndexOf invoke failed {0} Value: {1} StartIndex: {2} Case: {3} ", ex.Message, __value, startIndex, ignoreCase);
					}
				}
			}

			int index;
			int length = __value.Length;
			int maxSearchLength = (sb.Length - length) + 1;

			if (ignoreCase)
			{
				for (int i = startIndex; i < maxSearchLength; ++i)
				{
					if (Char.ToLower(sb[i]) == Char.ToLower(__value[0]))
					{
						index = 1;
						while ((index < length) && (Char.ToLower(sb[i + index]) == Char.ToLower(__value[index])))
							++index;

						if (index == length)
							return i;
					}
				}

				return -1;
			}

			for (int i = startIndex; i < maxSearchLength; ++i)
			{
				if (sb[i] == __value[0])
				{
					index = 1;
					while ((index < length) && (sb[i + index] == __value[index]))
						++index;

					if (index == length)
						return i;
				}
			}

			return -1;
		}
		*/


		private void ___setEnqueuedCounter(bool _IsEnqueued, CHtmlThreadPoolQueueObjectType _DrawType)
		{
			if(_IsEnqueued)
			{
		
				if(_DrawType == CHtmlThreadPoolQueueObjectType.UrlStyleSheet)
				{
                    System.Threading.Interlocked.Increment(ref this.___StyleSheetOnlyFileDownloadPendingCount);
				}
				else if(_DrawType == CHtmlThreadPoolQueueObjectType.UrlScript)
				{
                    System.Threading.Interlocked.Increment(ref this.___StyleScriptFileDownloadPendingCount);
				}
                System.Threading.Interlocked.Increment(ref this.___StyleScriptFileDownloadRequestedTotalCount);

			}
		}
		
		internal void ___processDocumentEnqueuedScripts(CHtmlEnqeueStatusType __TargetProcessStatus)
		{
            if (System.Threading.Monitor.TryEnter(this.___DeferEnqueueProcessEnqueuedLockingObject,0))
            {
                int ___OriginalAysncScriptCount = this.___DeferredEnqueuedScriptCount;
                int ___EnqueueRunCount = 0;
                try
                {
                    int ___OriginalScriptEventListCount = this.___EnqueuedScriptList.Count;
                    for (int i = ___OriginalScriptEventListCount - 1; i >= 0; i--)
                    {
                        CHtmlScriptResultElement _scriptElement = this.___EnqueuedScriptList[i] as CHtmlScriptResultElement;

                        DateTime ___dtStart = DateTime.Now;
                        if (_scriptElement.result == (int)__TargetProcessStatus && _scriptElement.IsCompiled == false)
                        {

                            DateTime ___dtStartScript = DateTime.Now;
                            TimeSpan ___tpSpan;



                            if (this.___IsMultiversalDocument == true)
                            {
                                CHtmlMultiversalWindow ___currentWindow = this.___getMultiversalWindow();
                                if (___currentWindow != null)
                                {
                                    this.___scriptEventList.Add(_scriptElement);
                                    this.___EnqueuedScriptList.RemoveAt(i);

                                    ___EnqueueRunCount++;
                                    try
                                    {
                                        _scriptElement.IsCompiled = true;
                                        ___currentWindow.execute(_scriptElement.text, _scriptElement.language);
                                        ___tpSpan = DateTime.Now.Subtract(___dtStartScript);
                                        _scriptElement.result = 200;
                                        _scriptElement.resultText = "[Compile Enqued Scripts] '" + _scriptElement.href + "'" + ___tpSpan.TotalMilliseconds.ToString() + " ms";
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                                        {
                                            commonLog.LogEntry(_scriptElement.resultText);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ___tpSpan = DateTime.Now.Subtract(___dtStart);
                                        System.Text.StringBuilder sbError = new StringBuilder();
                                        sbError.Append("[Compile Enqued Scripts Failed] '" + _scriptElement.href + "'" + ___tpSpan.TotalMilliseconds.ToString() + " ms");

                                        _scriptElement.resultText = sbError.ToString();
                                        _scriptElement.errorDetail = commonData.GetExceptionAsString(ex);
                                        _scriptElement.IsCompiled = true;
                                        _scriptElement.result = 500;

                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                                        {
                                            commonLog.LogEntry(_scriptElement.resultText);
                                            commonLog.LogEntry(_scriptElement.errorDetail);

                                        }
                                    }
                                }
                            }
                        }



                    }
                }
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("ProcessEnqueuedScripts Error", ex);
                    }
                }
                finally
                {
                    this.___DeferredEnqueuedScriptCount  = this.___DeferredEnqueuedScriptCount - ___EnqueueRunCount;
                    System.Threading.Monitor.Exit(this.___DeferEnqueueProcessEnqueuedLockingObject);
                }
            }
		}





		/* Original Signiture
		public bool ___downloaddirectly(string __url, string __type, string __rel, string __referer,string __tagCharset, CHtmlThreadPoolQueueObjectType _actionType, string __RawUrlText, CHtmlElement ___tagElement)
		*/
		
        public bool ___downloaddirectly(string __url, string __type, string __media, string __rel, string __referer, string __charset, CHtmlThreadPoolQueueObjectType _actionType, string __RawUrlText, CHtmlElement ___tagElement, int __WaintMilliseconds, CHtmlUrlSourceType _SourceType, bool NoPageRequestUrlCheck)
		{

			try
			{
                if (this.___IsElementCreationNeedsToBeDynamic == true)
                {
                    return false; 
                }

                if (___tagElement != null)
                {
                    if (___tagElement.___IsNoScriptBlock == true)
                    {
                        return false;
                    }
                }
                if (string.IsNullOrEmpty(__url) == true)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                    {
                        commonLog.LogEntry("Enqueue Download is same url empty");
                    }
                    return false;
                }
                // Flag whether directdownload should done async

                if (this.___readyStateType == CHtmlReadytStateType.complete && this.___documentPaintedCount > 0)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                    {
                        commonLog.LogEntry("Warning!  DirectDownload entered after parseComplete {0} '{1}' ", _actionType, __url);
                    }
                    //___isDirectDownloadOperationNeedsToBeAsync = true;
                }
                if (__url[__url.Length - 1] == '\'')
                {
                    __url = __url.Remove(__url.Length - 1, 1);
                }
                if (__url.Length > 0 && (commonHTML.FasterIsWhiteSpaceLimited(__url[0]) == true ||commonHTML.FasterIsWhiteSpaceLimited(__url[__url.Length - 1]) == true))
                {
                    __url = __url.Trim();
                }
				if(string.Equals(__url, this.___URL, StringComparison.Ordinal) == true)
				{
					return false;
				}
				CHtmlDownloadInfomation __downloadInfo = new CHtmlDownloadInfomation();
				bool ___IsImageObtained = false;
				DateTime ___dtStart = DateTime.Now;
			

                if (this == null || this.___Disposing == true)
				{
					return false;
				}



				if(__url == null || __url.Length == 0)
				{
					return false;
				}

                if (NoPageRequestUrlCheck == false)
                {
                    if (this.___PageRequestedUrlList.ContainsKey(__url) == true)
                    {
                        // Prefetch Image must continue process
                        if (_actionType != CHtmlThreadPoolQueueObjectType.UrlImage)
                        {
                            return false;
                        }
                    }
                }
				if(___tagElement != null && ___tagElement.___elementTagType == CHtmlElementType.SCRIPT  && (___tagElement.___defer == true))
				{
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                    {
                        commonLog.LogEntry("Warning!  ___downloaddirectly() is called for <script defer='true'>, but execute in sync : "+ __url );
                    }
                }
#if false
                try
				{
					
					__downloadInfo.IsPool = false;
					__downloadInfo.Action = _actionType.ToString();
					__downloadInfo.Start();

					switch(_actionType)
					{
				
						case CHtmlThreadPoolQueueObjectType.UrlContent:
						case CHtmlThreadPoolQueueObjectType.UrlScript:

							if(commonHTML.KillGoogleShowAds)
							{
								if(commonHTML.IsProhibittedScriptUrl(__url))
								{
                                    if (commonHTML.NoRecoddForProhibitScripts == false)
                                    {
                                        CHtmlScriptResultElement _emptyScript = new CHtmlScriptResultElement();
                                        _emptyScript.href = string.Copy(__url);
                                        _emptyScript.IsCompiled = true;
                                        _emptyScript.result = 598;
                                        __downloadInfo.StatusCode = 598;

                                        if (Monitor.TryEnter(this.___scriptEventList.SyncRoot, 1000))
                                        {
                                            try
                                            {
                                                this.___scriptEventList.Add(_emptyScript);
                                            }
                                            finally
                                            {
                                                Monitor.Exit(this.___scriptEventList.SyncRoot);
                                            }
                                        }
                                    }
									goto AfterDirectDownload;
								}

							}
							if(commonMCS.MCSGeneralFdr.EnableUncontableServerFunctionality == true && commonThreads.IsUrlHTTPServerUncontactable(__url) == true)
							{
								CHtmlScriptResultElement _emptyScript = new CHtmlScriptResultElement();
                                _emptyScript.href = string.Copy(__url);
								_emptyScript.IsCompiled = true;
								_emptyScript.result = 422;
								
								if(Monitor.TryEnter(this.___scriptEventList.SyncRoot, 1000))
								{
									try
									{
										this.___scriptEventList.Add(_emptyScript);
									} 
									finally
									{
										Monitor.Exit(this.___scriptEventList.SyncRoot);
									}
								}
								goto AfterDirectDownload;
							}
							___processor = new HttpContentRequestsProcessor();
							___processor.Url = __url;
							try
							{
								___processor.Referer = commonURL.encodeURIComponent(___tagElement.___Document.___URL);
							}
                            catch (Exception ex)
                            {
                                if (commonLog.LoggingEnabled && commonLog.LogLevel >= 10)
                                {
                                    commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                }
                            }
							
							byte[] ___scriptByte = null;
                            string ___scriptContentType = null;
							MCS.MCSDownloadImage mcsScriptImage = commonMCS.MCSImageFdr.MCSDownloadManager.GetBlankMCSImageWithBTreeSearchByUrl(__url);
                            if (mcsScriptImage != null && string.IsNullOrEmpty(mcsScriptImage.ContentType) == false)
                            {
                                ___scriptContentType = string.Copy(mcsScriptImage.ContentType);
                            }
							if(mcsScriptImage != null)
							{
                                if (mcsScriptImage.StatusCode >= 100 && mcsScriptImage.StatusCode < 400 )
                                {
                                    if (System.IO.File.Exists(mcsScriptImage.FileLocation))
                                    {
                                        try
                                        {
                                            ___scriptByte = commonHTML.ReadAllBytes(mcsScriptImage.FileLocation);
                                            if (___scriptByte != null && mcsScriptImage.Length != ___scriptByte.Length)
                                            {
                                                ___scriptByte = ___processor.GetContentBytes(true, true, false);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            if (commonLog.LoggingEnabled && commonLog.LogLevel >= 10)
                                            {
                                                commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                            }
                                        }
                                    }
                                    else
                                    {
                                        ___scriptByte = ___processor.GetContentBytes(true, true, false);
                                        if (string.IsNullOrEmpty(___processor.Response_ContentType) == false)
                                        {
                                            ___scriptContentType = string.Copy(___processor.Response_ContentType);
                                        }
                                        
                                    }
                                }
                                else
                                {
                                    ___scriptByte = ___processor.GetContentBytes(true, true,false);
                                    if (string.IsNullOrEmpty(___processor.Response_ContentType) == false)
                                    {
                                        ___scriptContentType = string.Copy(___processor.Response_ContentType);
                                    }
                                }
							}
							else
							{
								try
								{
									___scriptByte = ___processor.GetContentBytes(true, true, false);
                                    if (string.IsNullOrEmpty(___processor.Response_ContentType) == false)
                                    {
                                        ___scriptContentType = string.Copy(___processor.Response_ContentType);
                                    }
								} 
								catch 
								{

								}
							}
                    //BytesObtained:
                            if (___scriptByte == null)
                            {
                                __downloadInfo.StatusCode = 404;
                                CHtmlScriptResultElement _emptyScript = new CHtmlScriptResultElement();
                                _emptyScript.href = string.Copy(__url);
                                _emptyScript.IsCompiled = false;
                                _emptyScript.result = 404;



                                this.___scriptEventList.Add(_emptyScript);

                                goto AfterDirectDownload;
                            }
                            else
                                if (___scriptByte != null && ___scriptByte.Length > 0)
                                {

                                    __downloadInfo.StatusCode = 200;
                                    if (string.IsNullOrEmpty(__charset) == true)
                                    {
                                        if (string.IsNullOrEmpty(___processor.CharSet) == false)
                                        {
                                            __charset = ___processor.CharSet;
                                        }

                                    }

                                    CHtmlScriptResultElement _scriptElement = CHtmlScriptProcessor.createCHtmlScriptResultElement(___scriptByte, __charset);
                                    _scriptElement.href = string.Copy(__url);
                                    _scriptElement.IsCompiled = false;
                                    string ___language  = null;
                                    if (___tagElement.___attributes.ContainsKey("language") == true)
                                    {
                                        ___language = commonHTML.GetElementScriptLanguageLowerName(___tagElement);
                                    }
                                    else
                                    {
                                        if (string.IsNullOrEmpty(___scriptContentType) == false)
                                        {
                                            ___language = string.Copy(___scriptContentType);
                                        }
                                    }

                                    int langSlashPos = -1;
                                    if (string.IsNullOrEmpty(___language) == false)
                                    {
                                        langSlashPos = ___language.IndexOf('/');
                                    }
                                    if(langSlashPos > -1)
                                    {
                                        ___language = ___language.Substring(langSlashPos + 1);
                                    }
                                    _scriptElement.language = ___language;
                                    if (Monitor.TryEnter(this.___scriptEventList.SyncRoot, 1000))
                                    {
                                        try
                                        {
                                            this.___scriptEventList.Add(_scriptElement);
                                        }
                                        catch (Exception ex)
                                        {
                                            if (commonLog.LoggingEnabled && commonLog.LogLevel >= 10)
                                            {
                                                commonLog.LogEntry(" this.___scriptEventList.Add(_scriptElement) Error. ", ex);
                                            }
                                        }
                                        finally
                                        {
                                            Monitor.Exit(this.___scriptEventList.SyncRoot);
                                        }
                                    }
                                    bool ___isContentTypeSkip = false;
                                    if (string.IsNullOrEmpty(___scriptContentType) == false && string.Equals(___scriptContentType, "text/javascript", StringComparison.OrdinalIgnoreCase) == false)
                                    {
                                      
                                        int slashpos = ___scriptContentType.IndexOf('/');
                                        if (slashpos > 0)
                                        {
                                            string slashafterContentType = ___scriptContentType.Substring(slashpos +1);
                                            if (slashafterContentType.StartsWith("javascript", StringComparison.OrdinalIgnoreCase) == true)
                                            {
                                                ___isContentTypeSkip = false;
                                            }
                                            else if (string.Equals(slashafterContentType, "x-javascript", StringComparison.OrdinalIgnoreCase) == true)
                                            {
                                                ___isContentTypeSkip = false;
                                            }
                                            else
                                            {
                                                ___isContentTypeSkip = true;
                                            }
                        
                                        }
                                        else
                                        {
                                            ___isContentTypeSkip = true;
                                        }


                                    }
                                    else if (string.IsNullOrEmpty(___scriptContentType) == true)
                                    {
                                        ___isContentTypeSkip = false;
                                    }
                                    // ====================================================
                                    // Some Server returns Content/Type other than text/javascript
                                    // in case of it, we refer attributes type string as final judgement.
                                    // ====================================================
                                    if (___isContentTypeSkip == true)
                                    {
                                        if (commonHTML.isElementAttributeTypeExecutableScript(___tagElement) == true)
                                        {
                                            int posTypeSlash = ___tagElement.___type.IndexOf('/');
                                            if (posTypeSlash > -1 && posTypeSlash + 2 < ___tagElement.___type.Length )
                                            {
                                                ___scriptContentType = ___tagElement.___type.Substring(posTypeSlash +1);
                                                ___language = ___scriptContentType;
                                            }
                                            else
                                            {
                                                ___scriptContentType = string.Copy(___tagElement.___type);
                                                ___language = ___scriptContentType;
                                            }
                                            ___isContentTypeSkip = false;
                                        }
                                    }

                                    if (___isContentTypeSkip)
                                    {
                                        _scriptElement.result = -1;
                                        _scriptElement.resultText = string.Format("downloaddirectly {0} {1} {2} {3}" ,__url , "ContentType: '" , ___scriptContentType , "' is not 'text/javascript'. Skip.");
                                        if (commonLog.LoggingEnabled && commonLog.LogLevel >= 10)
                                        {
                                            commonLog.LogEntry(_scriptElement.resultText);
                                        }

                                        goto AfterDirectDownload;
                                    }

                                    if (commonMCS.MCSGeneralFdr.EnableBrowserClientScript)
                                    {
                                        DateTime ___dtStartScript = DateTime.Now;
                                        TimeSpan ___tpSpan;
                                        if (this.___IsMultiversalDocument)
                                        {
                                            CHtmlMultiversalWindow __multiWindow = this.___getMultiversalWindow();
                                            if (__multiWindow != null || this.___MultiversalWindowWeakReference != null)
                                            {
                                                try
                                                {
                                                    _scriptElement.IsCompiled = true;
                                                // ========================================

                                                if (this.___isHtmlNotUsePrefetchThread == false && this.___isPrefetchThreadStarted == false)
                                                {
                                                    // ==============================
                                                    //  Prefetch Thread will run only
                                                    // 1) HTML ResponseCompleted
                                                    // 2) Parse is not completedYet
                                                    // ==============================

                                                    try
                                                    {
                                                        this.___run_prefetch_element_src_thread();
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        if (commonLog.LoggingEnabled && commonLog.LogLevel > 8)
                                                        {
                                                            commonLog.LogEntry("___run_prefetch_element_src_thread() Error", ex);
                                                        }
                                                    }

                                                }




                                                    // ========================================
                                          
                                                    if (___MultiversalWindow != null)
                                                    {
                                                        __multiWindow.execute(_scriptElement.text, ___language);
                                                        ___tpSpan = DateTime.Now.Subtract(___dtStartScript);
                                                        _scriptElement.result = 200;
                                                        _scriptElement.resultText = "[Compile Success via DirectDownload] '" + _scriptElement.href + "'" + ___tpSpan.TotalMilliseconds.ToString() + " ms";
                                                    }
                                                    if (commonLog.LoggingEnabled && commonLog.LogLevel >= 8)
                                                    {
                                                        commonLog.LogEntry(_scriptElement.resultText);
                                                    }
                                                if (___tagElement != null)
                                                {
                                                    if (___tagElement.___ElementLoadFunctionWeakReference != null)
                                                    {

                                                        if (commonLog.LoggingEnabled && commonLog.LogLevel >= 8)
                                                        {
                                                            commonLog.LogEntry("about to execute element onload {0}...", ___tagElement.toLogString());

                                                        }
                                                        CHtmlMultiversalWindow ___multiWindow = ___MultiversalWindow;
                                                        if (___multiWindow != null)
                                                        {
                                                            ___multiWindow.___executeElementEventFunction("onload", ___tagElement, ___tagElement.___ElementLoadFunctionWeakReference.Target, null);
                                                            ___tagElement.___ElementLoadFunctionWeakReference = null;
                                                        }
                                                    }
                                                    else if (___tagElement.___ElementReadyStateChangeFunctionWeakReference != null)
                                                    {


                                                        if (commonLog.LoggingEnabled && commonLog.LogLevel >= 8)
                                                        {
                                                            commonLog.LogEntry("about to execute element onreadystatechange {0}...", ___tagElement.toLogString());
                                                        }
                                                        CHtmlMultiversalWindow ___multiWindow = ___MultiversalWindow;
                                                        if (___multiWindow != null)
                                                        {
                                                            ___multiWindow.___executeElementEventFunction("onload", ___tagElement, ___tagElement.___ElementReadyStateChangeFunctionWeakReference.Target, null);
                                                            ___tagElement.___ElementReadyStateChangeFunctionWeakReference = null;
                                                        }
                                                    }

                                                }
                                                }
                                                catch (Exception ex)
                                                {
                                                    ___tpSpan = DateTime.Now.Subtract(___dtStart);
                                                    System.Text.StringBuilder sbError = new StringBuilder();
                                                    sbError.Append("[Compile Error via DirectDownload] '" + _scriptElement.href + "'" + ___tpSpan.TotalMilliseconds.ToString() + " ms");

                                                    _scriptElement.resultText = sbError.ToString();
                                                    _scriptElement.errorDetail = commonData.GetExceptionAsString(ex);
                                                    _scriptElement.IsCompiled = true;
                                                    _scriptElement.result = 500;

                                                    if (commonLog.LoggingEnabled && commonLog.LogLevel >= 5)
                                                    {
                                                        commonLog.LogEntry(_scriptElement.resultText);
                                                        commonLog.LogEntry(_scriptElement.errorDetail);

                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            
                                        }
                                    }
                                    ___IsImageObtained = true;
                                }
							break;
						case CHtmlThreadPoolQueueObjectType.UrlStyleSheet:
						{
							ArrayList arStyleLists = null;
                            bool __DoNotPerformFromList = false;
							MCS.MCSDownloadImage mcsStyleCache = commonMCS.MCSImageFdr.MCSDownloadManager.GetBlankMCSImageWithBTreeSearchByUrl(__url);
							Threading.ThreadSCQL scql = null;
							if( mcsStyleCache  == null)
							{
								scql = new Threading.ThreadSCQL(new TimeSpan(0));
								scql.WorkObject = new Threading.WorkingObjectInfo();
                                scql.WorkObject.OwnerDocumentWeakReference = new WeakReference(this, false);
                                scql.WorkObject.RequestType = Threading.IRequestType.Draw;
                                scql.WorkObject.Text = string.Copy(__url);
								scql.WorkObject.DrawType = _actionType;
                                if (string.IsNullOrEmpty(__charset) == false)
                                {
                                    scql.WorkObject.CharSet = __charset;
                                } else
                                {
                                    if (string.IsNullOrEmpty(this.___charset) == false)
                                    {
                                        scql.WorkObject.CharSet = string.Copy(this.___charset);
                                    }
                                }
								scql.WorkObject.WillAddToHistory = false;
                                // 1st) CHtmlDocument
                                scql.WorkObject.TargetObject1Reference = new WeakReference(this, false);
                                // 2nd : Element
                                scql.WorkObject.TargetObject2Reference = new WeakReference(___tagElement, false);
                                if (string.IsNullOrEmpty(__media) == false)
                                {
                                    scql.WorkObject.Media = string.Copy(__media);
                                }

								scql.Execute(scql.WorkObject);
								arStyleLists = scql.ResultList;
                                __DoNotPerformFromList = true;
							}
							else
							{
								try
								{
									byte[] bts = commonHTML.ReadAllBytes(mcsStyleCache.FileLocation);
									if(bts != null)
									{
										System.Text.Encoding encStyle = null;
										string _charset = commonHTML.GetCharsetFromCSSBytes(bts);
                                        if (string.IsNullOrEmpty(_charset) == false && __charset.Length != 0)
										{
											_charset = __charset;
										}
										if(string.IsNullOrEmpty(_charset) == false && _charset .Length > 0)
										{
											encStyle = System.Text.Encoding.GetEncoding(commonData.GetCharsetFromHTMLCharset(_charset));
										}
										if(encStyle == null)
										{
											encStyle = System.Text.Encoding.UTF8;
										}
										string strStyle = encStyle.GetString(bts);
                                        CHtmlCollection ___elementRuleList = null;
                                        if (___tagElement != null)
                                        {
                                            if (___tagElement.___sheet != null)
                                            {
                                                ___elementRuleList = ___tagElement.___sheet.___cssRules;
                                                __DoNotPerformFromList = true;
                                            }
                                        }
                                        arStyleLists = commonHTML.CreateCSSRuleCollectionFromStyleSheetString(strStyle, __url,__media,___tagElement.___MediaQueryNode, ___elementRuleList, this.___StyleQueue, this.___cssRuleBlackList, ___tagElement);
									}
								}
                                catch (Exception ex)
                                {
                                    if (commonLog.LoggingEnabled && commonLog.LogLevel >= 10)
                                    {
                                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                    }
                                }		
							}

                            if (__DoNotPerformFromList == false)
                            {
                            	int arStyleListsCount = arStyleLists.Count;
                                for (int i = 0; i < arStyleListsCount; i++)
                                {
                                    CHtmlCSSRule ___sPart = arStyleLists[i] as CHtmlCSSRule;
                                    __downloadInfo.StatusCode = 200;
                                    if (___sPart.___ruleType  == CHtmlCSSRule.CSSRuleType.Import_Rule && string.IsNullOrEmpty(___sPart.___baseUrl) == false)
                                    {
                                        if (string.Equals(___sPart.___baseUrl, __url,StringComparison.Ordinal) == true)
                                        {
                                            if (commonLog.LoggingEnabled && commonLog.LogLevel >= 8)
                                            {
                                                commonLog.LogEntry("Strange. DirectDownload Styleheet @import url is same as original url. Skip.");

                                            }
                                            continue;
                                        }
                                        if (this.___IsHtmlBodyTagPassed == false)
                                        {
                                            bool __IsEnqueued = this.___downloadviaQueue(___sPart.___baseUrl, "StyleSheet", __media, null, null, __charset, CHtmlThreadPoolQueueObjectType.UrlStyleSheet, ___sPart.___baseUrl, ___tagElement, 0, CHtmlUrlSourceType.Unknown, NoPageRequestUrlCheck);
                                            if (__IsEnqueued)
                                            {
                                                System.Threading.Interlocked.Increment(ref this.___StyleSheetOnlyFileDownloadPendingCount);

                                                System.Threading.Interlocked.Increment(ref this.___StyleScriptFileDownloadRequestedTotalCount);
                                            }
                                        }
                                        else
                                        {
                                            try
                                            {
                                                if (commonLog.LoggingEnabled && commonLog.LogLevel >= 8)
                                                {
                                                    commonLog.LogEntry("DirectDownload has @import and body has been passed. Use Direct");
                                                }
                                                this.___downloaddirectly(___sPart.___baseUrl, "StyleSheet", __media, null, null, __charset, CHtmlThreadPoolQueueObjectType.UrlStyleSheet, ___sPart.___baseUrl, ___tagElement, 0, CHtmlUrlSourceType.Unknown,  NoPageRequestUrlCheck);
                                            }
                                            catch (Exception ex)
                                            {
                                                if (commonLog.LoggingEnabled && commonLog.LogLevel >= 8)
                                                {
                                                    commonLog.LogEntry("DirectDownload StyleSheet @import Error", ex);
                                                }
                                            }
                                            continue;
                                        }
                                        continue;
                                    }
                                    this.___mergeCHtmlStyleElementIntoDocumentStyleSheet(___sPart);
                                }
                            }

							if(scql != null)
							{
								scql.Dispose();
								scql = null;
							}
							break;
						}
					}
				} 
				catch(Exception ex)
				{
					try
					{
						__downloadInfo.StatusCode = 500;
						if(ex is System.Net.WebException)
						{
							if(commonHTML.IsNameResolutionFailureException(ex))
							{
                                string strHostName = commonHTML.GetHostFromUrlString(__url);
								if(commonMCS.MCSGeneralFdr.EnableUncontableServerFunctionality && commonThreads.UncontableServerList.ContainsKey( strHostName) == false)
								{
									commonThreads.UncontableServerList.Add(strHostName,DateTime.Now);
									if(commonLog.LoggingEnabled && commonLog.LogLevel >= 10)
									{
										commonLog.LogEntry("Uncontactable server list created entry for '{0}'",  strHostName);
									}
								}
							}
							if(_actionType == CHtmlThreadPoolQueueObjectType.UrlScript)
							{
						
								CHtmlScriptResultElement _emptyScript = new CHtmlScriptResultElement();
                                _emptyScript.href = string.Copy(__url);
								_emptyScript.IsCompiled = true;
								_emptyScript.result = 404;
								_emptyScript.text = ex.Message + " " + ex.StackTrace;
								if(Monitor.TryEnter(this.___scriptEventList.SyncRoot, 3000))
								{
									try
									{
										this.___scriptEventList.Add(_emptyScript);
									} 
									finally
									{
										Monitor.Exit(this.___scriptEventList.SyncRoot);
									}
								}
							}
							if(ex is System.Net.WebException)
							{
								try
								{

									System.Net.WebException webex = ex as System.Net.WebException;
									if(webex != null && webex.Response != null)
									{
										webex.Response.Close();
										commonData.DisposeObject(webex.Response);
									}
								
								}
                                catch (Exception ex1)
                                {
                                    if (commonLog.LoggingEnabled && commonLog.LogLevel >= 10)
                                    {
                                        commonLog.LogEntry("DirectDownload Excpetion", ex1);
                                    }
                                }
							}
						}
						if(commonLog.LoggingEnabled && commonLog.LogLevel >= 8)
						{
                            if (ex is NullReferenceException)
                            {
                                commonLog.LogEntry("DirectDownload Exception ", ex);
                            }
                            else
                            {
                                commonLog.LogEntry("DirectDownload Exception ", ex);
                            }
						}
						___IsImageObtained = false;
					} 
					catch(Exception nex)
					{
						if(commonLog.LoggingEnabled && commonLog.LogLevel >= 10)
						{
							commonLog.LogEntry("DirectDownload UncontableServerList", nex);
						}
						___IsImageObtained = false;
					}
				}
				if(___processor != null)
				{
					___processor.Dispose();
					___processor = null;
				}
#endif

			AfterDirectDownload:

				bool ___MonitorLock = false;
				try
				{
					if(Monitor.TryEnter(this.___PageRequestedUrlList_LockingObject, 1000))
					{
						___MonitorLock = true;
						__downloadInfo.Stop();
						this.___PageRequestedUrlList[__url] = __downloadInfo;
					}
				}
				finally
				{
					if(___MonitorLock)
					{
						try
						{
                            Monitor.Exit(this.___PageRequestedUrlList_LockingObject);
						}
                        catch (Exception ex)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                            }
                        }
					}
				}
				
				if(commonLog.LoggingEnabled ||System.Diagnostics.Debugger.IsAttached)
				{
					if(commonLog.CommonLogLevel < 4)
					{
						goto CompleteStage;
					}
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel > 10)
					{
						TimeSpan tpSpan = DateTime.Now.Subtract(___dtStart);
						commonLog.LogEntry("DirectPool {0} ! [{1}] {2} in {3} ms", ___IsImageObtained, _actionType, __url, tpSpan.TotalMilliseconds);
					}
				}
			CompleteStage:
				return true;
			} 
			catch(Exception exFinal)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
				{
					commonLog.LogEntry("DirectDownload unsucessfull. Url: {0} Reason :{1} " , __url, exFinal.Message);
				}
				return false;
			}
		}


  
        
        internal static void ___resetElementSizeByImageSize(CHtmlElement ___tagElement, Image __Image)
        {
            ___resetElementSizeByImageSize(___tagElement, __Image, Size.Empty);
        }
		
		internal static void ___resetElementSizeByImageSize(CHtmlElement ___tagElement, Image __Image, Size ___Size)
		{
			if(___tagElement == null)
				return;
            int __ImageWidth = 0;
            int __ImageHeight = 0;
            if (__Image != null)
            {
                __ImageHeight = __Image.Height;
                __ImageWidth = __Image.Width;
            }
            else
            {
                __ImageWidth = ___Size.Width;
                __ImageHeight = ___Size.Height;
            }
			if(___tagElement.___elementTagType == CHtmlElementType.IMG || ___tagElement.___elementTagType  == CHtmlElementType.INPUT)
			{
				if((___tagElement.___offsetWidth  > 0 || ___tagElement.___offsetHeight > 0) && (___tagElement.___offsetWidth  == 0 || ___tagElement.___offsetHeight == 0))
				{
					// If one of parameter is specified. We should calculate appropriate Size According Size of Image
					
					if(___tagElement.___offsetWidth > 0)
					{
						double _w1 = ___tagElement.___offsetWidth;
                        double _wRatio1 = _w1 / (double)__ImageWidth;
                        ___tagElement.___offsetHeight = __ImageHeight * _wRatio1;
						___tagElement.___style.___Height = ___tagElement.___offsetHeight.ToString() + "px";
						goto SizeResetDone;
					}
					if(___tagElement.___offsetHeight > 0)
					{
						double _h1 = ___tagElement.___offsetHeight;
                        double _hRatio1 = _h1 / (float)__ImageHeight;
                        ___tagElement.___offsetWidth = __ImageWidth * _hRatio1;
                        ___tagElement.___style.Width = ___tagElement.___offsetWidth.ToString() + "px";
						goto SizeResetDone;
					}
				}
				if(___tagElement.___offsetWidth <= 0)
				{
                    ___tagElement.___offsetWidth = __ImageWidth;
                    ___tagElement.___style.Width = ___tagElement.___offsetWidth.ToString() + "px";
				}
				if(___tagElement.___offsetHeight <= 0)
				{
                    ___tagElement.___offsetHeight = __ImageHeight;
                    ___tagElement.___style.Height = ___tagElement.___offsetHeight.ToString() + "px";
				}
			SizeResetDone:
				if(___tagElement.___offsetHeight > 0 && ___tagElement.___offsetWidth > 0)
				{
                    ___tagElement.___style.___styleSizeMode = CHtmlSizeModeType.Both;
				}
			}
		}

        public bool ___downloadviaQueue(string __url, string __type, string __media, string __rel, string __referer, string __charset, CHtmlThreadPoolQueueObjectType _actionType, string __RawUrlText, CHtmlElement ___tagElement, int __WaintMilliseconds, CHtmlUrlSourceType _SourceType, bool NoPageRequestUrlCheck)
        {
            throw new NotImplementedException();
        }
#if false
        public bool ___downloadviaQueue(string __url, string __type, string __media, string __rel, string __referer, string __charset, CHtmlThreadPoolQueueObjectType _actionType, string __RawUrlText, CHtmlElement ___tagElement, int __WaintMilliseconds, CHtmlUrlSourceType _SourceType, bool NoPageRequestUrlCheck)
		{
			if(this == null)
				return false;
			if(this.___IsNavigationStopped)
				return false;
            if (___tagElement != null)
            {
                if (___tagElement.___IsNoScriptBlock == true)
                {
                    return false;
                }
            }
            if (string.IsNullOrEmpty(__url) == true)
            {
                if (commonLog.LoggingEnabled && commonLog.LogLevel >= 8)
                {
                    commonLog.LogEntry("Enqueue Download is same url empty");
                }
                return false;
            }
			if(string.Equals(__url,this.___URL, StringComparison.Ordinal) == true)
			{
				if(commonLog.LoggingEnabled && commonLog.LogLevel >= 8)
				{
					commonLog.LogEntry("Enqueue Download is same url of document. abort");
				}
				return false;
			}


            
			if(__url.Length  <= this.___URL.Length +3)
			{
				if(__url.StartsWith(this.___URL, StringComparison.OrdinalIgnoreCase))
				{
					string __UrlDiff = __url.Replace(this.___URL, "");
					switch(__UrlDiff)
					{
						case "":
						case "/":
						case ".":
						case "\\":
						case " ":
						case "\'":
							if(commonLog.LoggingEnabled && commonLog.LogLevel >= 10)
							{
								commonLog.LogEntry("Enqueue Download is same url of document. Diff :" + __UrlDiff);
							}
							return false;
					}
				}
			}

			if(__url == null || __url.Length == 0)
			{
				return false;
			}
			if(__url[__url.Length -1] == '\'')
			{
				__url = __url.Remove(__url.Length -1, 1);
			}
            if (__url[__url.Length - 1] == '\"')
            {
				__url = __url.Remove(__url.Length -1, 1);
			}
            if (string.IsNullOrEmpty(__url) == false && (commonHTML.FasterIsWhiteSpaceLimited(__url[0])== true ||commonHTML.FasterIsWhiteSpaceLimited(__url[__url.Length - 1]) == true))
            {
                __url = __url.Trim();
            }
			if(string.Equals(__url, this.___URL, StringComparison.Ordinal) == true)
			{
				if(commonLog.LoggingEnabled && commonLog.LogLevel >= 10)
				{
					commonLog.LogEntry("Bad Url {0} : {1}", __url, this.___curHTMLParsePosition );
				}
				return false;
			}
			if(commonHTML.KillGoogleShowAds)
			{
				if(commonHTML.IsProhibittedScriptUrl(__url) == true)
				{
                    if (commonHTML.NoRecoddForProhibitScripts == false)
                    {
                        CHtmlScriptResultElement _emptyScript = new CHtmlScriptResultElement();
                        _emptyScript.href = string.Copy(__url);
                        _emptyScript.IsCompiled = true;
                        _emptyScript.result = 597;
                        _emptyScript.text = "";
                        if (Monitor.TryEnter(this.___scriptEventList.SyncRoot, 1000))
                        {
                            try
                            {
                                this.___scriptEventList.Add(_emptyScript);
                            }
                            finally
                            {
                                Monitor.Exit(this.___scriptEventList.SyncRoot);
                            }
                        }
                    }
					return true;
				}
			}
			
			bool IsAlreadyQueue = false;
            if (NoPageRequestUrlCheck == false)
            {
                if (this.___PageRequestedUrlList.ContainsKey(__url) == false)
                {
                    bool __MonitorEntered = false;
                    try
                    {
                        __MonitorEntered = true;
                        if (Monitor.TryEnter(this.___PageRequestedUrlList_LockingObject, 5000))
                        {
                            __MonitorEntered = true;
                            CHtmlDownloadInfomation downInfo = new CHtmlDownloadInfomation();
                            downInfo.Start();
                            downInfo.IsPool = true;
                            downInfo.Action = _actionType.ToString();
                            this.___PageRequestedUrlList[__url] = downInfo;

                        }
                      
                    }
                    finally
                    {
                        if (__MonitorEntered)
                        {
                            try
                            {
                                Monitor.Exit(this.___PageRequestedUrlList_LockingObject);
                            }
                            catch { }
                        }
                    }
                }
                else
                {
                    return false;
                }
            }

			if(IsAlreadyQueue == false)
			{
				TimeSpan tpWait = new TimeSpan(0,0,0,0, __WaintMilliseconds);
				if(_actionType == CHtmlThreadPoolQueueObjectType.UrlStyleSheet)
				{
					tpWait = new TimeSpan(0,0,0,0,0);
					__WaintMilliseconds = 0;
				}

				Threading.ThreadSCQL  scql = new Threading.ThreadSCQL(tpWait);
			
				// -------------------------------------------------------------------------------------
				//
				// UrlImagePrefetch Does not returns anything. Just Put Image Into MCS.
				//
				// -------------------------------------------------------------------------------------

					
					//scql.PoolRequestCompleted +=new Threading.PoolRequestEventHandler(___downloadviaQueue_queuecompleted);
				
			
				// --- Set Request Type ------------------------
				Threading.WorkingObjectInfo workObject = new  Threading.WorkingObjectInfo();
                workObject.OwnerDocumentWeakReference = new WeakReference(this, false);
				workObject.ObjectHandle = (long)this.GetHashCode();
				workObject.ControlHandle = (long)this.___ManagedControlHandle;
				//workObject.scp_model_type = typeof(SCQLProvider.SCPType.Location);
				workObject.complete_oil = "";

				workObject.partial_oil = "";

				workObject.Text = string.Copy(__url);

				workObject.INSTANCE_NAME = string.Copy(workObject.Text);

                if (string.IsNullOrEmpty(___type) == false)
                {
                    workObject.Request_ContentType  = __type;
                }
                if (__rel != null && __rel.Length > 0)
                {
                    workObject.Rel = commonHTML.FasterToLower(__rel);
                }
                if (__media != null && __media.Length > 0)
                {
                    workObject.Media = string.Copy(__media);
                }
                workObject.ImageSrcType = _SourceType;
				
				
				if(_actionType == CHtmlThreadPoolQueueObjectType.UrlStyleSheet)
				{
					workObject.IsTopPriority = true;
				}
       
                if (_actionType != CHtmlThreadPoolQueueObjectType.UrlStyleSheet)
                {
                    if (workObject.IsTopPriority == true)
                    {
                        if (__WaintMilliseconds == 0)
                        {

                            workObject.IsTopPriority = false;
                        }
                    }
                }
                else
                {
                    if (_actionType == CHtmlThreadPoolQueueObjectType.UrlStyleSheet)
                    {
                        // 1st) CHtmlDocument
                        workObject.TargetObject1Reference = new WeakReference(this, false);
                        // 2nd : Element
                        workObject.TargetObject2Reference = new WeakReference(___tagElement, false);
                    }
                }
                if(___tagElement != null)
                {
                    workObject.TargetElementWeakReference = new WeakReference(___tagElement, false);
                    ___tagElement.___elementResouceDownloadElapsedWatch = new System.Diagnostics.Stopwatch();
                    ___tagElement.___elementResouceDownloadElapsedWatch.Start();
                }
         
				workObject.RequestType = Threading.IRequestType.Draw;
                if (string.IsNullOrEmpty(__type) == false)
                {
                    workObject.Request_ContentType = __type;
                }
				workObject.DrawType = _actionType;
				if(_actionType == CHtmlThreadPoolQueueObjectType.HtmlDocument)
				{
					if(commonLog.LoggingEnabled && commonLog.LogLevel >= 10)
					{
						commonLog.LogEntry("Unexpected Enqueue Object: {0}", _actionType);
					}
					return false;
				}
				workObject.TargetControlName = this.GetType().Name;
				
				workObject.StartTime = DateTime.Now;
				try
				{
					if(__referer != null && __referer.Length != 0)
					{
						workObject.Referer = commonHTML.UrlEncode(__referer);
					}
				}
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.LogLevel >= 10)
                    {
                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                    }
                }
                if (string.IsNullOrEmpty(__RawUrlText) == false)
                {
                    workObject.RawText = string.Copy(__RawUrlText);
                }
                if (string.IsNullOrEmpty(__charset) == false)
                {
                    workObject.CharSet = string.Copy(__charset);
                }
                else
                {
                    if (string.IsNullOrEmpty(this.___charset) == false)
                    {
                        workObject.CharSet = string.Copy(this.___charset);
                    }
                }
                
				// ----------------------------------------------
				//commonThreads.UnicusPoolThreads.QueueWorkItem(new System.Threading.WaitCallback(scql.Execute),workObject);
                if (commonLog.LoggingEnabled && commonLog.LogLevel >= 10)
                {
                    commonLog.LogEntry("__downloadviaQueue({0}) has enqueqd...", __url);
                }
                return true;
			}
			return false;
		}

#endif
        private static void ___setParentLookupedListToSameInlineLevelAndInlineShifted(CHtmlElement textElement)
		{
			if(textElement == null)
				return;
			int ___ParentInlineTextLookedupedListCount = textElement.___ParentInlineTextLookedupedList.Count;
			for(int i = 0; i < ___ParentInlineTextLookedupedListCount; i ++)
			{
				CHtmlElement ___elementLookuped = textElement.___ParentInlineTextLookedupedList[i] as CHtmlElement;
				if(___elementLookuped  != null)
				{
                    if (___elementLookuped.___IsElementBlock == false)
                    {
                        if (commonHTML.elementTagTypesNormallyBlockSortedList.ContainsKey(___elementLookuped.___elementTagType) == false)
                        {

                                ___elementLookuped.___ElementInlineLevel = textElement.___ElementInlineLevel;
                                ___elementLookuped.___ElementInlineShifted = true;
                                ___elementLookuped.X_DOM_ProcessorAdd("This element is between of the TextElement. Set Flag to Same as the bottom Element");
                            
                        }
                    }
				}

			}
		}
        private bool ___IsStyleEnqueued()
        {
            if (this.___StyleQueue == null)
            {
                return false;
            }
            if (this.___StyleQueue.Count > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        private void ___CreateCHtmlFontInfoInfoForElementAndHoverStyle(CHtmlElement ___element)
        {
            if (___element.___style.___StyleFontInfo == null)
            {
                Color tmpColor = Color.Black;
                
                ___element.___style.___StyleFontInfo = commonHTML.GetCHtmlFontInfoFromTagElementStyle(___element, ___element.___style,  this, null);

            }
            if (___element.___styleHover.___StyleFontInfo == null)
            {
                Color tmpColor = Color.Black;
                
                if (___element.___styleHover.___FontRelatedCount > 0)
                {
                    ___element.___styleHover.___StyleFontInfo = commonHTML.GetCHtmlFontInfoFromTagElementStyle(___element, ___element.___styleHover,  this, ___element.___style.___StyleFontInfo);
                    if (___element.___style.___StyleFontInfo != null)
                    {
                        // to avoid recalucutation,
                        // Hover Font Size must be same as style font size 

                        if (___element.___styleHover.___StyleFontInfo.FontSize != ___element.___style.___StyleFontInfo.FontSize)
                        {
                            ___element.___styleHover.___StyleFontInfo.FontSize = ___element.___style.___StyleFontInfo.FontSize;
                        }
                    }
                }
                else
                {
                    ___element.___styleHover.___StyleFontInfo = null;

                }
            }
        }
        internal void ___lookupTextElementWorkingPriorTextElement(CHtmlElement textElement, CHtmlElement ___textElementParentElement, ref CHtmlElement ___WorkingPriorTextElement, ref bool ___IsWorkingPriorElementIsVisibleBlock, ref  bool ___NotToUseDrawingElement)
        {
            // parentElement is first visibile element
            CHtmlElement ___LookupDownChild = ___textElementParentElement;
            textElement.___ParentInlineTextLookedupedList.Add(___LookupDownChild);
            CHtmlElement ___parentparentElement = ___textElementParentElement.___parent as CHtmlElement;
            int ____ParentTextPriorSearchedCount = 0;

            while (___parentparentElement != null)
            {
                ____ParentTextPriorSearchedCount++;
                if (___parentparentElement != null)
                {
                    if (___parentparentElement.___elementTagType == CHtmlElementType.BODY || ___parentparentElement.___elementTagType == CHtmlElementType.HTML || ___parentparentElement.___elementTagType == CHtmlElementType.HEAD)
                    {
                        textElement.X_DOM_ProcessorAdd("Parent Lookuped Reached to root " + ___parentparentElement.ToString());

                        ___IsWorkingPriorElementIsVisibleBlock = true;
                        ___NotToUseDrawingElement = true;
                        goto GetNextParent;
                    }
                    if (____ParentTextPriorSearchedCount > 100)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 3)
                        {
                            commonLog.LogEntry("Parent Top Element Search Infinte loop? {0} abort...", textElement);
                        }
                        textElement.X_DOM_ProcessorAdd("Parent Lookuped may be infinte loop " + textElement.ToString());

                        ___IsWorkingPriorElementIsVisibleBlock = true;
                        ___NotToUseDrawingElement = true;
                        goto GetNextParent;

                    }

                    if (___parentparentElement.___childNodes.Count > 0)
                    {
                        if (object.ReferenceEquals(___parentparentElement.___childNodes[0], ___LookupDownChild) == true)
                        {
                            goto GetNextParent;
                        }
                        else
                        {
                            // If Parent Node Index is greater than 1 previous Node may be text Element or Inline Text Block
                            // 
                            // -[Block]------+---[P]
                            //               |  
                            //               +--[#TEXT] or [SPAN]
                            //               +--[A]    ---+[#TEXT]
                            //                     
                            //
                            if (___LookupDownChild.___ChildNodeIndex == -1)
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 3)
                                {
                                    commonLog.LogEntry("Parent Top Element Search Failed but cont..." + ___LookupDownChild.ToString());
                                }
                                goto GetNextParent;
                            }
                            CHtmlElement ___priorElementOfparentparentElement = null;
                            int ___LookUpDownChildIndexMinusOne = ___LookupDownChild.___ChildNodeIndex - 1;
                            for (int prevIndex = ___LookUpDownChildIndexMinusOne; prevIndex >= 0; prevIndex--)
                            {
                                try
                                {
                                    ___priorElementOfparentparentElement = ___parentparentElement.___childNodes[prevIndex] as CHtmlElement;
                                    if (___priorElementOfparentparentElement == null)
                                    {
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 3)
                                        {
                                            commonLog.LogEntry("Parent Top Element Search Failed but cont..." + ___LookupDownChild.ToString());
                                        }
                                        continue;
                                    }
                                    else
                                    {
                                        if (commonHTML.IsElemeneITextOrIDraw(___priorElementOfparentparentElement) == true)
                                        {
                                            // Okay. This is the prior TextElement
                                            ___WorkingPriorTextElement = ___priorElementOfparentparentElement;
                                            if (___priorElementOfparentparentElement.___elementTagType != CHtmlElementType.BR)
                                            {
                                                textElement.___ElementInlineLevel = ___priorElementOfparentparentElement.___ElementInlineLevel + 1;
                                            }
                                            else
                                            {
                                                // Right After BR.
                                                textElement.___ElementInlineLevel = 1;

                                            }
                                            if (___priorElementOfparentparentElement.___InlineVeryTopTextElement != null)
                                            {
                                                textElement.___InlineVeryTopTextElement = ___priorElementOfparentparentElement.___InlineVeryTopTextElement;
                                                // Set LastTextElemnt reference to this textElement
                                                ___priorElementOfparentparentElement.___InlineVeryTopTextElement.___InlineLastTextElement = null;
                                                ___priorElementOfparentparentElement.___InlineVeryTopTextElement.___InlineLastTextElement = textElement;
                                            }
                                            if (textElement.___ParentInlineTextLookedupedList.Count > 0)
                                            {
                                                ___setParentLookupedListToSameInlineLevelAndInlineShifted(textElement);
                                            }

                                            ___NotToUseDrawingElement = false;


                                            return;
                                        }
                                        else if (___priorElementOfparentparentElement.___IsParentVisible == false)
                                        {
                                            continue;

                                        }
                                        else
                                        {
                                            // Node is normal tag may contains #TEXT to continue
                                            if (___priorElementOfparentparentElement.___IsElementBlock == true)
                                            {
                                                textElement.X_DOM_ProcessorAdd("Parent Prior Node Is Closed block Element :" + ___priorElementOfparentparentElement.ToString());

                                                ___IsWorkingPriorElementIsVisibleBlock = true;
                                                ___NotToUseDrawingElement = true;
                                                return;
                                            }
                                            else
                                            {
                                                // Means it is normal inline element
                                                // it may not contains any child node.ex [Img]
                                                if (___priorElementOfparentparentElement.___childNodes.Count > 0)
                                                {
                                                    CHtmlElement ___SearchedInlineTextElement = null;
                                                    try
                                                    {
                                                        ___SearchedInlineTextElement = ___SearchForLastInlineTextElementFromElementLikeRecursively(___priorElementOfparentparentElement);
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 8)
                                                        {
                                                            commonLog.LogEntry("SearchForLastInlineTextElementFromElementLikeRecursively", ex);
                                                        }
                                                    }
                                                    if (___SearchedInlineTextElement != null)
                                                    {
                                                        if (commonHTML.IsElemeneITextOrIDraw(___SearchedInlineTextElement) == true)
                                                        {
                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 3)
                                                            {
                                                                commonLog.LogEntry("Parent Text Element success Current: {0} Prior Last : {1}", textElement, ___SearchedInlineTextElement);
                                                            }
                                                            textElement.X_DOM_ProcessorAdd("Prior Text Element Lookup Obtained : " + ___SearchedInlineTextElement.toLogString());
                                                            // Okay. This is the prior TextElement
                                                            ___WorkingPriorTextElement = ___SearchedInlineTextElement;
                                                            textElement.___ElementInlineLevel = ___SearchedInlineTextElement.___ElementInlineLevel + 1;
                                                            if (___SearchedInlineTextElement.___InlineVeryTopTextElement != null)
                                                            {
                                                                textElement.___InlineVeryTopTextElement = ___SearchedInlineTextElement.___InlineVeryTopTextElement;
                                                                // Set LastTextElemnt reference to this textElement
                                                                ___SearchedInlineTextElement.___InlineVeryTopTextElement.___InlineLastTextElement = null;
                                                                ___SearchedInlineTextElement.___InlineVeryTopTextElement.___InlineLastTextElement = textElement;
                                                            }
                                                            if (textElement.___ParentInlineTextLookedupedList != null && textElement.___ParentInlineTextLookedupedList.Count > 0)
                                                            {
                                                                ___setParentLookupedListToSameInlineLevelAndInlineShifted(textElement);
                                                            }

                                                            ___NotToUseDrawingElement = false;
                                                            return;
                                                        }
                                                        else
                                                        {
                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 3)
                                                            {
                                                                commonLog.LogEntry("Parent Text Element success Current: {0} Prior Last : {1}", textElement, ___SearchedInlineTextElement);
                                                            }
                                                            textElement.X_DOM_ProcessorAdd("Prior Text Element Lookup Obtained : " + ___SearchedInlineTextElement.ToString());
                                                            // Okay. This is the prior TextElement
                                                            ___WorkingPriorTextElement = ___SearchedInlineTextElement;
                                                            ___NotToUseDrawingElement = false;
                                                            return;

                                                        }

                                                    }
                                                    else
                                                    {
                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 3)
                                                        {
                                                            commonLog.LogEntry("Parent Text Node Seach Encounters {0} it seems inline. node search needs more  : {1} ", ___priorElementOfparentparentElement, ___SearchedInlineTextElement);
                                                        }

                                                    }
                                                }
                                                if (___priorElementOfparentparentElement.___childNodes.Count == 0)
                                                {
                                                    goto GetNextParent;
                                                }
                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 3)
                                                {
                                                    commonLog.LogEntry("Parent Text Node Seach Encounters {0} it seems inline. node search has needs more : {1} TODO! ", ___priorElementOfparentparentElement, ___priorElementOfparentparentElement.___childNodes.Count);
                                                }
                                                textElement.X_DOM_ProcessorAdd("TODO : Parent Text Node is may be normal tag : " + ___priorElementOfparentparentElement.ToString());

                                                ___IsWorkingPriorElementIsVisibleBlock = true;
                                                ___NotToUseDrawingElement = true;
                                                return;

                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 3)
                                    {
                                        commonLog.LogEntry("Parent Text Node Search Error : " + ex.Message);
                                    }
                                }
                                goto GetNextParent;


                            }
                        }

                    }
                }
            GetNextParent:
                ___LookupDownChild = ___parentparentElement;
                /* Add Current Parent To be Searched List */
                textElement.___ParentInlineTextLookedupedList.Add(___LookupDownChild);
                ___parentparentElement = ___parentparentElement.___parent as CHtmlElement;

            }

        }
        /// <summary>
        /// Some TextElement offsettop may be incorrectly assigned during caluculation. This method reassign offset top from Element Before and Drawing Element Top
        /// </summary>
        /// <param name="textElement">Target Text Element</param>
        /// <param name="___WorkingPriorTextElement">BeforeElement</param>
        /// <param name="drawingElement">drawing Element</param>
        /// <param name="__topPosition"></param>
        /// <param name="__bottomPosition"></param>
        internal static void ___reassignTextElementTopAndBottomFromPreviousElement( CHtmlElement textElement, CHtmlElement  ___WorkingPriorTextElement, CHtmlDrawingObject drawingElement,ref double __topPosition, ref double __bottomPosition)
        {
            double ___drawingTop = 0;
            double ___drawingBottom = 0;
        
                ___drawingTop = (double)(drawingElement.offsetBounds.Top);
                ___drawingBottom = (double)(drawingElement.offsetBounds.Bottom);
            
            if (___WorkingPriorTextElement != null)
            {
                ___drawingTop += ___WorkingPriorTextElement.___offsetTop;
            }
            //__topPosition = ___drawingTop;
            //__bottomPosition = ___drawingTop + ___drawingBottom;
            textElement.___offsetTop = ___drawingTop;
            textElement.___offsetBottom = ___drawingBottom;
           
        }
		public void ___calculateTextElementBounds(CHtmlElement textElement)
		{
            bool ___isTextFormatMustBeDisposeOnExit = false;
            
            /*
#if DEBUG
            if (textElement.value != null && textElement.value.ToString().IndexOf("����i��", StringComparison.Ordinal) > -1)
            {
                commonLog.LogEntry("HERE");
            }
#endif
             */
            
            commonHTML.incrementMethodEnteredCounter(ref textElement.___calcBoundsMethodCount);
             
             



			CHtmlElement documentParsePriorTextElement = null;
            CSSWhiteSpaceType ___ownerWhiteSpaceType = CSSWhiteSpaceType.Normal;
		
			System.Drawing.StringFormat __textFormat =null;
			System.Drawing.Graphics grMeasure =null;
			System.Drawing.Image _tmpImage =null;
			System.Drawing.Bitmap _tmpBitmap =null;
			System.Text.StringBuilder sbTextDisplay = null;
			bool ___IsGraphicsObjetNeedsDispose = false;
			bool ___NotToUseDrawingElement = false;
			bool ___IsPreviousElementIsClosedBlock = false;
			bool ___IsWorkingPriorElementIsVisibleBlock = false;
			CHtmlElement ___WorkingPriorTextElement = documentParsePriorTextElement;
			SizeF ___TextPriorElementPositionUsed = SizeF.Empty;
			if(this.___IsDomModeFullParseMode() == false)
			{
				return;
			}
		

			/*
			if( textElement.___elementTagType != CHtmlElementType._ITEXT)
			{
				//textElement.IsCalculateElementBoundsCalled = true;
				return resultRect;
			}
			*/

		
			CHtmlElement ___textElementParentElement = textElement.___parent as CHtmlElement;
            /*
#if DEBUG
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                if (parentElement != null && parentElement.___elementTagType == CHtmlElementType.P)
                {
                    commonLog.LogEntry("TEXT " + textElement.value);
                }
            }
#endif
            */

            if (___textElementParentElement != null)
            {
                switch (___textElementParentElement.___elementTagType)
                {
                    case CHtmlElementType.CANVAS:
                    case CHtmlElementType.SCRIPT:
                    case CHtmlElementType.STYLE:
                    case CHtmlElementType.NOSCRIPT:
                    case CHtmlElementType.IFRAME:
                    case CHtmlElementType.FRAMESET:
                    case CHtmlElementType.FRAME:
                    case CHtmlElementType.NOFRAME:
                    case CHtmlElementType.TITLE:
                    case CHtmlElementType.APPLET:
                        textElement.___isCalculateElementBoundsCalled = true;
                        textElement.___IsElementVisible = false;
                        return;
                        
                }
            }


            if (___textElementParentElement.___IsElementBlock == true && ___textElementParentElement.___ElementInlineLevel == 0)
			{
				if(documentParsePriorTextElement != null && documentParsePriorTextElement.___parentWeakRef != null)
				{
					if(documentParsePriorTextElement.___getParentElement().___ElementInlineLevel > 0)
					{
                        if (___textElementParentElement != null)
						{
                            ___textElementParentElement.___ElementInlineLevel = documentParsePriorTextElement.___getParentElement().___ElementInlineLevel + 1;
						}
					}
				}
			}
			
			bool ___IsHonorsCrlf =false;
			bool ___PreserveWhiteSpace = false;
            if (___textElementParentElement != null)
            {
                ___IsHonorsCrlf = ___textElementParentElement.___AcceptsCrlf;
                ___PreserveWhiteSpace = ___textElementParentElement.___IsPreserveWhiteSpacesCrlf;
                if (___textElementParentElement.___ProhibitsDrawingElementCreationByNoWrap == true)
                {
                    return;
                }
                if (___textElementParentElement.___style != null)
                {
                    ___ownerWhiteSpaceType = ___textElementParentElement.___style.___whiteSpaceComputedValue;
                }
                /*
                if(___IsHonorsCrlf == true)
                {
                    commonLog.LogEntry("{0} Crlf : {1} WhiteSpace : {2}", parentElement, ___IsHonorsCrlf, 	___PreserveWhiteSpace);
                }
                */

            }
            else
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("___caluculateTextElementBounds Parent is null. Skip now for " + textElement.ToString());
                }
                return;
            }
            /*
#if DEBUG
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                if (parentElement.id == "hogehoge")
                {
                    commonLog.LogEntry("HERE");
                }
            }
#endif
             */

            if (___textElementParentElement.___style.___StyleFontInfo == null)
			{
                this.___CreateCHtmlFontInfoInfoForElementAndHoverStyle(___textElementParentElement);
            }
			// =================================================================================================
			// If there is no WorkPriorElement. but childindex > 0, there may be some block element just
			// before it.
			// We wants to position to prior the elememnt.
			// =================================================================================================
            if (___WorkingPriorTextElement == null && ___textElementParentElement != null)
			{
				if(textElement.___ChildNodeIndex > 0)
				{
				
					for(int prev = textElement.___ChildNodeIndex -1; prev >= 0 ; prev --)
					{
                        CHtmlElement prevElement = ___textElementParentElement.___childNodes[prev] as CHtmlElement;
						if(prevElement != null)
						{
							if(prevElement.___elementTagType == CHtmlElementType.COMMENT)
							{
								continue;
							}

							if(commonHTML.IsElemeneITextOrIDraw(prevElement)  || (prevElement.___IsElementVisible == true && prevElement.___IsParentVisible == true))
							{
								if(prevElement.___isElementPositionAbsoluteOrStatic == true)
								{
									continue;
								}
								if(commonHTML.IsElemeneITextOrIDraw(prevElement) == false  && prevElement.___IsElementBlock == true)
								{
									___IsWorkingPriorElementIsVisibleBlock = true;
									___NotToUseDrawingElement = true;
								}
								___WorkingPriorTextElement = prevElement;
								break;
							}
						}
					}
				}
				else
				{
					if(commonHTML.IsElemeneITextOrIDraw(textElement) == true)
					{
                        if (___textElementParentElement.___IsElementBlock == true && textElement.___IsElementTruelyFirstVisibleNode() == true)
						{
							___IsWorkingPriorElementIsVisibleBlock = true;
							___NotToUseDrawingElement = true;
							goto GetPositionSection;
						}
                        if (___textElementParentElement.___IsElementTruelyFirstVisibleNode() == false)
						{
                            CHtmlElement ___ParentParentElement = ___textElementParentElement.___parent as CHtmlElement;
							if(___ParentParentElement != null)
							{
								if(___ParentParentElement.___childNodes.Count <= 1)
								{
									// 
									

								}else
								{
                                    for (int prev = ___textElementParentElement.___ChildNodeIndex - 1; prev >= 0; prev--)
									{
										CHtmlElement prevElement = ___ParentParentElement.___childNodes[prev] as CHtmlElement;
										if(prevElement != null)
										{
											if(prevElement.___elementTagType == CHtmlElementType.COMMENT)
											{
												continue;
											}

											if(commonHTML.IsElemeneITextOrIDraw(prevElement) == true || prevElement.___elementTagType == CHtmlElementType.BR)
											{
												if(prevElement.___isElementPositionAbsoluteOrStatic == true)
												{
													continue;
												}
												___WorkingPriorTextElement = prevElement;
                                                if (prevElement.___elementTagType != CHtmlElementType.BR)
                                                {
                                                    textElement.___ElementInlineLevel = prevElement.___ElementInlineLevel + 1;
                                                }
                                                else
                                                {   // Right After BR should be inlineLevel 1.
                                                    textElement.___ElementInlineLevel = 1;
                                                }
                                                if (___textElementParentElement != null)
												{
                                                    if (___textElementParentElement.___ElementInlineLevel != textElement.___ElementInlineLevel)
													{
                                                        ___textElementParentElement.___ElementInlineLevel = textElement.___ElementInlineLevel;
													}
												}
												if(prevElement.___InlineVeryTopTextElement != null)
												{
													textElement.___InlineVeryTopTextElement = prevElement.___InlineVeryTopTextElement;
													// Set LastTextElemnt reference to this textElement
													prevElement.___InlineVeryTopTextElement.___InlineLastTextElement = null;
													prevElement.___InlineVeryTopTextElement.___InlineLastTextElement = textElement;
												}
												if(commonHTML.IsElemeneITextOrIDraw(prevElement) == false  && ___WorkingPriorTextElement.___IsElementBlock == true)
												{
													___IsWorkingPriorElementIsVisibleBlock = true;
													___NotToUseDrawingElement = true;
												}
												else
												{
													___NotToUseDrawingElement = false;
												}

                                                goto GetPositionSection;
											}
										}
									}

								}

							}
                            if (___WorkingPriorTextElement == null)
                            {
                                this.___lookupTextElementWorkingPriorTextElement(textElement, ___textElementParentElement, ref ___WorkingPriorTextElement, ref ___IsWorkingPriorElementIsVisibleBlock, ref ___NotToUseDrawingElement);
                            }

						}
						else 
						{
                            this.___lookupTextElementWorkingPriorTextElement(textElement, ___textElementParentElement, ref ___WorkingPriorTextElement, ref ___IsWorkingPriorElementIsVisibleBlock, ref ___NotToUseDrawingElement);
							
							
						}
					}
				}
			}
			GetPositionSection:
			CHtmlDrawingObject ___PriorDrawingElement = null;
			double ___PriorDrawingElementRight  = 0f;
			double ___PriorDrawingElementTop    = 0f;
			double ___PriorDrawingElementLeft   = 0f;
			double ___PriorDrawingElementBottom = 0f;
			double ___PriorBlockElementRight  = 0f;
			double ___PriorBlockElementTop    = 0f;
			double ___PriorBlockElementLeft   = 0f;
			double ___PriorBlockElementBottom = 0f;
			double ___PriorElementMaxHeight = 0f;
			if(___PriorBlockElementRight < -1){;}
			if(___PriorBlockElementLeft < -1){;}

			if(___WorkingPriorTextElement !=null)
			{
				// ===========================================================================================
				// Passed PriorElement May Be Invisile Text Segment (like Tool Tip)
				// ===========================================================================================
                CHtmlElement workingPrirorParentElement = ___WorkingPriorTextElement.___parent as CHtmlElement;
                if (workingPrirorParentElement != null)
				{
                    if (workingPrirorParentElement.___ProhibitsDrawingElementCreationByNoWrap == true)
                    {
                        ___textElementParentElement.X_DOM_ProcessorAdd("NoWrap Limit has reached.  No Drawing Elements. ");
                        return;
                    }
                    if (workingPrirorParentElement.___IsElementVisible == false)
					{
                        CHtmlElement __LookUpElement = workingPrirorParentElement;
						if(__LookUpElement.___IsElementVisible == false)
						{
                            int ___VisibleParentLookupCount = 0;
							while( __LookUpElement.___IsElementVisible == false)
							{
                                ___VisibleParentLookupCount++;
                                if (___VisibleParentLookupCount >= 16)
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                    {
                                        commonLog.LogEntry("Unable to obtain previous visible text element over limit. break.");
                                    }
                                    break;
                                }
                                CHtmlElement __LookupParent = __LookUpElement.___parent as CHtmlElement;
                                __LookUpElement = __LookUpElement.previousSibling as CHtmlElement;
								if(__LookUpElement == null)
								{
									__LookUpElement = __LookupParent;
								}
								if(__LookUpElement == null)
								{
									if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
									{
										commonLog.LogEntry("Unable to obtain previous visible text element");
									}
									break;
								}
							}
						}
						if(__LookUpElement != null && __LookUpElement.___IsElementVisible == true)
						{
							___WorkingPriorTextElement = __LookUpElement;
						}

						
					}
				}
				// ===========================================================================================
				// Passed PriorElement May Not be Text Node. Actual Node self.
				// ===========================================================================================
				if(___NotToUseDrawingElement == false && documentParsePriorTextElement == null && commonHTML.IsElemeneITextOrIDraw(___WorkingPriorTextElement) == false)
				{
                    int ___WorkingPriorTextElementChildNodesCount = ___WorkingPriorTextElement.___childNodes.Count;
					for(int l = ___WorkingPriorTextElementChildNodesCount -1; l >=0; l --)
					{
						CHtmlElement textNode = ___WorkingPriorTextElement.___childNodes[l] as CHtmlElement;
						if(textNode == null  || textNode.___elementTagType == CHtmlElementType.COMMENT)
						{
							continue;
						}
						else if(commonHTML.IsElemeneITextOrIDraw(textNode) == false && textNode.___IsElementBlock== true)
						{
							goto TextNodeIsFound;

						}
						else if(commonHTML.IsElemeneITextOrIDraw(textNode) == true)
						{
							documentParsePriorTextElement = null;
							documentParsePriorTextElement= textNode;
                            if (textNode.___elementTagType != CHtmlElementType.BR)
                            {
                                textElement.___ElementInlineLevel = textNode.___ElementInlineLevel + 1;
                            }
                            else
                            {
                                textElement.___ElementInlineLevel = 1;
                            }
							if(textNode.___InlineVeryTopTextElement != null)
							{
								textElement.___InlineVeryTopTextElement = textNode.___InlineVeryTopTextElement;
								textNode.___InlineVeryTopTextElement.___InlineLastTextElement = null;
								textNode.___InlineVeryTopTextElement.___InlineLastTextElement = textElement;
							}
							goto TextNodeIsFound;
						}
						else if(commonHTML.IsElemeneITextOrIDraw(textNode) == false && textNode.___IsElementVisible && textNode.___childNodes.Count > 0)
						{ 
							// if the previos node is not text like <span> it may contains textNode very end of the text.
							try
							{
								for(int cLevel1 = (int)textNode.___childNodes.length -1; cLevel1 >= 0 ; cLevel1 --)
								{
									CHtmlElement textNode2 = textNode.___childNodes[cLevel1] as CHtmlElement;
									if( textNode2 == null || textNode2.___elementTagType == CHtmlElementType.COMMENT || textNode2.___IsElementVisible == false)
									{
										continue;
									}
									else if(commonHTML.IsElemeneITextOrIDraw(textNode2) == false && textNode2.___IsElementBlock== true)
									{
										goto TextNodeIsFound;

									}
									else if(commonHTML.IsElemeneITextOrIDraw(textNode2) == true)
									{
										documentParsePriorTextElement = null;
										documentParsePriorTextElement= textNode2;
                                        if (textNode2.___elementTagType != CHtmlElementType.BR)
                                        {
                                            textElement.___ElementInlineLevel = textNode2.___ElementInlineLevel + 1;
                                        }
                                        else
                                        {
                                            textElement.___ElementInlineLevel = 1;
                                        }
										if(textNode2.___InlineVeryTopTextElement != null)
										{
											textElement.___InlineVeryTopTextElement = textNode2.___InlineVeryTopTextElement;
											textNode2.___InlineVeryTopTextElement.___InlineLastTextElement = null;
											textNode2.___InlineVeryTopTextElement.___InlineLastTextElement = textElement;
										}
										goto TextNodeIsFound;
									}
									else if(textNode2.___childNodes.Count > 0)
									{
										for(int cLevel2 = textNode2.___childNodes.Count -1; cLevel2 >= 0 ; cLevel2 --)
										{
											CHtmlElement textNode3 = textNode2.___childNodes[cLevel2] as CHtmlElement;
											if( textNode3 == null || textNode3.___elementTagType == CHtmlElementType.COMMENT || textNode3.___IsElementVisible == false)
											{
												continue;
											}					
											else if(commonHTML.IsElemeneITextOrIDraw(textNode3) == false && textNode3.___IsElementBlock== true)
											{
												goto TextNodeIsFound;

											}
											else if(commonHTML.IsElemeneITextOrIDraw(textNode3) == true)
											{
												documentParsePriorTextElement = null;
												documentParsePriorTextElement= textNode3;
												textElement.___ElementInlineLevel = textNode3.___ElementInlineLevel + 1;
												if(textNode3.___InlineVeryTopTextElement != null)
												{
													textElement.___InlineVeryTopTextElement = textNode3.___InlineVeryTopTextElement;
													textNode3.___InlineVeryTopTextElement.___InlineLastTextElement = null;
													textNode3.___InlineVeryTopTextElement.___InlineLastTextElement = textElement;
												}
												goto TextNodeIsFound;
											}
											else if(textNode3.___childNodes.Count > 0)
											{
												for(int cLevel3 = textNode3.___childNodes.Count  -1; cLevel3 >= 0 ; cLevel3 --)
												{
													CHtmlElement textNode4 = textNode3.___childNodes[cLevel3] as CHtmlElement;
													if( textNode4 == null || textNode4.___elementTagType == CHtmlElementType.COMMENT || textNode4.___IsElementVisible == false)
													{
														continue;
													}
													else if(commonHTML.IsElemeneITextOrIDraw(textNode4) == false && textNode4.___IsElementBlock== true)
													{
														goto TextNodeIsFound;

													}
													else if(commonHTML.IsElemeneITextOrIDraw(textNode4) == true)
													{
														documentParsePriorTextElement = null;
														documentParsePriorTextElement= textNode4;
														textElement.___ElementInlineLevel = textNode4.___ElementInlineLevel + 1;
														if(textNode4.___InlineVeryTopTextElement != null)
														{
															textElement.___InlineVeryTopTextElement = textNode4.___InlineVeryTopTextElement;
															textNode4.___InlineVeryTopTextElement.___InlineLastTextElement = null;
															textNode4.___InlineVeryTopTextElement.___InlineLastTextElement = textElement;
														}
														goto TextNodeIsFound;
													}
													else if(textNode4.___childNodes.Count > 0)
													{
														for(int cLevel4 = textNode4.___childNodes.Count -1; cLevel4 >= 0 ; cLevel4 --)
														{
															CHtmlElement textNode5 = textNode4.___childNodes[cLevel4] as CHtmlElement;
															if( textNode5 == null || textNode5.___elementTagType == CHtmlElementType.COMMENT || textNode5.___IsElementVisible == false)
															{
																continue;
															}					
															else if(commonHTML.IsElemeneITextOrIDraw(textNode5) == false && textNode5.___IsElementBlock== true)
															{
																goto TextNodeIsFound;

															}
															else if(commonHTML.IsElemeneITextOrIDraw(textNode5) == true)
															{
																documentParsePriorTextElement = null;
																documentParsePriorTextElement= textNode5;
																textElement.___ElementInlineLevel = textNode5.___ElementInlineLevel + 1;
																if(textNode5.___InlineVeryTopTextElement != null)
																{
																	textElement.___InlineVeryTopTextElement = textNode5.___InlineVeryTopTextElement;
																	textNode5.___InlineVeryTopTextElement.___InlineLastTextElement = null;
																	textNode5.___InlineVeryTopTextElement.___InlineLastTextElement = textElement;
																}
																goto TextNodeIsFound;
															}
															else if(textNode5.___childNodes.Count > 0)
															{
																for(int cLevel5 = textNode5.___childNodes.Count -1; cLevel5 >= 0 ; cLevel5 --)
																{
																	CHtmlElement textNode6 = textNode5.___childNodes[cLevel5] as CHtmlElement;
																	if( textNode6 == null || textNode6.___elementTagType == CHtmlElementType.COMMENT || textNode6.___IsElementVisible == false)
																	{
																		continue;
																	}					
																	else if(commonHTML.IsElemeneITextOrIDraw(textNode6) == false && textNode6.___IsElementBlock== true)
																	{
																		goto TextNodeIsFound;

																	}
																	else if(commonHTML.IsElemeneITextOrIDraw(textNode6) == true)
																	{
																		documentParsePriorTextElement = null;
																		documentParsePriorTextElement= textNode6;
																		textElement.___ElementInlineLevel = textNode6.___ElementInlineLevel + 1;
																		if(textNode5.___InlineVeryTopTextElement != null)
																		{
																			textElement.___InlineVeryTopTextElement = textNode5.___InlineVeryTopTextElement;
																			textNode6.___InlineVeryTopTextElement.___InlineLastTextElement = null;
																			textNode6.___InlineVeryTopTextElement.___InlineLastTextElement = textElement;
																		}
																		goto TextNodeIsFound;
																	}

															

																}
															}

														}
													}

												}
											}

										}
									}

								}
							}
							catch(Exception ex)
							{
								if(commonLog.LoggingEnabled && commonLog.CommonLogLevel > 5)
								{
									commonLog.LogEntry("CalculateElementBoundsHtmlTextElement search parent textElement error", ex);
								}
								goto TextNodeIsFound;

							}


						}
						else
						{
							continue;
						}
					}
				}
			TextNodeIsFound:
				//if(false){;}


				// ===========================================================================================
				// Document Parse Has Been Created Text Element during Parse
				// ===========================================================================================
				if(___NotToUseDrawingElement == false && ___WorkingPriorTextElement.___drawingObjectList.Count > 0)
				{
					for(int p = ___WorkingPriorTextElement.___drawingObjectList.Count -1; p>=0; p --)
					{
						if(___PriorDrawingElement == null)
						{
							// Only Look at Last Element
                            //HTML.CHtmlDrawingObject rawDraw = ___PriorDrawingElement.Value;
							___PriorDrawingElement =  ___WorkingPriorTextElement.___drawingObjectList[p];
                            CHtmlDrawingObject rawDraw = ___PriorDrawingElement;
                            ___PriorDrawingElementLeft = rawDraw.offsetBounds.Left;
                            ___PriorDrawingElementRight = rawDraw.offsetBounds.Left + rawDraw.offsetBounds.Width;
                            ___PriorDrawingElementTop = rawDraw.offsetBounds.Top;
                            ___PriorDrawingElementBottom = rawDraw.offsetBounds.Top + rawDraw.offsetBounds.Height;
                            if (___PriorDrawingElementTop == 0 && textElement.___ChildNodeIndex > 0)
                            {
                                //if(object.ReferenceEquals(___WorkingPriorTextElement, 
                            }
                            ___PriorElementMaxHeight = rawDraw.maximumHeightForDrawLine;

							break;
						}
					}
				}
				else
				{
					// ===============================================================
					// Prior Element may be found by lookup 
					// ================================================================
					if(documentParsePriorTextElement != null)
					{
						for(int p = documentParsePriorTextElement.___drawingObjectList.Count -1; p>=0; p --)
						{

							// Only Look at Last Element
							___PriorDrawingElement =  documentParsePriorTextElement.___drawingObjectList[p];
                            if (___PriorDrawingElement != null)
                            {
                                CHtmlDrawingObject rawDraw = ___PriorDrawingElement;
                                ___PriorDrawingElementLeft = rawDraw.offsetBounds.Left;
                                ___PriorDrawingElementRight = rawDraw.offsetBounds.Left + rawDraw.offsetBounds.Width;
                                ___PriorDrawingElementTop = rawDraw.offsetBounds.Top;
                                ___PriorDrawingElementBottom = rawDraw.offsetBounds.Top + rawDraw.offsetBounds.Height;
                                if (commonHTML.IsElemeneITextOrIDraw(textElement) && textElement.___offsetTop == 0)
                                {
                                    if (documentParsePriorTextElement.___parentWeakRef != null && object.ReferenceEquals(___WorkingPriorTextElement, documentParsePriorTextElement.___parentWeakRef.Target) == true)
                                    {
                                        ___reassignTextElementTopAndBottomFromPreviousElement(textElement, ___WorkingPriorTextElement, rawDraw, ref ___PriorDrawingElementTop, ref ___PriorDrawingElementBottom);
                                    }
                                }
                                ___PriorElementMaxHeight = rawDraw.maximumHeightForDrawLine;

                                break;
                            }
                            else
                            {
                                continue;
                            }
							
						}
					}
					else
					{
						// =================================================================================================
						// There is no previos DrawingElement (due to block element).
						// We will create Items just below the block element.
						// =================================================================================================
                        ___PriorBlockElementTop = ___WorkingPriorTextElement.offsetBounds.Top;
                        ___PriorBlockElementBottom = ___WorkingPriorTextElement.offsetBounds.Top + ___WorkingPriorTextElement.offsetBounds.Height;
					
						___PriorDrawingElementTop = 0;//___WorkingPriorTextElement.offsetTop + ___WorkingPriorTextElement.offsetHeight;
						___PriorDrawingElementBottom = 0;//___PriorDrawingElementTop;
                        if (___PriorDrawingElementTop == 0 && textElement.___ChildNodeIndex > 0)
                        {
                            //___reassignTextElementTopAndBottomFromPreviousElement(textElement, ___WorkingPriorTextElement, ___PriorDrawingElement, ref ___PriorDrawingElementTop, ref ___PriorDrawingElementBottom);
                        }
						___IsPreviousElementIsClosedBlock = true;
					}

				}

			}
			else
			{
				// ============================================================================================
				//  Document Parse Has Been NOT Text Element during Parse
				// ============================================================================================



				// ============================================================================================
			}
			if(___PriorDrawingElement != null)
			{
                if (___textElementParentElement != null)
				{
                    ___textElementParentElement.___PriorDrawingObject = ___PriorDrawingElement;
				}
			}
            if (___textElementParentElement.___IsElementBlock == true)
			{
				if(textElement.___ChildNodeIndex <= 0)
				{
					___PriorDrawingElementRight = 0;
				}
			}
			Font fnt = null;
            bool ____FontShouldNotDisposed = false;

                    
            
           
            if(fnt == null)
            {
                fnt = ___textElementParentElement.___style.___StyleFontInfo.ToHtmlRendererFont();
            }
            FontObjectObtained:
			Color ___FontColor = Color.Black;
            if (___textElementParentElement.___style.___StyleFontInfo != null)
			{
                ___FontColor = ___textElementParentElement.___style.___StyleFontInfo.ForegroundColor;
			}
			int linesFitted = 0;
			int charactersFitted = -1;
			if(textElement.value != null && textElement.___IsPreserveWhiteSpacesCrlf == true && string.Equals(textElement.value.ToString(), "\r", StringComparison.OrdinalIgnoreCase) == true)
			{
				CHtmlDrawingObject drawElement = new CHtmlDrawingObject();
                drawElement.___parentWeakReference = new WeakReference(textElement, false);

                
				drawElement.offsetBounds.X  = 0;
				drawElement.offsetBounds.Height  = fnt.GetHeight();
				// Take maximun height for last draw object
				if(___PriorElementMaxHeight > 0)
				{
                    drawElement.offsetBounds.Y  = (float)(___PriorDrawingElementTop + ___PriorElementMaxHeight);
				}
				else
				{
					___PriorElementMaxHeight = ___PriorDrawingElementTop + fnt.GetHeight();
				}
				drawElement.offsetBounds.Width  = 0;
				drawElement.maximumHeightForDrawLine = fnt.GetHeight();
                ___PriorDrawingElementTop += drawElement.offsetBounds.Height;
				___PriorDrawingElementRight = 0;
				textElement.___drawingObjectList.Add(drawElement);
				goto MeasureDone;
			}
			sbTextDisplay = new StringBuilder();
			bool ___IsStringVisible = true;
			bool ___AutoHeightIncrement = false;
			int AutoIncrementHight = 3;
			bool ___ShouldFitInOneLine = false;
            if ((___textElementParentElement != null && ___textElementParentElement.___WillCreateMangedControl == true || ___textElementParentElement.___elementTagType == CHtmlElementType.IMG))
			{
                if (___textElementParentElement.___elementTagType == CHtmlElementType.INPUT)
				{
                    switch (___textElementParentElement.type)
					{
						case "text":
						case "password":
						case "file":
                            sbTextDisplay.Append(commonHTML.GetStringValue(___textElementParentElement.value));
							___IsStringVisible = false;
							___AutoHeightIncrement = false;
							___ShouldFitInOneLine = true;
							break;
						case "submit":
						case "reset":
							//strDisplay = commonHTML.GetStringValue(parentElement.value);
							___IsStringVisible = false;
							___AutoHeightIncrement = false;
							___ShouldFitInOneLine = true;
							break;
						case "checkbox":
						case "check":
						case "radio":
						case "hidden":
						case "image":
						default:
							___IsStringVisible = false;
							___AutoHeightIncrement = false;
							___ShouldFitInOneLine = true;
							sbTextDisplay.Remove(0, sbTextDisplay.Length);
							break;
					}
					goto CalucuateManagedControlSizeIfRequired;
				}
				else 
				{ // means Non-Input Type like TextArea, Object, Button, Select, etc
                    switch (___textElementParentElement.___elementTagType)
					{
						case CHtmlElementType.BUTTON :  // Button use use innerText not value
							sbTextDisplay.Append(commonHTML.GetStringValue(textElement.value));
							break;
						case CHtmlElementType.IMG  :  // Button use use innerText not value
							goto CalucuateManagedControlSizeIfRequired;
							//break;
						default:
                            try
                            {
                                sbTextDisplay.Append(commonHTML.GetStringValue(___textElementParentElement.value));
                            }
                            finally
                            { }
							break;
					}
					___IsStringVisible = false;
					___AutoHeightIncrement = true;
					___ShouldFitInOneLine = true;
				}
			CalucuateManagedControlSizeIfRequired:
				// ===============================================================
				// |   Case 1) Size has been defined by Style
				// |   Case 2) No Size has defined and no inner Text
				// |   Case 3) No Size has defined, but has inner Text
				// |   
				// ===============================================================
                System.Drawing.SizeF ___ownerSize = new SizeF((float)___textElementParentElement.___offsetWidth, (float)___textElementParentElement.___offsetHeight);
				bool UseOwnerSize = false;
				// Case 1)
				if(___ownerSize.Width > 0 && ___ownerSize.Height > 0)
				{
					UseOwnerSize = true;
				} 
				else
					// Case 2)
				{
					if(___ownerSize.Width == 0 || ___ownerSize.Height == 0)
					{
                        if (___textElementParentElement.___IsElementVisible == false)
						{
							UseOwnerSize = true;
							goto SetWithOwnerSize;
						}
						if(sbTextDisplay.Length == 0)
						{
							if(___ownerSize.Width == 0)
							{
								___ownerSize.Width = 120;
							}
							if(___ownerSize.Height == 0)
							{

                                if (___textElementParentElement.___IsElementBlock == false)
								{
									___ownerSize.Height = fnt.GetHeight();
								}
								else
								{
									___ownerSize.Height = fnt.GetHeight() + 6;
								}
							}
							UseOwnerSize = true;
						}
					}
				}
			SetWithOwnerSize:
				if(UseOwnerSize ==true)
				{
					CHtmlDrawingObject drawElement = this.CreateDrawingElementFromMeasureString(textElement.___elementOID, ___PriorDrawingElementRight, ___PriorDrawingElementTop, ___ownerSize.Width, ___ownerSize.Height, sbTextDisplay.ToString(),___PriorElementMaxHeight , ___IsStringVisible);
                    drawElement.___parentWeakReference = new WeakReference(textElement, false);
					textElement.___drawingObjectList.Add(drawElement);
					goto MeasureDone;
				}
				goto NextStep;
			}
			else
			{
                if (textElement.value is string)
                {
                    sbTextDisplay.Append(textElement.value);
                }
                else
                {
                    sbTextDisplay.Append(commonHTML.GetStringValue(textElement.value));
                }

			}
			NextStep:
            double ___availWidth = ___textElementParentElement.___availWidth;
            if (___textElementParentElement.___IsElementBlock == false)
			{
                if (___textElementParentElement.parentBlockElement != null)
				{
                    ___availWidth = ___textElementParentElement.parentBlockElement.___availWidth;
				}
			}
            if (___textElementParentElement != null)
			{
                if (___textElementParentElement.___IsTextRenderSkip == true)
                {
                    sbTextDisplay = null;
                    sbTextDisplay = new System.Text.StringBuilder();
                }
                else
                {
                    if (___textElementParentElement.___availWidth < fnt.GetHeight())
                    {
                        ___availWidth = commonHTML.SearchParentWiderAvailWidth(___textElementParentElement, this.___DocumentMinSize.Width);
                    }
                    //commonLog.LogEntry("{0}  availWidth is short {1} Widening to {2}",parentElement,  fnt.GetHeight(), parentElement.availWidth);
                }
			}
           
			int ___CurrentLoop = 0;
			int ___LoopLimit = 3600;


			if(this.___HtmlGraphics != null && this.___HtmlGraphics.StandardStringFormat != null)
			{
				__textFormat = this.___HtmlGraphics.StandardStringFormat;
			}

			if(this.___HtmlGraphics != null && this.___HtmlGraphics.Graphic !=null)
			{
				grMeasure = this.___HtmlGraphics.Graphic;
			}
			else
			{
				___IsGraphicsObjetNeedsDispose = true;


			}


            if (grMeasure == null)
            {
#if false
                if (this.___AdHocBitmapGraphicList != null)
                {
                    if (this.___AdHocBitmapGraphicList.Count > 0)
                    {
                        CHtmlAdhocBitmapInformation ___lastAdhocBitmap = this.___AdHocBitmapGraphicList[this.___AdHocBitmapGraphicList.Count - 1];
                        if (___lastAdhocBitmap != null && ___lastAdhocBitmap.IsUnderUse == false)
                        {
                            ___workingAdhocBitmapInformation = ___lastAdhocBitmap;
                            if (___lastAdhocBitmap.bitmap != null)
                            {
                                if (commonLog.LoggingEnabled && commonLog.LogLevel >= 10)
                                {
                                    commonLog.LogEntry("Recycling Adhoc Grahipc Bitmap :" + this.___AdHocBitmapGraphicList.Count.ToString());
                                }
                                grMeasure = System.Drawing.Graphics.FromImage(___lastAdhocBitmap.bitmap);
                                ___IsAdhocGraphicCreated = true;
                                goto GraphicCheckDone;
                            }
                        }
                    }

                    CHtmlAdhocBitmapInformation newAdhoc = new CHtmlAdhocBitmapInformation();
                    newAdhoc.bitmap = new Bitmap(32, 32,System.Drawing.Imaging.PixelFormat.Format32bppPArgb );
                    newAdhoc.IsUnderUse = true;
                    if (this.___AdHocBitmapGraphicListLockingObject != null)
                    {
                        if (System.Threading.Monitor.TryEnter(this.___AdHocBitmapGraphicListLockingObject, 500))
                        {
                            this.___AdHocBitmapGraphicList.Add(newAdhoc);
                            System.Threading.Monitor.Exit(this.___AdHocBitmapGraphicListLockingObject);
                        }
                    }
                    if (commonLog.LoggingEnabled && commonLog.LogLevel >= 10)
                    {
                        commonLog.LogEntry("Creating Adhoc Grahipc Bitmap :" + this.___AdHocBitmapGraphicList.Count.ToString());
                    }
                    grMeasure = System.Drawing.Graphics.FromImage(newAdhoc.bitmap);
                    ___IsAdhocGraphicCreated = true;
                    ___workingAdhocBitmapInformation = newAdhoc;
                }
#endif

                if (grMeasure == null)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("Graphic Information graphic is  null. abort");
                    }
                    goto MeasureDone;
                }
            }
            GraphicCheckDone:
            if (__textFormat == null)
            {
                ___isTextFormatMustBeDisposeOnExit = true;
                __textFormat  = StringFormat.GenericTypographic;
            }
            if (__textFormat == null || fnt == null)
            {
                __textFormat = null;
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("Graphic Information _textFormat or font is  null. abort");
                }
                goto MeasureDone;
            }
            ___TextPriorElementPositionUsed = new SizeF((float)___PriorDrawingElementRight, (float)___PriorDrawingElementTop);
            float ___MeasureFontHeight = (float)fnt.Height + 1;

			while(true)
			{
                if (this.___IsThreadAbortOccurred == true || this.___Disposing == true)
                {
                    return;
                }
				___CurrentLoop ++;
				if(___CurrentLoop > ___LoopLimit)
				{
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
					{
                        commonLog.LogEntry("Strange Text Measure infinite loop {0}", ___textElementParentElement);
					}
                    if (___CurrentLoop > ___LoopLimit + 1)
                    {
                        break;
                    }
				}
                SizeF sizeF = grMeasure.MeasureString(sbTextDisplay.ToString(), fnt, new SizeF((float)Math.Abs(___availWidth - ___PriorDrawingElementRight), ___MeasureFontHeight), __textFormat, out charactersFitted, out linesFitted);
				if(charactersFitted == sbTextDisplay.Length)
				{
					if(___AutoHeightIncrement)
					{
						sizeF.Height += AutoIncrementHight;
					}
					CHtmlDrawingObject drawElement = this.CreateDrawingElementFromMeasureString(textElement.___elementOID, ___PriorDrawingElementRight, ___PriorDrawingElementTop, sizeF.Width, sizeF.Height, sbTextDisplay.ToString(),___PriorElementMaxHeight , ___IsStringVisible);
                    drawElement.___parentWeakReference = new WeakReference(textElement, false);
                    if (textElement.___drawingObjectList.Count == 0 && drawElement.offsetBounds.Height  == 0 && commonHTML.IsElemeneITextOrIDraw(textElement) == true)
                    {
                        if (___textElementParentElement.___IsTextRenderSkip == true)
                        {
                            drawElement.offsetBounds.Width = 0;
                            drawElement.offsetBounds.Height = 0;
                            if (___textElementParentElement.___style.___styleSizeMode == CHtmlSizeModeType.Both)
                            {
                                drawElement.offsetBounds.Width = (float)___textElementParentElement.offsetWidth;
                                drawElement.offsetBounds.Height = (float)___textElementParentElement.offsetHeight;
                            }
                        }
                        else
                        {
                            if (sbTextDisplay.Length == 0)
                            {
                                drawElement.offsetBounds.Height = fnt.GetHeight();
                            }
                        }
                    }


					if(___PriorElementMaxHeight < drawElement.offsetBounds.Height )
					{
						___PriorElementMaxHeight  = drawElement.offsetBounds.Height;
					}
					drawElement.maximumHeightForDrawLine = ___PriorElementMaxHeight;
					textElement.___drawingObjectList.Add(drawElement);
					goto MeasureDone;
				}
				else if(charactersFitted > 0)
				{
					if(___AutoHeightIncrement)
					{
						sizeF.Height += AutoIncrementHight;
					}
					//HTML.CHtmlDrawingObject drawElement = this.CreateDrawingElementFromMeasureString(textElement.DocumentElementIndex, ___PriorDrawingElementRight, ___PriorDrawingElementTop, sizeF.Width, sizeF.Height, strDisplay.Substring(0, charactersFitted),___PriorElementMaxHeight , ___IsStringVisible);
					CHtmlDrawingObject drawElement = this.CreateDrawingElementFromMeasureString(textElement.___elementOID, ___PriorDrawingElementRight, ___PriorDrawingElementTop, sizeF.Width, sizeF.Height, sbTextDisplay.ToString(0, charactersFitted), 0F , ___IsStringVisible);
                    drawElement.___parentWeakReference = new WeakReference(textElement, false);
					/*
					HTML.CHtmlDrawingObject drawElement = new CHtmlDrawingObject();
					drawElement.DocumentElementIndex = textElement.DocumentElementIndex;
					if(___IsStringVisible == true)
					{
						drawElement.DrawingText = strDisplay.Substring(0, charactersFitted);
					}
					*/
					//strDisplay = strDisplay.Substring( charactersFitted );
					sbTextDisplay.Remove(0,  charactersFitted);

					/*
					drawElement.offsetLeft = ___PriorDrawingElementRight;
					drawElement.offsetTop = ___PriorDrawingElementTop;
					drawElement.offsetWidth = sizeF.Width;
					drawElement.maximumHeightForDrawLine = ___PriorElementMaxHeight;
					*/
					___PriorDrawingElementTop += Math.Max(fnt.GetHeight(), ___PriorElementMaxHeight);
					
					___PriorDrawingElementRight = 0;
					drawElement.offsetBounds.Height = sizeF.Height;
					/*
					if(___AutoHeightIncrement)
					{
						drawElement.offsetHeight += AutoIncrementHight;
					}
					*/
					if(___PriorElementMaxHeight < drawElement.offsetBounds.Height)
					{
						___PriorElementMaxHeight  = drawElement.offsetBounds.Height;
					}
					drawElement.maximumHeightForDrawLine = ___PriorElementMaxHeight;
				
			
					textElement.___drawingObjectList.Add(drawElement);
					___PriorElementMaxHeight = 0;
					
					if(___ShouldFitInOneLine)
					{
						break;
					} else 
                        if (___ownerWhiteSpaceType == CSSWhiteSpaceType.NoWrap)
                    {
                        if (sbTextDisplay.Length != 0)
                        {
                            ___textElementParentElement.___ProhibitsDrawingElementCreationByNoWrap = true;
                            break;
                        }
                    }
					
					continue;
				}
				else
				{
                    if (charactersFitted == 0)
                    {
                        // Some Case Font To Small MeasureString Failds. make it bigger.
                        if (___CurrentLoop == 0)
                        {
                            ___MeasureFontHeight = ___MeasureFontHeight + 1;
                        }
                    }
					___PriorDrawingElementTop = ___PriorElementMaxHeight;
					___PriorDrawingElementRight = 0;
                    if (___textElementParentElement.___availWidth < ___MeasureFontHeight)
					{

                        ___availWidth = commonHTML.SearchParentWiderAvailWidth(___textElementParentElement, this.___DocumentMinSize.Width);
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
						{
                            commonLog.LogEntry("{0}  availWidth is short {1} Widening to {2}", ___textElementParentElement, fnt.GetHeight(), ___textElementParentElement.___availWidth);
						}
					}
					continue;
				}
				
			}
			MeasureDone:
 
            if (____FontShouldNotDisposed == false)
            {
                if (fnt != null)
                {
                    fnt.Dispose();
                    fnt = null;
                }
            }
            if (___textElementParentElement.___WillCreateMangedControl == true || ___textElementParentElement.___elementTagType == CHtmlElementType.IMG)
			{ // DrawElement has created it may be measure rectangle alement is not accurate
				try
				{
				    CHtmlDrawingObject __ResizingingElement = textElement.___drawingObjectList[0];

                        if (__ResizingingElement.offsetBounds.Width < ___textElementParentElement.___offsetWidth)
						{
                            __ResizingingElement.offsetBounds.Width = (float)___textElementParentElement.___offsetWidth;
						}
                        if (__ResizingingElement.offsetBounds.Width < ___textElementParentElement.___offsetHeight)
						{
                            __ResizingingElement.offsetBounds.Width = (float)___textElementParentElement.___offsetHeight;
						}
                        if (___PriorElementMaxHeight < __ResizingingElement.offsetBounds.Height)
						{
                            __ResizingingElement.maximumHeightForDrawLine = __ResizingingElement.offsetBounds.Height;
						}
					
				}
				catch
				{
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
					{
						commonLog.LogEntry("Bad Resetting Bounds...");
					}
				}
			}
			if(	documentParsePriorTextElement == null && textElement.___InlineVeryTopTextElement == null)
			{
				textElement.___InlineVeryTopTextElement = textElement;
                if (textElement.___ElementInlineLevel == 0)
                {
                    textElement.___ElementInlineLevel = 1;
                }
			}
			if(textElement.___drawingObjectList.Count > 0)
			{
				RectangleF __textAreaSize = RectangleF.Empty;
				int ___drawCount = textElement.___drawingObjectList.Count;
				for(int di = 0; di < ___drawCount; di ++)
				{
					    CHtmlDrawingObject __textDrawElement = textElement.___drawingObjectList[di];

						if( __textAreaSize == RectangleF.Empty)
						{
							__textAreaSize  = __textDrawElement.offsetBounds;
						}
						else
						{
							__textAreaSize = RectangleF.Union(__textAreaSize,  __textDrawElement.offsetBounds);
						}
					
				}
				

				textElement.___offsetWidth = __textAreaSize.Width;
				textElement.___offsetHeight = __textAreaSize.Height;
				if(textElement is CHtmlTextElement)
				{
					CHtmlTextElement ___textElement = textElement as CHtmlTextElement;
					___textElement.DrawingElementsTotalBounds = __textAreaSize;
				}
			}
		
			textElement.___isCalculateElementBoundsCalled = true;
            if (___textElementParentElement != null && object.ReferenceEquals( textElement,___textElementParentElement) == true)
			{
                ___textElementParentElement.parentBlockElement.___InlineCornorPoint = PointF.Empty;

			}
			if(commonHTML.IsElemeneITextOrIDraw(textElement) == true &&  ___TextPriorElementPositionUsed != Size.Empty)
			{
				textElement.___ElementInlineShifted = true;
				// -----------------------------------------------------------------------------------------------
				// If textElements prior Visible node is block Element
				// InlineLayout Flag is always off.
				// -----------------------------------------------------------------------------------------------
				if(textElement.___ElementInlineShifted == true && ___IsWorkingPriorElementIsVisibleBlock == true)
				{

					textElement.X_DOM_ProcessorAdd("Inline Flag has been disabed due to prior visible not was block; ");
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >1)
					{
						commonLog.LogEntry("Inline Flag has been disabed due to prior visible not was block; ");
					}
					textElement.___ElementInlineShifted = false;
				}

			}
			else
			{
				if(textElement.___ElementInlineLevel > 1)
				{
					textElement.___ElementInlineShifted = true;
				}
				else
				{
					textElement.___ElementInlineShifted = false;
				}
			}
			if(commonHTML.IsElemeneITextOrIDraw(textElement) == true && textElement.___ElementInlineShifted == true)
			{
				if(textElement.___ChildNodeIndex == 0)
				{
                    if (___textElementParentElement != null && commonHTML.IsElemeneITextOrIDraw(___textElementParentElement) == false)
					{
                        if (___textElementParentElement.___IsElementBlock == false)
						{
                            ___textElementParentElement.___ElementInlineShifted = true;
						}
					}
				}
                else if (textElement.___ChildNodeIndex == 1 && ___textElementParentElement != null && ___textElementParentElement.___ElementInlineShifted == false)
				{
                    if (___textElementParentElement.___IsElementBlock == false)
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel > 3)
						{
							commonLog.LogEntry("Strange. Inlined Parent Element is not inlinedshifted.... but cont");
						}
					}
				}
			}

			/*
			if(textElement.DrawingElements.Count == 1)
			{
				HTML.CHtmlDrawingObject firstDrawElement = textElement.DrawingElements[0] as CHtmlDrawingObject;
				if(firstDrawElement != null)
				{
					// textElement.offsetLeft = firstDrawElement.offsetLeft;
					// textElement.offsetTop = firstDrawElement.offsetTop;
				}
			}
			*/
			if(___IsGraphicsObjetNeedsDispose == true)
			{
				try
				{
					if(__textFormat == null)
					{
						__textFormat.Dispose();
						__textFormat = null;
					}
					if(grMeasure !=null)
					{
						grMeasure.Dispose();
						grMeasure =null;
					}
					if(_tmpImage !=null)
					{
						_tmpImage.Dispose();
						_tmpImage =null;
					}
					if(_tmpBitmap !=null)
					{
						_tmpBitmap.Dispose();
						_tmpBitmap =null;
					}
				}
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                    }
                }
			}
			if(___IsPreviousElementIsClosedBlock == true && textElement.___ChildNodeIndex > 0 && textElement.___offsetTop == 0)
			{
				textElement.___offsetTop = ___PriorBlockElementBottom;

			}
			if(sbTextDisplay != null)
			{
				sbTextDisplay = null;
			}
            if (___isTextFormatMustBeDisposeOnExit == true)
            {
                if (__textFormat != null)
                {
                    __textFormat.Dispose();
                    __textFormat = null;
                }
            }
			textElement.___isCalculateElementBoundsCalled = true;
            textElement.___IsElementofffsetParentPointCaluculationRequired = true;
			return;
		}
		/// <summary>
		/// Look Down to Search Last Text Element from the Element as top element (may be inline elemenet)
		/// </summary>
		/// <param name="_element">Element if found, null if not found</param>
		/// <returns></returns>
		internal CHtmlElement ___SearchForLastInlineTextElementFromElementLikeRecursively(CHtmlElement _element)
		{
			if(_element == null)
			{
				return null;
			}
			else
			{
				for(int c0 = _element.___childNodes.Count -1; c0 >= 0; c0 --)
				{
					CHtmlElement c0Element = _element.___childNodes[c0] as CHtmlElement;
					if(c0Element == null || c0Element.___elementTagType == CHtmlElementType.COMMENT || c0Element.___IsElementVisible == false)
					{
						continue;
					}
                    else if (c0Element.___elementTagType == CHtmlElementType.BR)
                    {
                        return c0Element;
                    }
					else if(commonHTML.IsElemeneITextOrIDraw(c0Element) == true)
					{
						return c0Element;
					}
					else if(c0Element.___childNodes.Count > 0)
					{
						for(int c1 = c0Element.___childNodes.Count -1; c1 >= 0; c1 --)
						{
							CHtmlElement c1Element = c0Element.___childNodes[c1] as CHtmlElement;
							if(c1Element == null || c1Element.___elementTagType == CHtmlElementType.COMMENT || c1Element.___IsElementVisible == false)
							{
								continue;
							}
                            else if (c1Element.___elementTagType == CHtmlElementType.BR)
                            {
                                return c1Element;
                            }
							else if(commonHTML.IsElemeneITextOrIDraw(c1Element) == true)
							{
								return c1Element;
							}
							else if(c1Element.___childNodes.Count > 0)
							{
								for(int c2 = c1Element.___childNodes.Count -1; c2 >= 0; c2 --)
								{
									CHtmlElement c2Element = c1Element.___childNodes[c2] as CHtmlElement;
									if(c2Element == null || c2Element.___elementTagType == CHtmlElementType.COMMENT || c2Element.___IsElementVisible == false)
									{
										continue;
									}
									else if(commonHTML.IsElemeneITextOrIDraw(c2Element) == true)
									{
										return c2Element;
									}
									else if(c2Element.___childNodes.Count > 0)
									{
										for(int c3 = c2Element.___childNodes.Count -1; c3 >= 0; c3 --)
										{
											CHtmlElement c3Element = c1Element.___childNodes[c3] as CHtmlElement;
											if(c3Element == null || c3Element.___elementTagType == CHtmlElementType.COMMENT || c3Element.___IsElementVisible == false)
											{
												continue;
											}
                                            else if (c3Element.___elementTagType == CHtmlElementType.BR)
                                            {
                                                return c3Element;
                                            }
											else if(commonHTML.IsElemeneITextOrIDraw(c3Element) == true)
											{
												return c3Element;
											}
											else if(c3Element.___childNodes.Count > 0)
											{
												for(int c4 = c3Element.___childNodes.Count -1; c4 >= 0; c4 --)
												{
													CHtmlElement c4Element = c1Element.___childNodes[c4] as CHtmlElement;
													if(c4Element == null || c4Element.___elementTagType == CHtmlElementType.COMMENT || c4Element.___IsElementVisible == false)
													{
														continue;
													}
                                                    else if (c4Element.___elementTagType == CHtmlElementType.BR)
                                                    {
                                                        return c4Element;
                                                    }
													else if(commonHTML.IsElemeneITextOrIDraw(c4Element) == true)
													{
														return c4Element;
													}
													else if(c4Element.___childNodes.Count > 0)
													{
														for(int c5 = c4Element.___childNodes.Count -1; c5 >= 0; c5 --)
														{
															CHtmlElement c5Element = c1Element.___childNodes[c5] as CHtmlElement;
															if(c5Element == null || c5Element.___elementTagType == CHtmlElementType.COMMENT || c5Element.___IsElementVisible == false)
															{
																continue;
															}
                                                            else if (c5Element.___elementTagType == CHtmlElementType.BR)
                                                            {
                                                                return c4Element;
                                                            }
															else if(commonHTML.IsElemeneITextOrIDraw(c5Element) == true)
															{
																return c4Element;
															}
															else if(c5Element.___childNodes.Count > 0)
															{
																if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
																{
																	commonLog.LogEntry("SearchForLastInlineTextElementFromElementLikeRecursively has reached level5 but could not find expected TextElement");


																}
																_element.X_DOM_ProcessorAdd("Inline Search has reached to level 5. Sorry.");
																return null;
															}
														}

													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			return null;
		}
		internal CHtmlDrawingObject CreateDrawingElementFromMeasureString(int ___DocumentIndex, double ___x, double ___y, double ___width, double ___height, string ___text, double ___MaxLineHeight, bool ___IsStringVisible)
		{
			CHtmlDrawingObject drawElement = new CHtmlDrawingObject();

			drawElement.___DocumentElementIndex = ___DocumentIndex;
           
			if(___IsStringVisible)
			{
                if (___text != null)
                {
                    drawElement.DrawingText = string.Copy(___text);
                }
			}
			drawElement.offsetBounds.X = (float)___x;
            drawElement.offsetBounds.Y = (float)___y;
            drawElement.offsetBounds.Width  = (float)___width;
            drawElement.offsetBounds.Height  = (float)___height;
			drawElement.maximumHeightForDrawLine = ___MaxLineHeight;
			return drawElement;
		}
        internal void ___performChildElementSizeRecalationByWidth(CHtmlElement ___curElement, double ___targetWidth, int stackCount)
        {
            if (stackCount > 50)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("___performChildElementSizeRecalationByWidth stack overflow return ");
                }
                return;
            }
            DateTime dtStart = new DateTime();
            if (stackCount == 0)
            {
                dtStart = DateTime.Now;
                ___curElement.___style.Width = ___targetWidth.ToString() + "px";
            }
            if (___curElement.___availWidth > ___targetWidth)
            {
                ___curElement.___availWidth = ___targetWidth;
            }
            if (___curElement.___offsetWidth > ___targetWidth)
            {
                ___curElement.___offsetWidth = ___targetWidth;
            }
            int childCount = ___curElement.___childNodes.Count;
            for (int i = 0; i < childCount; i++)
            {
                CHtmlElement ___child = ___curElement.___childNodes[i] as CHtmlElement;
                if (___child == null)
                    continue;
                if (___child.___IsElementVisible == true)
                {
                    if (___child.___offsetWidth <= 0)
                        continue;
                    if (___child.___offsetWidth > ___targetWidth)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("{0} offsetWidth is wider than target {1}. needs recaluculation ", ___child, ___child.___offsetWidth , ___targetWidth );
                        }
                        switch (___child.___elementTagType)
                        {
                            case CHtmlElementType._ITEXT:
                                ___child.___isCalculateElementBoundsCalled = false;
                                if (___child.___drawingObjectList != null && ___child.___drawingObjectList.Count > 0)
                                {
                                    ___child.___drawingObjectList = new System.Collections.Generic.List<CHtmlDrawingObject>();
                                }
                                this.___calculateTextElementBounds(___child);

                                break;
                            default:
                                if (___child.___availWidth > ___targetWidth)
                                {
                                    ___child.___availWidth = ___targetWidth;
                                }
                                ___child.___isCalculateElementBoundsCalled = false;
                                this.___applyElemenetStyleSheets(___child, false, true, false);
                                int childChildrenCount = ___child.___childNodes.Count;
                                if (childChildrenCount > 0)
                                {
                                    for(int cc = 0; cc < childChildrenCount ; cc++)
                                    {
                                        CHtmlElement ___childchild = ___child.___childNodes[cc] as CHtmlElement;
                                        if (___childchild == null)
                                            continue;
                                        if (___childchild.___IsElementVisible == false)
                                            continue;
                                        if (___childchild.___offsetWidth == 0)
                                            continue;
                                        stackCount++;
                                        ___performChildElementSizeRecalationByWidth(___childchild, ___targetWidth, stackCount);
                                        stackCount--;
                                        ___childchild.___isCalculateElementBoundsCalled = false;
                                        this.___calculateElementBounds(___childchild);
                                    }
                                }
                                ___child.___isCalculateElementBoundsCalled = false;
                                this.___calculateElementBounds(___child);
                                ___child.___isCalculateElementBoundsCalled = true;
                                break;
                        }

                    }
                }
            }
            if (stackCount == 0)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    TimeSpan tpSpan = DateTime.Now.Subtract(dtStart);
                    commonLog.LogEntry("___performChildElementSizeRecalationByWidt(\'{0}\') completed in {1} ms.... ", ___curElement, tpSpan.TotalMilliseconds);
                }
            }
        }
        internal bool ___isElementContainsAnyVisibileChildWiderThan(double ___testWidth, CHtmlElement ___curElement)
        {
            int childCount = ___curElement.___childNodes.Count;
            for (int i = 0; i < childCount; i++)
            {

                CHtmlElement ___child = ___curElement.___childNodes[i] as CHtmlElement;
                if (___child == null)
                    continue;
                if (___child.___IsElementVisible == true)
                {
                    if (___child.___offsetWidth <= 0)
                        continue;
                    if (___child.___offsetWidth > ___testWidth)
                        return true;
                }
            }
            return false;
        }

        #region ___calculateElementBounds
        /// <summary>
        /// By This stage, all bounds should been applied by stylesheets and tag design emenent
        /// </summary>
        /// <param name="tagElement"></param>
        public void ___calculateElementBounds(CHtmlElement tagElement)
		{
            if (tagElement == null)
            {
                return;
            }
            /*
#if DEBUG
            if (string.Equals(tagElement.___id, "footer") == true)
            {
                commonLog.LogEntry("HERE");
            }
#endif
            */

            tagElement.___calcBoundsMethodCount++;

            CHtmlElement ___tagElementParent = tagElement.___parent as CHtmlElement;
            // =========================================
            // ___element is priornode which is visible and not aboluste positioned.
            // =========================================
            CHtmlElement ___elementPriorVisibileNode = null;
			bool IsPositionSwitchedByFloatOrClear = false;
            if (this.___IsElementCreationNeedsToBeDynamic == true)
            {
                return;
            }
            if (this.___IsDomModeFullParseMode() == false)
			{
				return;
			}
            
            if (tagElement.___IsNoScriptBlock)
            {
                tagElement.___isCalculateElementBoundsCalled = true;
                if (tagElement.___IsElementVisible == true)
                {
                    tagElement.___IsElementVisible = false;
                }
                return;
            }
			if(tagElement.___elementTagType != CHtmlElementType.HTML)
			{
                if (tagElement.___parentWeakRef == null)
				{
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
					{
						commonLog.LogEntry("___caluculateElementBound for \'{0}\' does not have parent associated escaping..", tagElement);
					}
					tagElement.___isCalculateElementBoundsCalled = true;
					return;
				}
			}
            /*
#if DEBUG
            if (string.Compare(tagElement.___class, "page-header", StringComparison.OrdinalIgnoreCase) == 0)
            {
                commonLog.LogEntry("HERE");
            }
#endif
             */
		
            if (___tagElementParent != null && ___tagElementParent.___elementTagType == CHtmlElementType._DOCUMENT_FRAGMENT)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
                {
                    commonLog.LogEntry("Strange... ___calculateElementBounds() Element {0} have document fragment as parent  {1} escaping..", tagElement, ___tagElementParent);
                }
                return;
            }

			bool IsBoundsAdjusted = false;
			double ___offsetWidthByMeasure  = 0;
			double ___offsetHeightByMeasure = 0;
			double ___offsetLeftByMeasure   = 0;
			double ___offsetTopByMeasure    = 0;
			double ___offsetTopByMeasureFromPrevoiusNode    = 0;
			double ___offsetWidthByStyle    = 0;
			double ___offsetHeightByStyle   = 0;
			double ___offsetLeftByStyle     = 0;
			double ___offsetRightByStyle    = 0;
			double ___offsetBottomByStyle   = 0;
			double ___offsetTopByStyle      = 0;
			double ___parentAllowedWidth     = 0;
			double ___parentAllowedHeight     = 0;
            int ___childmeasuringFloatElementCount = 0;
            int ___childmeasuringNonFloatElementCount = 0;
			bool ___IsBoundsFixedSize = false;
			bool ___IsMarginLeftOrPaddingLeftHasValue = false;
			bool ___ForceToUseDrawingRectangle = false;
			bool ___DoNotAlferWidthAfterward = false;
			bool ___DoNotAlferHeightAfterward = false;
            if(___DoNotAlferHeightAfterward  == true && ___DoNotAlferWidthAfterward == true)
            {
                // Just avoid compier warning 
            }
			bool ___AvoidToUseRectangeYToGetTopPosition = false;
            bool ___ElementShoudKeepZeroWidthRegardless = false;
            bool ___ElementShoudKeepZeroHeightRegardless = false;
            double floatLeftMargin = 0;
            double floatRightMargin = 0;
            double LookupLimitHeight = 800;
            int ___floatRightElementCount = 0;
            int ___floatLeftElementCount = 0;
            int ___tagElementChildVisibleElementCount = 0;
			if(tagElement.___elementTagType == CHtmlElementType.MAP)
			{
				this.ProcessElementMapInfomation(tagElement);
			}
            if (tagElement.___IsElementBeforeCreated == true && tagElement.___elementTagType != CHtmlElementType._ELEMENT_AFTER && tagElement.___elementTagType != CHtmlElementType._ELEMENT_BEFORE)
            {
                if (tagElement.___ElementBefore != null && tagElement.___ElementBefore.___elementTagType == CHtmlElementType._ELEMENT_BEFORE)
                {
                    if (tagElement.___ElementBefore.___isCalculateElementBoundsCalled == false)
                    {
                        ___calculateElementBounds(tagElement.___ElementBefore);
                    }
                }
            }
            /*
#if DEBUG
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
            {
                if (string.Equals(tagElement.___class, "slideshow-tabs-container show-for-medium-up") == true)
                {
                commonLog.LogEntry("HERE");



                }
            }
#endif
             */








          

            //if (___DoNotAlferWidthAfterward ||___DoNotAlferHeightAfterward){}
			try
			{
                
				if(commonHTML.IsElemeneITextOrIDraw(tagElement) == true)
				{
					tagElement.___isCalculateElementBoundsCalled = true;
					return;
				}


                if (___tagElementParent != null)
                {

                    ___parentAllowedWidth = Math.Max(___tagElementParent.___offsetWidth, ___tagElementParent.___availWidth);
                    ___parentAllowedHeight = Math.Max(___tagElementParent.___offsetHeight, ___tagElementParent.___availHeight);
                }
                else
                {
                    ___parentAllowedWidth = Math.Max(tagElement.___offsetWidth, tagElement.___availWidth);
                    ___parentAllowedHeight = Math.Max(tagElement.___offsetHeight, tagElement.___availHeight);
                }
                try
                {
                    bool ___NoCalculatation = false;
                    /* We need caluculation for HTML Documents.*/

                    if (commonHTML.elementTagTypesMustBeInvisibleAndZeroSizeSortedList.ContainsKey(tagElement.___elementTagType) == true)
                    {
                        tagElement.___isCalculateElementBoundsCalled = true;
                        ___NoCalculatation = true;
                    }
                    else if (tagElement.___elementTagType == CHtmlElementType.NOSCRIPT)
                    {

                            tagElement.___isCalculateElementBoundsCalled = true;
                            ___NoCalculatation = true;
                        
                    }

                    if (___NoCalculatation)
                    {
                        if (tagElement.___offsetWidth != 0)
                        {
                            tagElement.___offsetWidth = 0;
                        }
                        if (tagElement.___offsetHeight != 0)
                        {
                            tagElement.___offsetHeight = 0;
                        }
                        /*
                        if(tagElement.offsetLeft != 0)
                        {
                            tagElement.offsetLeft = 0;
                        }
                        if(tagElement.offsetTop != 0)
                        {
                            tagElement.offsetTop = 0;
                        }
                        */
                        /*
                        if(tagElement.IsVisible != true)
                        {
                            tagElement.IsVisible = false;
                        }
                        */

                        tagElement.___isCalculateElementBoundsCalled = true;
                        return;
                    }
                    if (tagElement.___style == null)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("Strange {0} does not have style. create now...", tagElement);
                        }
                        tagElement.___style = new CHtmlCSSStyleSheet(CHtmlElementStyleType.Element);
                    }

                    /*
                    if(___parentAllowedWidth == 0)
                    {
                        ___parentAllowedWidth = ___DocumentMinSize.Width;
                    }
                    if(___parentAllowedHeight == 0)
                    {
                        ___parentAllowedHeight = ___DocumentMinSize.Height;
                    }
                    */
                    /*
                    if(tagElement.ElementVersion == CHtmlVersionType.Version3)
                    {
                        tagElement.CreateTextRangeBasedUponAppendedChars(tagElement.TagCloseEndPosition);
                    }
                    */





                    if (tagElement.___elementTagType == CHtmlElementType.COMMENT || tagElement.___elementTagType == CHtmlElementType.STYLE || tagElement.___elementTagType == CHtmlElementType.SCRIPT)
                    {
                        tagElement.___IsElementVisible = false;
                        tagElement.___offsetWidth = 0;
                        tagElement.___offsetHeight = 0;
                        tagElement.___isApplyElemenetStyleSheetCalled = true;
                        tagElement.___isCalculateElementBoundsCalled = true;
                        return;
                    }


                    /*
#if DEBUG
                    if (string.IsNullOrEmpty(tagElement.___id) == false && tagElement.___id.StartsWith("d3Part2"))
                    {
                        commonLog.LogEntry("HERE");
                    }
#endif
                     */

                    // ================================================================================
                    //				   Parent TextRange Check
                    // ================================================================================

                    int __tagElementChildCount = tagElement.___childNodes.Count;
                    if (__tagElementChildCount > 0)
                    {

                        // ================================================================================
                        // it may be text node just before the box.
                        //   [Todays News < >, which was tommorrows news.]
                        //                 +-------[Exchange Server  < > is Microsoft Product]
                        //                                            |
                        //                                            +[ZZZZZZZZZZZZZZZZZZZZZZZZZZ]
                        //
                        // =================================================================================
                        int indexOfInParent = tagElement.___ChildNodeIndex;
                        if (indexOfInParent > 0 && ___tagElementParent != null)
                        {
                            /*
                            while(true)
                            {
                                CHtmlElement priorWithinParent = tagElement.parent.textNodes[indexOfInParent - 1] as CHtmlElement;
                                if(priorWithinParent.___IsElementBlock == false || priorWithinParent.___elementTagType ==HTML.CHtmlElementType._ITEXT)
                                {
                                    ___elementPriorVisibileNode = priorWithinParent;
                                }
                            }
                            */
                            for (int cp = indexOfInParent - 1; cp >= 0; cp--)
                            {
                                CHtmlElement parentPriorElement = ___tagElementParent.___childNodes[cp] as CHtmlElement;
                                if (parentPriorElement == null)
                                {
                                    continue;
                                }
                                if (parentPriorElement.___IsElementVisible == false || parentPriorElement.___isElementPositionAbsoluteOrStatic == true)
                                {
                                    continue;
                                }
                                if (object.ReferenceEquals(parentPriorElement, tagElement) == true)
                                {
                                    continue;
                                }
                                if (parentPriorElement != null)
                                {
                                    if (parentPriorElement.___isCalculateElementBoundsCalled == true)
                                    {
                                        goto GetExNode;
                                    }
                                    else
                                    {
                                        //==================================================
                                        // If it is dynamic element do not peform caluculation
                                        // it may stack overflow.
                                        // ==================================================
                                        if (tagElement.___IsDynamicElement == false && parentPriorElement.___IsDynamicElement == false)
                                        {
                                            if (this.___IsElementCreationNeedsToBeDynamic == false && parentPriorElement.___isCalculateElementBoundsCalled == false)
                                            {
                                                //commonLog.LogEntry("{0}:{1}:{2}: {3} ==> {4} needs to call CalculateElementBounds", tagElement,tagElement.DocumentElementIndex,cp, parentPriorElement.TagOpenStartPosition,parentPriorElement);
                                                if (commonHTML.IsElemeneITextOrIDraw(parentPriorElement) == true)
                                                {
                                                    this.___calculateTextElementBounds(parentPriorElement);
                                                }
                                                else
                                                {
                                                    this.___calculateElementBounds(parentPriorElement);
                                                }
                                            }
                                        }
                                    }
                                GetExNode:
                                    if (commonHTML.IsElemeneITextOrIDraw(parentPriorElement) == true || commonHTML.elementTagTypesNeverSeachStyleSheetSortedList.ContainsKey(parentPriorElement.___elementTagType) == false)
                                    {

                                        ___elementPriorVisibileNode = parentPriorElement;

                                        goto ElementPriorVisibileNodeLookupDone;

                                    }
                                    else
                                    {
                                        continue;
                                    }
                                }
                            }
                        }

                    }
                ElementPriorVisibileNodeLookupDone:
                    // =================================================================================





                    // ================================================================================
                    //				   DEGUG SECTION
                    // ================================================================================

                    // ================================================================================
                    // Disply=Box Conversion
                    // +---------------+
                    // | [  ][  ][  ]  |
                    // | [  ][  ][  ]  |
                    // +---------------+
                    // ================================================================================
                    if (tagElement.___style.___cssDisplayComputedValueType == CSSDisplayType.Box || tagElement.___style.___cssDisplayComputedValueType == CSSDisplayType.Flex || tagElement.___style.___cssDisplayComputedValueType == CSSDisplayType.FlexBox)
                    {
                        RectangleF priorElementOffsetBounds = RectangleF.Empty;
                        CHtmlElement __x_priorElement = null;
                        CHtmlElement __x_firstNode = tagElement.firstChild as CHtmlElement;
                        int LineShiftElemnent = 0;
                        try
                        {
                            if (tagElement.___childNodes.Count > 0)
                            {
                                if (tagElement.___availWidth == 0 || (__x_firstNode != null && tagElement.___availWidth < __x_firstNode.___offsetWidth))
                                {
                                    if (__x_firstNode == null)
                                    {
                                        __x_firstNode = new CHtmlElement();
                                        __x_firstNode.___offsetWidth = 200;

                                    }
                                    tagElement.___availWidth = commonHTML.SearchParentWiderAvailWidth(tagElement, (float)__x_firstNode.___offsetWidth * 2);

                                }
                            }
                            int __tagChildCount = tagElement.___childNodes.Count;
                            for (int c = 0; c < __tagChildCount; c++)
                            {
                                CHtmlElement __child = tagElement.___childNodes[c] as CHtmlElement;
                                if (__child == null)
                                    continue;
                                if (commonHTML.IsElemeneITextOrIDrawOrComment(__child) == false && __child.___IsElementVisible == true)
                                {
                                    if (priorElementOffsetBounds != RectangleF.Empty)
                                    {

                                        if (tagElement.___availWidth > 0 && priorElementOffsetBounds.Right + __child.___offsetLeft + __child.___offsetWidth > tagElement.___availWidth - tagElement.___marginLeft - tagElement.___paddingLeft)
                                        {
                                            double MaximumBoxHeight = 0;
                                            if (LineShiftElemnent <= -1)
                                            {
                                                MaximumBoxHeight = __x_priorElement.___offsetHeight;
                                            }
                                            else
                                            {
                                                try
                                                {
                                                    CHtmlCollection ___childNodesCol = tagElement.___childNodes;
                                                    for (int prepos = LineShiftElemnent; prepos < c; prepos++)
                                                    {
                                                        CHtmlElement ___nodePrep = ___childNodesCol[prepos] as CHtmlElement;
                                                        if (___nodePrep != null)
                                                        {
                                                            MaximumBoxHeight = Math.Max(MaximumBoxHeight, ___nodePrep.___offsetHeight);
                                                        }
                                                    

                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                    {
                                                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                                    }
                                                }
                                            }
                                            priorElementOffsetBounds = new RectangleF(0, (float)(__x_priorElement.___offsetTop + MaximumBoxHeight), 0, (float)(__x_priorElement.___offsetHeight));
                                            LineShiftElemnent = tagElement.___childNodes.IndexOf(__child);

                                        }

                                        __child.___offsetTop = priorElementOffsetBounds.Y;
                                        __child.___offsetLeft = priorElementOffsetBounds.X + priorElementOffsetBounds.Width;
                                    }
                                    priorElementOffsetBounds = __child.offsetBounds;
                                    __x_priorElement = __child;

                                    //commonLog.LogEntry("{0} child Bounds {1} : {2} ", tagElement, tagElement.StyleDisplayType, priorElementOffsetBounds);

                                }
                                else
                                {

                                }

                            }
                        }
                        catch (Exception ex)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                            {
                                commonLog.LogEntry("CaluculateElmenentBounds for Style Box Position", ex);
                            }
                        }
                    }

                    /* 
                    ================================================================================
                                       position Attribute | position Property
                    ================================================================================


                    Sets or retrieves the type of positioning used for the object. 

                    Syntax


                    HTML { position : sPosition }  
                    Scripting object.___style.position [ = sPosition ] 
                    Possible Values

                    sPosition String that specifies or receives one of the following values.static Default.
                    Object has no special positioning; it follows the layout rules of HTML. 
                    absolute Object is positioned relative to parent element's position or 
                    to the body object if its parent element is not positioned using the top and left properties. 
                    relative Object is positioned according to the normal flow, and then offset by the top 
                    and left properties. 
 
                    The property is read/write for all objects except the following, for which it is read-only:
                    currentStyle. The property has a default value of static. The Cascading Style Sheets (CSS)
                     attribute is not inherited. 

                    Expressions can be used in place of the preceding value(s), as of MicrosoftR Internet
                    Explorer 5. For more information, see About Dynamic Properties.

                    Remarks

                    Setting the property to absolute pulls the object out of the "flow" of the document
                    and positions it regardless of the layout of surrounding objects. If other objects
                    already occupy the given position, they do not affect the positioned object, nor
                    does the positioned object affect them. Instead, all objects are drawn at the same place,   
                    causing the objects to overlap. 
                    This overlap is controlled by using the z-index attribute or property.
                    Absolutely positioned objects do not have margins, 
                    but they do have borders and padding. 

                    To enable absolute positioning on an object you must specify at least one of the top,
                    bottom, left, or right properties, in addition to setting the position property to 
                    absolute. Otherwise, these positioning properties use their default value of absolute,
                    which causes the object to render immediately after the preceding elements, according
                    to the layout rules of HTML.

                    Input from pointing devices, such as the mouse, does not penetrate through overlapping
                    elements even if the elements are not visible. This is also true for positioned
                    elements with a negative z-index unless: 

                    The parent is a scrolling container (that is, its overflow property is set to
                     auto or scroll). The parent is positioned (that is, its position property is set 
                     to absolute or relative).

                    Setting the property to relative places the object in the natural HTML flow of 
                    the document, but offsets the position of the object based on the preceding content. 
                    The following syntax shows how to create superscript text by placing the text in a
                    span that is positioned relative to the remaining text in the paragraph.
                    */
                    ___offsetWidthByStyle = tagElement.___offsetWidth;



                    if (___offsetHeightByStyle == 0)
                    {
                        ___offsetHeightByStyle = tagElement.___offsetHeight;
                        if (___offsetHeightByStyle == 0)
                        {
                            if (tagElement.___style.___isHeightValueSet == true)
                            {
                                if (tagElement.___style.___isHeightValuePercent == false)
                                {
                                    ___offsetHeightByStyle = tagElement.___style.___HeightComputedValue;
                                }
                                else
                                {
                                    if (___tagElementParent != null)
                                    {
                                        if (___tagElementParent.___style.___isHeightValueSet == true && (___tagElementParent.___style.___styleSizeMode == CHtmlSizeModeType.Height || ___tagElementParent.___style.___styleSizeMode == CHtmlSizeModeType.Both))
                                        {
                                            if (___tagElementParent.___style.___isHeightValuePercent == false)
                                            {
                                                if (___tagElementParent.___offsetHeight > 0)
                                                {
                                                    if (string.IsNullOrEmpty(___tagElementParent.___style.___Height) == false)
                                                    {
                                                        if (___tagElementParent.___style.___Height[___tagElementParent.___style.___Height.Length - 1] != '%')
                                                        {
                                                            if (tagElement.___style.___HeightComputedValue > 0 && tagElement.___style.___HeightComputedValue < 1)
                                                            {
                                                                ___offsetHeightByStyle = tagElement.___style.___HeightComputedValue * ___tagElementParent.___offsetHeight;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    //  ___offsetHeightByStyle = tagElement.___style.___HeightComputedValue * tagElement.___availHeight;
                                }
                            }
                        }
                    }
                    if (___offsetWidthByStyle == 0)
                    {
                        if (tagElement.___style.___isWidthValueSet == true)
                        {
                            if (tagElement.___style.___isHeightValuePercent == false)
                            {
                                ___offsetWidthByStyle = tagElement.___style.___HeightComputedValue;
                            }
                            else
                            {
                                ___offsetWidthByStyle = tagElement.___style.___WidthComputedValue * tagElement.___availWidth;
                            }
                        }
                    }
                    // if there is no Height or Width set and Tag is UL or NAV or OL leave element to zero size 
                    /*
                    if (commonHTML.___elementTagTypesNoChildSizeCheckIfValuesNonExistsSortedList.ContainsKey(tagElement.___elementTagType))
                    {

                        if (___offsetWidthByStyle == 0)
                        {
                            if (tagElement.___style.___isWidthValueSet == true)
                            {
                                ___ElementShoudKeepZeroWidthRegardless = true;
                            }
                            
                        }
                        if (___offsetHeightByStyle == 0)
                        {
                            if (tagElement.___style.___isHeightValueSet == true)
                                {
                                    // if there is no Height or Width set and Tag is UL or NAV or OL leave element to zero size 
                                    ___ElementShoudKeepZeroHeightRegardless = true;
                                }
                            }
                        
                    }
                     */
                    if (___ElementShoudKeepZeroHeightRegardless == true && ___ElementShoudKeepZeroWidthRegardless == true)
                    {
                        tagElement.___style.StyleCommentAdd("No Height and Width is specified, no child lookup");
                        ___offsetHeightByMeasure = 0;
                        ___offsetWidthByMeasure = 0;
                        //goto MeasureSectionCompleted;
                    }
                    // ==============================================================================================
                    // Debug  Block 
                    // ==============================================================================================








                    // ==============================================================================================




                    // ----------------------------------------------------------------------------------------------
                    // MarginRight and Margin Left should have been merged to offsetLeft by now
                    // ----------------------------------------------------------------------------------------------
                    if (tagElement.___style.___IsCssLeftValueDefined == true)
                    {
                        try
                        {
                            if (tagElement.___style.Left.EndsWith("%", StringComparison.Ordinal) == false)
                            {
                                ___offsetLeftByStyle = commonHTML.GetDoubleValueFromString(tagElement.___style.
                                    Left, tagElement.___availWidth, this.___HTMLTagRemUnitSize);
                            }
                            else
                            {
                                if (___tagElementParent != null)
                                {
                                    ___offsetLeftByStyle = commonHTML.GetDoubleValueFromString(tagElement.___style.
                                      Left, ___tagElementParent.___availWidth, this.___HTMLTagRemUnitSize);
                                }
                                else
                                {
                                    ___offsetLeftByStyle = commonHTML.GetDoubleValueFromString(tagElement.___style.
                      Left, this.___DocumentMinSize.Width, this.___HTMLTagRemUnitSize);
                                }
                            }

                        }
                        catch (Exception ex)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                            }
                        }
                    }
                    if (tagElement.___style.___IsCssRightValueDefined == true)
                    {
                        try
                        {
                            ___offsetRightByStyle = commonHTML.GetDoubleValueFromString(tagElement.___style.Right, tagElement.___availWidth, this.___HTMLTagRemUnitSize);
                        }
                        catch (Exception ex)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                            }
                        }
                    }
                    if (tagElement.___style.___IsCssBottomValueDefined == true)
                    {
                        try
                        {
                            ___offsetBottomByStyle = commonHTML.GetDoubleValueFromString(tagElement.___style.Bottom, tagElement.___availHeight, this.___HTMLTagRemUnitSize);
                        }
                        catch (Exception ex)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                            }
                        }
                    }

                    // ----------------------------------------------------------------------------------------------

                    if (tagElement.___style.___IsCssTopValueDefined == true)
                    {
                        ___offsetTopByStyle = tagElement.___offsetTop;
                    }
                    if (tagElement.___style.___MarginTopComputedValue != 0)
                    {
                        try
                        {
                            ___offsetTopByStyle += tagElement.___style.___MarginTopComputedValue;
                        }
                        catch (Exception ex)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                            }
                        }
                    }
                    //}

                    if (tagElement.___style.___MarginLeftComputedValue != 0)
                    {
                        int __mLeft = (int)tagElement.___style.___MarginLeftComputedValue;
                        if (__mLeft > 0)
                        {
                            ___IsMarginLeftOrPaddingLeftHasValue = true;
                        }
                        if (___IsMarginLeftOrPaddingLeftHasValue == false && tagElement.___style.PaddingLeft.Length != 0)
                        {
                            int __pdLeft = commonHTML.GetIntValueFromString(tagElement.___style.PaddingLeft, 0);
                            if (__pdLeft > 0)
                            {
                                ___IsMarginLeftOrPaddingLeftHasValue = true;
                            }
                        }
                    }



                    int __currentIndexOfParent = -1;

                    __currentIndexOfParent = tagElement.___ChildNodeIndex;



                    if (___tagElementParent != null && tagElement.___IsElementBlock == false && ___tagElementParent.___IsElementBlock == false && tagElement.___ChildNodeIndex == 0)
                    {

                        //___offsetTopByMeasure = tagElement.textNodes.Count;

                    }
                    else
                    {
                        // Check This if tagElement is double or non float
                        if (___tagElementParent != null && ___tagElementParent.___IsElementVisible == true && (commonHTML.IsElemeneITextOrIDraw(tagElement) == true || tagElement.___IsElementVisible == true))
                        {

                            int __LookupIndexOfParent = __currentIndexOfParent;
                            if (__LookupIndexOfParent > 0)
                            {
                                __LookupIndexOfParent--;
                                // Flag for if prior element is block 
                                for (int __priorIndex = __LookupIndexOfParent; __priorIndex >= 0; __priorIndex--)
                                {
                                    CHtmlElement priorElement = ___tagElementParent.___childNodes[__priorIndex] as CHtmlElement;

                                    if (priorElement == null)
                                    {

                                        continue;
                                    }
                                    //=================================
                                    // Prior Element may be float element. skip one
                                    // =================================
                                    if ((priorElement.___IsElementFloat == true && tagElement.___IsElementFloat == false) || (priorElement.___IsElementFloat == false && tagElement.___IsElementFloat == true))
                                    {

                                        continue;
                                    }

                                    if (priorElement.___isElementPositionAbsoluteOrStatic == true)
                                    {
                                        continue;
                                    }
                                    if (priorElement.___IsElementVisible == true)
                                    {
                                        // "style.Clear" should be included here
                                        if (commonHTML.IsElemeneITextOrIDraw(priorElement) == true)
                                        {
                                            if (commonHTML.IsCreateInlineNonTextDrawingElements == true)
                                            {
                                                if (priorElement.___ElementInlineLevel > 0)
                                                {
                                                    if (tagElement.___ElementInlineLevel == 0)
                                                    {
                                                        bool ___IsNeedsToCreateNonTextDrawingElement = false;
                                                        switch (tagElement.___childNodes.Count)
                                                        {
                                                            case 0:
                                                                ___IsNeedsToCreateNonTextDrawingElement = true;
                                                                break;
                                                            case 1:
                                                                CHtmlElement ___firstElement = tagElement.___childNodes[0] as CHtmlElement;
                                                                if (___firstElement != null && (___firstElement.___elementTagType == CHtmlElementType._ELEMENT_BEFORE || ___firstElement.___elementTagType == CHtmlElementType._ELEMENT_AFTER))
                                                                {
                                                                    ___IsNeedsToCreateNonTextDrawingElement = true;
                                                                }
                                                                break;
                                                            case 2:

                                                                break;
                                                        }
                                                        if (___IsNeedsToCreateNonTextDrawingElement == true)
                                                        {
                                                            CHtmlElement __InlineElements = new CHtmlElement();
                                                            __InlineElements.___SetTagNameOnly("#draw");
                                                            __InlineElements.___elementTagType = CHtmlElementType._IDRAW;
                                                            __InlineElements.___parentWeakRef = new WeakReference(tagElement, false);
                                                            __InlineElements.___documentWeakRef = new WeakReference(this, false);
                                                            __InlineElements.___ChildNodeIndex = tagElement.___childNodes.Add(__InlineElements);
                                                            tagElement.___setElementCriticalPropertiesChildNode(__InlineElements);
                                                            this.___calculateTextElementBounds(__InlineElements);
                                                            tagElement.___ElementInlineLevel = priorElement.___ElementInlineLevel;
                                                        }

                                                    }
                                                }
                                            }
                                            //============================================================================
                                            // We should double check priorElement offsetTop is property set
                                            // as follows
                                            // <BR>
                                            // <#TEXT>
                                            // <BR
                                            // <#TEXT>
                                            // ===========================================================================
                                            if (priorElement.___ChildNodeIndex > 0)
                                            {
                                                this.___confirmElementOffsetTopIsCorrentPosition(priorElement, ___tagElementParent);
                                            }
                                            ___offsetTopByMeasure = priorElement.___offsetTop + priorElement.___offsetHeight;


                                            ___offsetTopByMeasureFromPrevoiusNode = ___offsetTopByMeasure;
                                            break;
                                        }
                                        if (tagElement.___ElementInlineLevel <= 0)
                                        {
                                            ___AvoidToUseRectangeYToGetTopPosition = true;
                                            if (priorElement.___isCalculateElementBoundsCalled == false)
                                            {
                                                if (object.ReferenceEquals(tagElement, priorElement) == false)
                                                {
                                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 5)
                                                    {
                                                        commonLog.LogEntry("Strange PriorElement {0} did not call ___calucuateElementBounds(). Call now..", priorElement);
                                                    }
                                                    if (commonHTML.IsElemeneITextOrIDraw(priorElement) == true)
                                                    {
                                                        ___calculateTextElementBounds(priorElement);
                                                    }
                                                    else
                                                    {
                                                        ___calculateElementBounds(priorElement);
                                                    }
                                                }
                                            }
                                            ___offsetTopByMeasure = priorElement.___offsetTop + priorElement.___offsetHeight + Math.Max(priorElement.___marginTop, priorElement.___paddingTop) + Math.Max(priorElement.___marginBottom, priorElement.___paddingBottom);
                                            //___offsetTopByMeasure  = priorElement.offsetTop;
                                            ___offsetTopByMeasureFromPrevoiusNode = ___offsetTopByMeasure;
                                            tagElement.___IgnoreInlineLevelToGetPosition = true;
                                        }
                                        else
                                        {
                                            if (priorElement.___ElementInlineLevel == 0 || priorElement.___IsElementContainsBlockElement == true)
                                            {
                                                ___AvoidToUseRectangeYToGetTopPosition = true;
                                                ___offsetTopByMeasure = priorElement.___offsetTop + priorElement.___offsetHeight + Math.Max(priorElement.___marginTop, priorElement.___paddingTop) + Math.Max(priorElement.___marginBottom, priorElement.___paddingBottom);
                                                tagElement.___IgnoreInlineLevelToGetPosition = true;
                                                goto InlineTopPositonObtained;
                                            }
                                            else
                                            {
                                                ___offsetTopByMeasure = priorElement.___offsetTop;
                                                bool ___ForceToUsePriorElementTop = false;

                                                if (priorElement.___IsElementBlock == true || priorElement.___IsElementContainsBlockElement == true)
                                                {
                                                    ___ForceToUsePriorElementTop = true;
                                                }
                                                else
                                                {


                                                    // 
                                                    // +----[Block]----+---[Inline]
                                                    //                 |
                                                    //                 +---[Inline]--[Block]
                                                    //                 |
                                                    //                 +---[Inline] <=== This node should be tread as block also.
                                                    // 
                                                    if (___tagElementParent.___IsElementVisible == true && ___tagElementParent.___IsElementBlock == true)
                                                    {
                                                        //bool ___IsParentContainsBlockOrChildIsBlock = false;
                                                    }

                                                }
                                                if (___ForceToUsePriorElementTop == true)
                                                {
                                                    ___AvoidToUseRectangeYToGetTopPosition = true;
                                                    ___offsetTopByMeasure = priorElement.___offsetTop + priorElement.___offsetHeight + Math.Max(priorElement.___marginTop, priorElement.___paddingTop) + Math.Max(priorElement.___marginBottom, priorElement.___paddingBottom);
                                                    tagElement.___IgnoreInlineLevelToGetPosition = true;
                                                    goto InlineTopPositonObtained;

                                                }
                                                if (tagElement.___PriorDrawingObject != null)
                                                {
                                                    CHtmlDrawingObject rawDraw = tagElement.___PriorDrawingObject;
                                                    ___offsetTopByMeasure = rawDraw.offsetBounds.Top;
                                                    if (priorElement.___IsElementBlock)
                                                    {
                                                        tagElement.___IgnoreInlineLevelToGetPosition = true;
                                                        ___offsetTopByMeasure = priorElement.___offsetTop + priorElement.___offsetHeight + Math.Max(priorElement.___marginTop, priorElement.___paddingTop) + Math.Max(priorElement.___marginBottom, priorElement.___paddingBottom);
                                                    }
                                                }
                                                else
                                                {
                                                    ___offsetTopByMeasure = priorElement.___offsetTop + priorElement.___offsetHeight + Math.Max(priorElement.___marginTop, priorElement.___paddingTop) + Math.Max(priorElement.___marginBottom, priorElement.___paddingBottom);

                                                }
                                            }
                                        InlineTopPositonObtained:
                                            //___offsetTopByMeasure  = priorElement.offsetTop;
                                            ___offsetTopByMeasureFromPrevoiusNode = ___offsetTopByMeasure;

                                        }
                                        break;
                                    }
                                    else
                                    {

                                        __LookupIndexOfParent--;

                                    }
                                }
                            }
                        }
                    }
                    // ----------------------------------------------------------------------------------------
                    // It may be ___offsetTopByMeasure is not accurate. compare last bottom value on parent.
                    // Use the value if the last bottom is higher than ___offsetTopByMeasure 
                    // ----------------------------------------------------------------------------------------
                    if (___tagElementParent != null && (tagElement.___ElementInlineLevel == 0 || tagElement.___IsElementBlock == true))
                    {

                        if (___elementPriorVisibileNode != null && ___elementPriorVisibileNode.___ElementInlineLevel == 0 && ___elementPriorVisibileNode.___style.___cssFloatType == CSSFloatType.NotSet)
                        {
                            double ___ahocTopMeasure = ___elementPriorVisibileNode.___offsetTop + ___elementPriorVisibileNode.___offsetHeight;
                            if (___ahocTopMeasure > ___offsetTopByMeasure)
                            {
                                ___offsetTopByMeasure = ___ahocTopMeasure;
                            }
                        }
                    }


                LookUpFloatAgain:
                    floatLeftMargin = 0;
                    floatRightMargin = 0;
                    #region floatOverFlowPrecheck
                    // ================================================================================
                    //				   FLOAT OVERFLOW TEST SECTION
                    // ================================================================================
                    if (___tagElementParent != null)
                    {
                        if (___tagElementParent.___cssFloatLeftElementList != null)
                        {
                            ___floatLeftElementCount = ___tagElementParent.___cssFloatLeftElementList.Count;
                        }
                        if (___tagElementParent.___cssFloatRightElementList != null)
                        {
                            ___floatRightElementCount = ___tagElementParent.___cssFloatRightElementList.Count;
                        }
                    }
                    if (tagElement.___IsElementVisible == true && ___tagElementParent != null && tagElement.___IsElementFloat == false)
                    {
                        if (___floatLeftElementCount > 0 || ___floatRightElementCount > 0)
                        {
                            double ___cssFloatBothWidth = ___tagElementParent.___cssFloatRightElementList.floatTotalWidth + ___tagElementParent.___cssFloatLeftElementList.floatTotalWidth;
                            if (___cssFloatBothWidth > 0)
                            {
                                if (___cssFloatBothWidth + tagElement.___offsetWidth >= ___tagElementParent.___availWidth)
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                    {
                                        commonLog.LogEntry("Element {0} can't fit outside floated block : {1} : {2}", tagElement, ___cssFloatBothWidth, ___tagElementParent.___availWidth);
                                    }
                                    // Fix for overflow
                                    // Get Max Height of left right.
                                    ___offsetTopByMeasure = Math.Max(___offsetTopByMeasure, ___tagElementParent.___cssFloatLeftElementList.floatTotalHeight);
                                    ___offsetTopByMeasure = Math.Max(___offsetTopByMeasure, ___tagElementParent.___cssFloatRightElementList.floatTotalHeight);
                                    goto SkipToNext1;

                                }
                            }
                        }
                    }
                    #endregion
                    if (___tagElementParent != null && tagElement.___IsElementVisible == true && tagElement.___availWidth > 0 && tagElement.___IsElementFloat == false)
                    {
                        if (___tagElementParent.___cssFloatLeftElementList != null && ___tagElementParent.___cssFloatLeftElementList.Count > 0)
                        {
                            if (___offsetTopByMeasure <= ___tagElementParent.___cssFloatLeftElementList.floatTotalHeight)
                            {
                                floatLeftMargin = ___tagElementParent.___cssFloatLeftElementList.floatTotalWidth;
                            }
                        }
                        if (___tagElementParent.___cssFloatRightElementList != null && ___tagElementParent.___cssFloatRightElementList.Count > 0)
                        {
                            if (___offsetTopByMeasure <= ___tagElementParent.___cssFloatRightElementList.floatTotalHeight)
                            {
                                floatRightMargin = ___tagElementParent.___cssFloatRightElementList.floatTotalWidth;
                            }
                            if (tagElement.___availWidth - floatLeftMargin - floatRightMargin <= 16)
                            {
                                // No Spaces availavle on specifiled height look for any Y which as enough spaces
                                ___offsetTopByMeasure += (___offsetTopByMeasure + 20);
                                if (LookupLimitHeight < ___offsetTopByMeasure)
                                {
                                    floatLeftMargin = 0;
                                    floatRightMargin = 0;
                                    goto SkipToNext1;
                                }
                                //commonLog.LogEntry("Space LookUp : {0} ", this._LinePoint);
                                goto LookUpFloatAgain;
                            }
                            else
                            {
                                if (___tagElementParent != null)
                                {
                                    if (tagElement.___style.___styleSizeMode != CHtmlSizeModeType.Both || tagElement.___style.___styleSizeMode != CHtmlSizeModeType.Width)
                                    {
                                        ___offsetWidthByStyle = commonHTML.confirmElementWidthAgainstMinWidthAndMaxWidth(___tagElementParent.___availWidth - floatLeftMargin - floatRightMargin, tagElement);
                                        if (___isElementContainsAnyVisibileChildWiderThan(___offsetWidthByStyle, tagElement))
                                        {
                                            if (___floatRightElementCount > 0 || ___floatRightElementCount > 0)
                                            {

                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                {
                                                    commonLog.LogEntry("Element {0} child contains wider block : {1}. needs recaluculation ", tagElement, ___offsetWidthByStyle);
                                                }
                                                int ___currentStack = 0;
                                                ___performChildElementSizeRecalationByWidth(tagElement, ___offsetWidthByStyle, ___currentStack);
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                SkipToNext1:
                    // -----------------------------------------------------------------------------------------------
                    // Element is not floated and clearing element, marginleft should be zero
                    // -----------------------------------------------------------------------------------------------
                    if (floatLeftMargin > 0 && tagElement.___IsElementFloat == false && tagElement.___IsElementClear == true && string.Equals(tagElement.___style.___Clear, "both", StringComparison.OrdinalIgnoreCase) == true)
                    {
                        floatLeftMargin = 0;
                    }

                    /*
                     * +--------------------------------------------------------------------------------------+
                     * | Current Node          No Children       SentenceChild = true  SentenceChild = false  |
                     * |--------------------------------------------------------------------------------------+
                     * |Has InnerText          Display           Layout Now            Layout Later           |
                     * |No  InnerText          Skip              Layout Later          Layout Later           |
                     * +--------------------------------------------------------------------------------------+
                     */


                    // =================================================
                    // Layout At This Node
                    // =================================================


                    SizeF __ElementMeasuredSize = SizeF.Empty;
                    RectangleF ___tagElementRectangle = RectangleF.Empty;
                    // =================================================
                    // [Input] or [TextArea] or [Select] Object
                    // =================================================
                    switch (tagElement.___elementTagType)
                    {
                        case CHtmlElementType.INPUT:
                            {
                                if (tagElement.type.Length != 0)
                                {
                                    switch (tagElement.type)
                                    {
                                        case "hidden":
                                            if (tagElement.___IsElementVisible == true)
                                            {
                                                tagElement.___IsElementVisible = false;
                                            }
                                            break;
                                        case "submit":
                                        case "reset":
                                        case "button":
                                            string _TitleText = "";
                                            if (tagElement.___attributes.ContainsKey("value") == true)
                                            {
                                                _TitleText = "  " + commonHTML.GetElementAttributeInString(tagElement, "value") + "  ";

                                            }
                                            if (_TitleText.Length == 0)
                                            {
                                                if (tagElement.type == "submit")
                                                {
                                                    _TitleText = "   Submit   ";
                                                }
                                                else if (tagElement.type == "reset")
                                                {
                                                    _TitleText = "   Reset   ";
                                                }
                                                else
                                                {
                                                    _TitleText = "    ";
                                                }
                                            }
                                            if (_TitleText.Length != 0)
                                            {
                                                if (tagElement.___childNodes.Count > 0)
                                                {
                                                    tagElement.___childNodes.Clear();
                                                }
                                                CHtmlTextElement __inputValueTextElement = new CHtmlTextElement();
                                                __inputValueTextElement.value = _TitleText;
                                                __inputValueTextElement.___IsSystemHidden = true;
                                                __inputValueTextElement.___parentWeakRef = new WeakReference(tagElement, false);
                                                __inputValueTextElement.___documentWeakRef = new WeakReference(this, false);
                                                this.___registerElementDocumentElementID(__inputValueTextElement);
                                                __inputValueTextElement.___ChildNodeIndex = tagElement.___childNodes.Add(__inputValueTextElement);
                                                tagElement.___setElementCriticalPropertiesChildNode(__inputValueTextElement);
                                                this.___calculateTextElementBounds(__inputValueTextElement);
                                            }
                                            break;
                                        case "text":
                                        case "password":
                                        case "search":
                                        case "file":
                                        case "range":
                                        case "tel":
                                        case "email":
                                        case "url":
                                        case "number":
                                            // =====================================================
                                            // Creates TextBox Like Control
                                            // =====================================================
                                            if (___offsetHeightByStyle < 20)
                                            {
                                                ___offsetHeightByStyle = 20;
                                            }
                                            if (___offsetWidthByStyle < 100)
                                            {
                                                ___offsetWidthByStyle = 100;
                                            }
                                            ___tagElementRectangle = new RectangleF(0, 0, (float)___offsetWidthByStyle, (float)___offsetHeightByStyle);
                                            goto SetSizeSection;
                                        case "color":
                                        case "month":
                                        case "date":
                                        case "time":
                                        case "week":
                                        case "datetime-local":
                                            if (___offsetHeightByStyle < 20)
                                            {
                                                ___offsetHeightByStyle = 20;
                                            }
                                            if (___offsetWidthByStyle < 100)
                                            {
                                                ___offsetWidthByStyle = 100;
                                            }
                                            ___tagElementRectangle = new RectangleF(0, 0, (float)___offsetWidthByStyle, (float)___offsetHeightByStyle);
                                            goto SetSizeSection;
                                        // =====================================================
                                        // Creates Other Type Control
                                        // =====================================================
                                        case "image":
                                            if (___offsetWidthByStyle <= 0 || ___offsetHeightByStyle <= 0)
                                            {
                                                if (string.IsNullOrEmpty(tagElement.___style.___IMG_FullURL) == false)
                                                {
                                                    if (this.___PageRequestedUrlList.ContainsKey(tagElement.___style.___IMG_FullURL) == false)
                                                    {
                                                        this.___downloaddirectly(tagElement.___style.___IMG_FullURL, "image", null, null, this.___URL, this.___charset, CHtmlThreadPoolQueueObjectType.UrlImage, null, tagElement, 0, CHtmlUrlSourceType.Src, false);
                                                        ___tagElementRectangle = new RectangleF(0, 0, (float)tagElement.___offsetWidth, (float)tagElement.___offsetHeight);
                                                        goto SetSizeSection;
                                                    }
                                                    else
                                                    {
                                                        Image _imageCached = null;
                                                        this.___images.TryGetValue(tagElement.___style.___IMG_FullURL, out _imageCached);
                                                        if (_imageCached != null)
                                                        {
                                                            try
                                                            {
                                                                CHtmlDocument.___resetElementSizeByImageSize(tagElement, _imageCached);
                                                                goto SetSizeSection;

                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                                {
                                                                    commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                // Unfortunaly there is no image is avaiable use default size
                                                ___tagElementRectangle = new RectangleF(0, 0, 30, 20);
                                                goto SetSizeSection;
                                            }
                                            else
                                            {
                                                ___tagElementRectangle = new RectangleF(0, 0, (float)___offsetWidthByStyle, (float)___offsetHeightByStyle);
                                            }
                                            goto SetSizeSection;


                                        default:
                                            break;

                                    }
                                }
                                break;
                            }
                        case CHtmlElementType.SELECT:
                            {
                                break;
                            }
                        default:
                            break;
                    }




                    /* -----------------------------------------------
                     * This may cauces unexpected behavior 
                     * DO NOT IMPLEMENT 
                     * ------------------------------------------------
                    if(tagElement.IsVisible == true && tagElement.SizeMode == CHtmlSizeModeType.Both && tagElement.textNodes.Count == 0)
                    {
                        if(___offsetHeightByStyle > 0)
                        {
                            __ElementMeasuredSize =new SizeF(___offsetWidthByStyle, ___offsetHeightByStyle);
                            goto MeasureDone;
                        }
                    }
                    */


                    //this.CreateDrawingElementForElement(tagElement);







                    int ___childNodeCount = tagElement.___childNodes.Count;

                    for (int i = 0; i < ___childNodeCount; i++)
                    {
                        CHtmlElement textandnodeElement = tagElement.___childNodes[i] as CHtmlElement;
                        if (textandnodeElement.___IsElementVisible == false || textandnodeElement.___elementTagType == CHtmlElementType.COMMENT)
                        {
                            continue;
                        }
                        ___tagElementChildVisibleElementCount++;
                        if (textandnodeElement.___style.___cssPositionComputedValueType == CSSPositionType.absolute)
                        {
                            continue;
                        }
                        // ------------------------------------------------------------------------
                        tagElement.___ElementChildMinInlineLevel = Math.Min(tagElement.___ElementChildMinInlineLevel, textandnodeElement.___ElementChildMinInlineLevel);
                        // ------------------------------------------------------------------------
                        if (textandnodeElement.___drawingObjectList == null || textandnodeElement.___drawingObjectList.Count == 0)
                        {
                            if (textandnodeElement.offsetBounds.Left < -1000 || textandnodeElement.offsetBounds.Top < -1000)
                                continue;
                            if (textandnodeElement.___elementTagType == CHtmlElementType.LI || textandnodeElement.___elementTagType == CHtmlElementType.MENUITEM)
                            {
                                if (textandnodeElement.___style.___cssFloatType != CSSFloatType.NotSet)
                                {
                                    // Count How may float exists in child
                                    ___childmeasuringFloatElementCount++;
                                }
                                else
                                {
                                    ___childmeasuringNonFloatElementCount++;
                                }
                            }
                            if (___tagElementRectangle == RectangleF.Empty)
                            {
                                ___tagElementRectangle = textandnodeElement.offsetBounds;
                                tagElement.___BoundsCalucByHTMLElementsCount++;
                                tagElement.___BoundsCalucWithChildHTMLElementsTotalCount += textandnodeElement.___BoundsCalucByHTMLElementsCount;
                                tagElement.___BoundsCalucWithChildDrawElementsTotalCount += textandnodeElement.___BoundsCalucByDrawElementsCount;
                            }
                            else
                            {
                                ___tagElementRectangle = RectangleF.Union(___tagElementRectangle, textandnodeElement.offsetBounds);
                                tagElement.___BoundsCalucByHTMLElementsCount++;
                                tagElement.___BoundsCalucWithChildHTMLElementsTotalCount += textandnodeElement.___BoundsCalucByHTMLElementsCount;
                                tagElement.___BoundsCalucWithChildDrawElementsTotalCount += textandnodeElement.___BoundsCalucByDrawElementsCount;
                            }
                            continue;
                        }
                        else
                        {
                            CHtmlElement ___TextTopElement = textandnodeElement.___InlineVeryTopTextElement;
                            int ___textandNodeDrawingElementCount = textandnodeElement.___drawingObjectList.Count;
                            for (int tpos = 0; tpos < ___textandNodeDrawingElementCount; tpos++)
                            {
                                CHtmlDrawingObject drawElement = textandnodeElement.___drawingObjectList[tpos];

                                // ===============================================================================
                                // <p><img/><#TEXT></p> may have inline shifted sentences
                                // In that case Look For FirstElement Position To Measure its position
                                // ===============================================================================
                                System.Drawing.RectangleF drawingElementRenctngleF = drawElement.offsetBounds;
                                if (___TextTopElement != null)
                                {
                                    if (___TextTopElement.___offsetTop > 0 && ___TextTopElement.___offsetLeft > 0)
                                    {
                                        drawingElementRenctngleF.Offset((float)___TextTopElement.___offsetLeft, (float)___TextTopElement.___offsetTop);
                                    }
                                    else if (___TextTopElement.___offsetTop > 0)
                                    {
                                        drawingElementRenctngleF.Offset(0, (float)___TextTopElement.___offsetTop);

                                    }
                                }
                                // ===============================================================================

                                if (drawElement.offsetBounds.Left < -1000 || drawElement.offsetBounds.Top < -1000)
                                    continue;
                                if (___tagElementRectangle == RectangleF.Empty)
                                {

                                    ___tagElementRectangle = drawingElementRenctngleF;
                                    tagElement.___BoundsCalucByDrawElementsCount++;
                                }
                                else
                                {

                                    ___tagElementRectangle = RectangleF.Union(___tagElementRectangle, drawingElementRenctngleF);
                                    tagElement.___BoundsCalucByDrawElementsCount++;

                                }

                            }
                        }

                        /*
                        if(textandnodeElement.___elementTagType == CHtmlElementType._ITEXT)
                        {
                            textandnodeElement.offsetWidth = ___tagElementRectangle.Width;
                            textandnodeElement.offsetHeight = ___tagElementRectangle.Height;
                        }
                        */

                    }



                    if (___AvoidToUseRectangeYToGetTopPosition == false)
                    {
                        if (tagElement.___IsElementBlock == false && tagElement.___IsElementContainsBlockElement == false)
                        {
                            //___offsetTopByMeasure = ___tagElementRectangle.Top;
                            if (___ForceToUseDrawingRectangle == false && tagElement.___ElementInlineShifted == true)
                            {
                                if (tagElement.___ElementInlineLevel > 1)
                                {
                                    ___offsetTopByMeasure = ___tagElementRectangle.Y;
                                }
                                ___ForceToUseDrawingRectangle = true;

                            }
                        }
                    }
                //__ElementMeasuredSize = new SizeF(___tagElementRectangle.X + ___tagElementRectangle.Width, ___tagElementRectangle.Y + ___tagElementRectangle.Height);
                SetSizeSection:
                    if (tagElement.___ElementInlineLevel == 0)
                    {
                        if (___childmeasuringNonFloatElementCount == 0)
                        {
                            if (___childmeasuringFloatElementCount > 0 && ___childmeasuringFloatElementCount == tagElement.___childNodes.Count)
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 20)
                                {
                                    commonLog.LogEntry("All child Elements are 'floated' Element. Measuing was " + ___tagElementRectangle.ToString() + ", which is reset to 0 for " + tagElement.toLogString());
                                }
                                tagElement.___style.StyleCommentAdd("All child Elements are 'floated' Element. Measuing was " + ___tagElementRectangle.ToString() + ", which is reset to 0;");
                                ___tagElementRectangle = Rectangle.Empty;
                            }
                        }
                    }
                    __ElementMeasuredSize = ___tagElementRectangle.Size;



                    // ==========================================================================
                    // Closing Element may be inline but parent is block 
                    // It shoudl use ___offsetTopByMeasureFromPrevoiusNode as top
                    // +-----------------------+
                    // |    <Block>            |
                    // |    <i>XYZ</i>         |
                    // |    <a>XYZ</a>         |
                    // ==========================================================================

                    if (tagElement.___IsElementBlock == false && ___ForceToUseDrawingRectangle == true)
                    {
                        if (___tagElementParent.___IsElementBlock == true)
                        {
                            if (tagElement.___ElementInlineLevel == 1)
                            {
                                //commonLog.LogEntry("{0} : {1} : {2}", tagElement, ___offsetTopByMeasure, ___offsetTopByMeasureFromPrevoiusNode);
                                ___ForceToUseDrawingRectangle = false;
                                ___offsetTopByMeasure = ___offsetTopByMeasureFromPrevoiusNode;
                                if (tagElement.___IsElementFloat == false)
                                {
                                    if (___offsetTopByMeasureFromPrevoiusNode > 0)
                                    {
                                        //tagElement.RelocateDrawingElementToNewLocation(new PointF(0, ___offsetTopByMeasure));
                                    }
                                }
                            }
                        }
                    }



                    switch (tagElement.___elementTagType)
                    {
                        case CHtmlElementType.TABLE:
                            {
                                if (tagElement.TableCells == null)
                                {
                                    if (___parentAllowedWidth > 50)
                                    {
                                        tagElement.___offsetWidth = ___parentAllowedWidth;
                                    }
                                    this.___composeTableCells(tagElement);
                                }
                                __ElementMeasuredSize = new SizeF((float)tagElement.___offsetWidth, (float)tagElement.___offsetHeight);
                                ___IsBoundsFixedSize = true;
                            }
                            break;
                        case CHtmlElementType.BR:
                        case CHtmlElementType.NOBR:
                            ___offsetWidthByMeasure = 0;
                            ___offsetWidthByStyle = 0;
                            if (tagElement.___IsElementVisible == true)
                            {
                                ___offsetHeightByMeasure = this.___getPreviousFontHeight(tagElement);
                            }
                            else
                            {
                                ___offsetHeightByMeasure = 0;
                            }
                            __ElementMeasuredSize.Width = 0;
                            break;
                        default:
                            break;
                    }

                    if (tagElement.___IsElementVisible == true)
                    {
                        switch (tagElement.___style.___OverFlowXComputedType)
                        {
                            case CSSOverFlowType.Hidden:
                            case CSSOverFlowType.Scroll:
                                if (___offsetWidthByStyle > 0)
                                {
                                    ___offsetWidthByMeasure = ___offsetWidthByStyle;
                                    ___DoNotAlferWidthAfterward = true;

                                }
                                break;
                            default:
                                break;
                        }
                        switch (tagElement.___style.___OverFlowYComputedType)
                        {
                            case CSSOverFlowType.Hidden:
                            case CSSOverFlowType.Scroll:
                                if (___offsetHeightByStyle > 0)
                                {
                                    ___offsetHeightByMeasure = ___offsetHeightByStyle;
                                    ___DoNotAlferHeightAfterward = true;

                                }
                                break;
                            default:
                                break;
                        }


                    }


                    if (__ElementMeasuredSize.Height + tagElement.___marginBottom > ___offsetHeightByMeasure)
                    {
                        ___offsetHeightByMeasure = (int)__ElementMeasuredSize.Height + tagElement.___marginBottom;
                        if (tagElement.___minHeight > 0 && tagElement.___minHeight > ___offsetHeightByMeasure)
                        {
                            ___offsetHeightByMeasure = tagElement.___minHeight;
                        }
                    }
                    if (__ElementMeasuredSize.Width > ___offsetWidthByMeasure)
                    {

                        ___offsetWidthByMeasure = (int)__ElementMeasuredSize.Width;
                    }
                    if (tagElement.___style.___styleSizeMode == CHtmlSizeModeType.Width || tagElement.___style.___styleSizeMode == CHtmlSizeModeType.Both)
                    {
                        tagElement.___offsetWidth = ___offsetWidthByStyle;
                        //tagElement.offsetWidth  = Math.Max(___offsetWidthByStyle,  ___offsetWidthByMeasure);
                    }
                    else
                    {
                        if (___offsetWidthByStyle != ___DocumentMinSize.Width)
                        {
                            tagElement.___offsetWidth = Math.Max(___offsetWidthByStyle, ___offsetWidthByMeasure);
                            if (___ElementShoudKeepZeroWidthRegardless == false)
                            {
                                if (tagElement.___availWidth > 0 && tagElement.___offsetWidth > tagElement.___availWidth)
                                {
                                    tagElement.___offsetWidth = tagElement.___availWidth;
                                }
                            }
                            if ((tagElement.___style.___styleSizeMode == CHtmlSizeModeType.Undefined  || tagElement.___style.___styleSizeMode == CHtmlSizeModeType.Height) && tagElement.___offsetWidth == 0 && tagElement.___style.___cssFloatType == CSSFloatType.NotSet &&  ___tagElementChildVisibleElementCount > 0)
                            {
                                if (___tagElementParent != null && ___tagElementParent.___cssFloatLeftElementList != null  && ___tagElementParent.___cssFloatLeftElementList.Count == 0 && ___tagElementParent.___cssFloatRightElementList != null && ___tagElementParent.___cssFloatRightElementList.Count == 0)
                                {
                                    if (commonHTML.elementTagTypesNormallyBlockSortedList.ContainsKey(tagElement.___elementTagType) == true && tagElement.___availWidth > 0)
                                    {

                                        tagElement.___offsetWidth = tagElement.___availWidth;
                                    }
                                }
                            }
                        }
                        else
                        {
                            tagElement.___offsetWidth = ___offsetWidthByMeasure;
                        }
                    }
                    if (___ElementShoudKeepZeroHeightRegardless == false)
                    {
                        tagElement.___offsetHeight = Math.Max(___offsetHeightByStyle, ___offsetHeightByMeasure);
                    }
                    else
                    {
                        tagElement.___offsetHeight = 0;
                    }
                    // ===================================================================================
                    // offsetWidth should include padding Left and Right
                    // ===================================================================================
                    if (___ElementShoudKeepZeroWidthRegardless == false)
                    {
                        if (tagElement.___IsElementBlock == true && tagElement.___IsElementVisible == true && tagElement.___ElementInlineLevel == 0)
                        {
                            if (tagElement.___paddingLeft != 0)
                            {
                                tagElement.___offsetWidth += tagElement.___paddingLeft;
                            }
                            if (tagElement.___paddingRight != 0)
                            {
                                tagElement.___offsetWidth += tagElement.___paddingRight;
                            }
                            if (tagElement.___offsetWidth > 0 && tagElement.___offsetWidth > tagElement.___availWidth)
                            {
                                tagElement.___availWidth = tagElement.___offsetWidth;
                            }
                        }
                    }
                    // ===================================================================================
                    // if tag is block check inline cornor
                    // ===================================================================================
                    if (___ElementShoudKeepZeroHeightRegardless == false)
                    {
                        if (tagElement.___IsElementBlock == true && tagElement.___ElementInlineShifted == true)
                        {
                            if (tagElement.___offsetWidth < tagElement.___InlineStringLayoutPoint.X)
                            {
                                tagElement.___offsetWidth = tagElement.___InlineStringLayoutPoint.X;
                                ___offsetWidthByMeasure = tagElement.___InlineStringLayoutPoint.X;
                            }
                            if (tagElement.___offsetHeight < tagElement.___InlineStringLayoutPoint.Y)
                            {
                                tagElement.___offsetHeight = tagElement.___InlineStringLayoutPoint.Y;
                                ___offsetHeightByMeasure = tagElement.___InlineStringLayoutPoint.Y;
                            }

                        }
                    }
                    //AfterWidthAndHeightDone:


                    #region ProcessClear
                    if (tagElement.___IsElementClear == true)
                    {
                        bool IsClearCalledForNoFloating = false;
                        switch (tagElement.___style.___cssClearType)
                        {
                            case CSSElelemntFloatClearType.Right:
                                CHtmlRectangle rectRight = GetStyleFloatClearRectangle(___tagElementParent, tagElement, tagElement.___style.___Clear, tagElement.___offsetWidth, (int)___offsetTopByMeasure);
                                //ResetFloatElementBoundsHeight(tagElement.parent.cssFloatRightElementList, rectRight.Y, false);
                                if (___tagElementParent.___cssFloatRightElementList.Count > 0)
                                {
                                    ___tagElementParent.___cssFloatRightDoneList.AddRange(___tagElementParent.___cssFloatRightElementList as ICollection);
                                    ___tagElementParent.___cssFloatRightElementList.Clear();
                                }
                                ___offsetLeftByMeasure = rectRight.X;
                                ___offsetTopByMeasure = rectRight.Height;
                                IsPositionSwitchedByFloatOrClear = true;
                                //___OffsetWidthTop = tagElement.parent.offsetTop;
                                break;
                            case CSSElelemntFloatClearType.Left:
                                CHtmlRectangle rectLeft = GetStyleFloatClearRectangle(___tagElementParent, tagElement, tagElement.___style.___Clear, tagElement.___offsetWidth, ___offsetTopByMeasure);
                                if (___tagElementParent.___cssFloatLeftElementList.Count > 0)
                                {
                                    ___tagElementParent.___cssFloatLeftDoneList.AddRange(___tagElementParent.___cssFloatLeftElementList as ICollection);
                                    ___tagElementParent.___cssFloatLeftElementList.Clear();
                                }
                                ___offsetLeftByMeasure = rectLeft.X;
                                ___offsetTopByMeasure = rectLeft.Height;
                                IsPositionSwitchedByFloatOrClear = true;
                                break;
                            case CSSElelemntFloatClearType.Both:
                                if (___tagElementParent != null && ___tagElementParent.___cssFloatLeftElementList.Count == 0 && ___tagElementParent.___cssFloatRightElementList.Count == 0)
                                {
                                    IsClearCalledForNoFloating = true;
                                    goto AfterClear;

                                }

                                CHtmlRectangle rectCenter = GetStyleFloatClearRectangle(___tagElementParent, tagElement, tagElement.___style.___Clear, tagElement.___offsetWidth, ___offsetTopByMeasure);
                                if (___tagElementParent.___cssFloatRightElementList.Count > 0)
                                {
                                    ___tagElementParent.___cssFloatRightDoneList.AddRange(___tagElementParent.___cssFloatRightElementList as ICollection);
                                    ___tagElementParent.___cssFloatRightElementList.Clear();
                                }
                                if (___tagElementParent.___cssFloatLeftElementList.Count > 0)
                                {
                                    ___tagElementParent.___cssFloatLeftDoneList.AddRange(___tagElementParent.___cssFloatLeftElementList as ICollection);
                                    ___tagElementParent.___cssFloatLeftElementList.Clear();
                                }
                                //___tagElementParent.cssFloatTopPostionList.Add(0);
                                ___offsetLeftByMeasure = rectCenter.X;
                                ___offsetTopByMeasure = rectCenter.Height;
                                /*
                                if(rectCenter.Width > 0 && rectCenter.Width < ___offsetWidthByStyle)
                                {
                                    ResetMeasureAndDrawChildSentences(tagElement, rectCenter.Width, true);
                                    tagElement.offsetWidth = rectCenter.Width;
                                }
                                */
                                IsPositionSwitchedByFloatOrClear = true;
                                break;
                        }
                    AfterClear:
                        if (IsClearCalledForNoFloating == true)
                        {
                            //commonLog.LogEntry("No Elements exists for clearing");
                            IsPositionSwitchedByFloatOrClear = true;
                        }
                    }
                    #endregion

                    /*	if((tagElement.___IsElementFloat == true || (___tagElementParent  !=null && (___tagElementParent.cssFloatRightElementList.Count > 0 ||___tagElementParent.cssFloatLeftElementList.Count > 0))))
					 */

                    //if(tagElement.___IsElementFloat == true && ___tagElementParent  !=null)
                    if ((tagElement.___IsElementFloat == true || (___tagElementParent != null && (___tagElementParent.___cssFloatLeftElementList.Count > 0 || ___tagElementParent.___cssFloatLeftElementList.Count > 0))))
                    {
                        // =========================================================================
                        // Objects following a floating object move in relation to the
                        // position of the floating object.
                        // The floating object is moved left or right until it reaches 
                        // the border, padding, or margin of another block-level object.
                        // 
                        // [Before Insert]
                        // +------------------+
                        // |                  |
                        // |~~~~~~~~~~~~~~~   |
                        // | float:left       |
                        // |~~~~~~~~~~~~~~~   |
                        // +------------------+
                        // 
                        // [Bad Insert]
                        // +------------------+
                        // |                  |
                        // |~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~|
                        // | float:left    | float:left      |
                        // |~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~
                        // +------------------+
                        // [Good Insert]
                        // +------------------+
                        // |                  |
                        // |~~~~~~~~~~~~~~~   |
                        // | float:left       |
                        // |~~~~~~~~~~~~~~~   |
                        // |~~~~~~~~~~~~~~~   |
                        // | float:left       |
                        // |~~~~~~~~~~~~~~~   |
                        // +------------------+
                        // =========================================================================
                        #region ProcessFloat
                        try
                        {
                            switch (tagElement.___style.___cssFloatType)
                            {
                                case CSSFloatType.Right:
                                    if (___tagElementParent.___cssFloatLeftElementList.Count == 0 && ___tagElementParent.___cssFloatRightElementList.Count == 0 && ___tagElementParent.___cssFloatTopPostionList.Count == 0)
                                    {
                                        ___tagElementParent.___cssFloatTopPostionList.Add((int)___offsetTopByMeasure);
                                    }
                                    //CHtmlRectangle rectRight = GetStyleFloatBeginEndOffsetRectangle(tagElement.parent, tagElement, "right", false);	
                                    ___tagElementParent.___cssFloatRightElementList.Add(tagElement);



                                    ___offsetLeftByMeasure = tagElement.___offsetLeft;
                                    ___offsetTopByMeasure = tagElement.___offsetTop + ___tagElementParent.___cssFloatTopPostionList.Max;
                                    if (___offsetTopByMeasure == 0 && ___tagElementParent.___cssFloatRightDoneList.Count > 0)
                                    {
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                        {
                                            commonLog.LogEntry("float right elemnt : {0} still top is zero double checking...", tagElement);
                                        }
                                        ___offsetTopByMeasure = this.___getElementBottomFromArrayList(___tagElementParent.___cssFloatRightDoneList);


                                    }
                                    if (tagElement.___IsFloatStyleTopShiftOccurred == true && ___tagElementParent.___cssFloatTopPostionList.Count > 0)
                                    {
                                        //___tagElementParent.cssFloatTopPostionList.Add(tagElement.offsetHeight + ___tagElementParent.cssFloatTopPostionList.GetMaximumValueFromList() );
                                    }

                                    tagElement.___offsetTop = ___offsetTopByMeasure;
                                    IsPositionSwitchedByFloatOrClear = true;
                                    //___OffsetWidthTop = tagElement.parent.offsetTop;
                                    //goto AfterPostionSet;
                                    break;

                                case CSSFloatType.Left:
                                    /*
#if DEBUG
                                    if (tagElement.___classList.ContainsKey("unit") == true)
                                    {
                                        commonLog.LogEntry("HERE");
                                    }
#endif
                                     */

                                    if (___tagElementParent.___cssFloatLeftElementList.Count == 0 && ___tagElementParent.___cssFloatRightElementList.Count == 0 && ___tagElementParent.___cssFloatTopPostionList.Count == 0)
                                    {
                                        ___tagElementParent.___cssFloatTopPostionList.Add((int)___offsetTopByMeasure);

                                    }
                                    //CHtmlRectangle rectLeft = GetStyleFloatBeginEndOffsetRectangle(tagElement.parent, tagElement, "left", false);
                                    ___tagElementParent.___cssFloatLeftElementList.Add(tagElement);

                                    ___offsetTopByMeasure = tagElement.___offsetTop + ___tagElementParent.___cssFloatTopPostionList.Max;
                                    if (___offsetTopByMeasure < 300 && ___tagElementParent.___cssFloatLeftDoneList.Count > 0)
                                    {
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                        {
                                            commonLog.LogEntry("float left elemnt : {0} still top is zero double checking...", tagElement);
                                        }
                                        ___offsetTopByMeasure = Math.Max(this.___getElementBottomFromArrayList(___tagElementParent.___cssFloatLeftDoneList), ___offsetTopByMeasure);


                                    }



                                    if (tagElement.___IsFloatStyleTopShiftOccurred == true && ___tagElementParent.___cssFloatTopPostionList.Count > 0)
                                    {
                                        //___tagElementParent.cssFloatTopPostionList.Add(tagElement.offsetHeight + ___tagElementParent.cssFloatTopPostionList.GetMaximumValueFromList() );
                                    }


                                    ___offsetLeftByMeasure = tagElement.___offsetLeft;







                                    //tagElement.offsetTop = ___offsetTopByMeasure;
                                    IsPositionSwitchedByFloatOrClear = true;
                                    //goto AfterPostionSet;
                                    break;

                                default:
                                    if (___tagElementParent.___cssFloatLeftElementList.Count > 0 || ___tagElementParent.___cssFloatRightElementList.Count > 0)
                                    {
                                        if (___offsetLeftByMeasure < ___tagElementParent.___cssFloatLeftElementList.floatTotalWidth)
                                        {
                                            if (___tagElementParent.___cssFloatLeftElementList.floatTotalWidth + tagElement.offsetWidth < ___tagElementParent.availWidth)
                                            {
                                                ___offsetLeftByMeasure = ___tagElementParent.___cssFloatLeftElementList.floatTotalWidth;
                                            }
                                            else
                                            {
                                                if (___offsetTopByMeasure < ___tagElementParent.___cssFloatLeftElementList.floatTotalHeight)
                                                {
                                                    tagElement.___style.StyleCommentAdd("Float Exists, but it does not fit rectangle.");
                                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                    {
                                                        commonLog.LogEntry("Float exists but, it may overflow : {0}", tagElement);
                                                    }
                                                    ___offsetLeftByStyle = 0;
                                                    ___offsetTopByMeasure = ___tagElementParent.___cssFloatLeftElementList.floatTotalHeight;
                                                }
                                            }
                                        }
                                        IsPositionSwitchedByFloatOrClear = true;
                                    }
                                    break;
                            }
                        }
                        catch (Exception ex)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                            {
                                commonLog.LogEntry("CalculateElementBounds Float Processing", ex);
                            }

                        }
                    }

                        #endregion



                    if (tagElement.___IsElementVisible == true && (tagElement.___IsElementLayoutByInlineBlockWay == true || tagElement.___style.___cssDisplayComputedValueType == CSSDisplayType.InlineBlock || tagElement.___style.___cssDisplayComputedValueType == CSSDisplayType.InlineBox || tagElement.___style.___cssDisplayComputedValueType == CSSDisplayType.TableCell || tagElement.___style.___cssDisplayComputedValueType == CSSDisplayType.InlineStack || tagElement.___style.___cssDisplayComputedValueType == CSSDisplayType.Table))
                    {
                        // ================================================================================
                        // Disply=Box Conversion
                        // +---------------+
                        // | [IB][IB][IB]  |
                        // | [IB][IB][IB]  |
                        // +---------------+
                        // IB : Inline-Block Element
                        // ================================================================================
                        if (tagElement.___ChildNodeIndex > 0 && ___tagElementParent.___availWidth > 10)
                        {
                            CHtmlElement prevBlockElement = ___tagElementParent.___childNodes[tagElement.___ChildNodeIndex - 1] as CHtmlElement;
                            if (prevBlockElement != null)
                            {
                                if (___tagElementParent.___availWidth > prevBlockElement.___offsetLeft + prevBlockElement.___offsetWidth + tagElement.___offsetWidth)
                                {
                                    ___offsetTopByMeasure = prevBlockElement.___offsetTop;
                                    ___offsetLeftByMeasure = prevBlockElement.___offsetLeft + prevBlockElement.___offsetWidth;
                                }
                                else
                                {
                                    ___offsetTopByMeasure = prevBlockElement.___offsetTop + prevBlockElement.___offsetHeight;
                                    //___offsetLeftByMeasure
                                }
                            }
                        }
                    }
                    bool __IsCSSRightSpecified = false;
                    double ___cssRightWidth = 0;
                    if (tagElement.___IsElementVisible == true && string.IsNullOrEmpty(tagElement.___style.___Right) == false)
                    {
                        if (commonHTML.IsStringAutoOrInherit(tagElement.___style.___Right) == false)
                        {
                            tagElement.___style.___IsCssRightValueDefined = true;
                            __IsCSSRightSpecified = true;
                            if (__IsCSSRightSpecified == false) { ;}
                            ___ForceToUseDrawingRectangle = true;
                            ___cssRightWidth = commonHTML.GetDoubleValueFromString(tagElement.___style.___Right, tagElement.___availWidth, this.___HTMLTagRemUnitSize);
                            if (___tagElementParent != null && ___tagElementParent.___availWidth > tagElement.___offsetWidth)
                            {
                                double ___PossibleLeftOffset = ___tagElementParent.___availWidth - tagElement.___offsetWidth - ___cssRightWidth;
                                if (___PossibleLeftOffset > 0)
                                {
                                    if (___offsetLeftByMeasure < ___PossibleLeftOffset)
                                    {
                                        ___offsetLeftByMeasure = ___PossibleLeftOffset;

                                    }
                                }
                            }
                        }
                        else
                        {
                            tagElement.___style.___Right = "";
                            tagElement.___style.___IsCssRightValueDefined = false;

                        }
                    }
                    else
                    {
                        tagElement.___style.___IsCssRightValueDefined = false;

                    }
                  //  bool __IsCSSTopSpecified = false;
                    if (tagElement.___IsElementVisible == true && tagElement.___style.___IsCssTopValueDefined == true)
                    {
                        //__IsCSSTopSpecified = true;

                        if (tagElement.___style.___cssPositionComputedValueType == CSSPositionType.absolute)
                        {
                            ___ForceToUseDrawingRectangle = true;
                        }
                        if (___ForceToUseDrawingRectangle == true)
                        {
                            ___offsetTopByMeasure = commonHTML.GetDoubleValueFromString(tagElement.___style.Top, tagElement.___availHeight, this.___HTMLTagRemUnitSize);
                        }
                        else
                        {
                            ___offsetTopByMeasure = commonHTML.GetDoubleValueFromString(tagElement.___style.Top, tagElement.___availHeight, this.___HTMLTagRemUnitSize) + ___offsetTopByMeasure;
                        }
                    }

                    if (tagElement.___IsElementVisible == true)
                    {

                        double ___parentPaddingLeft = 0;
                        double ___parentPaddingTop = 0;
                        if (___tagElementParent != null)
                        {
                            ___parentPaddingLeft = ___tagElementParent.___paddingLeft;
                            ___parentPaddingTop = ___tagElementParent.___paddingTop;

                        }
                        double ___marginLeft = 0;
                        if (___tagElementParent != null && tagElement.___marginLeft <= ___tagElementParent.___availWidth)
                        {
                            ___marginLeft = tagElement.___marginLeft;
                        }
                        if (tagElement.___isElementPositionAbsoluteOrStatic == false)
                        {
                            if (___ForceToUseDrawingRectangle == true)
                            {
                                tagElement.___offsetTop = ___offsetTopByMeasure;
                                tagElement.___offsetLeft = ___offsetLeftByMeasure;

                            }
                            else
                            {
                                tagElement.___offsetTop = ___offsetTopByMeasure;
                                tagElement.___offsetLeft = Math.Max(___offsetLeftByStyle, floatLeftMargin);
                                if (tagElement.___offsetLeft < ___offsetLeftByMeasure)
                                {
                                    tagElement.___offsetLeft = ___offsetLeftByMeasure;
                                }

                            }
                            if (___parentPaddingLeft > 0)
                            {
                                //tagElement.offsetLeft += ___parentPaddingLeft;
                            }
                            if (___parentPaddingTop > 0)
                            {
                                if (___ForceToUseDrawingRectangle == true)
                                {
                                    tagElement.___offsetTop += ___parentPaddingTop;
                                    //tagElement.offsetHeight +=___parentPaddingTop; 
                                }
                            }
                        }
                        else
                        {

                            if (___ForceToUseDrawingRectangle == false)
                            {
                                if (tagElement.___IsElementBlock == true)
                                {
                                    if (tagElement.___style.___IsCssTopValueDefined == true)
                                    {
                                        tagElement.___offsetTop = ___offsetTopByStyle + ___parentPaddingTop + tagElement.___marginTop;
                                    }
                                    else
                                    {
                                        tagElement.___offsetTop = ___offsetTopByMeasure;

                                    }
                                }
                                if (tagElement.___style.___IsCssLeftValueDefined == true)
                                {
                                    tagElement.___offsetLeft = ___offsetLeftByStyle + ___parentPaddingLeft + floatLeftMargin + ___marginLeft;
                                }
                                else
                                {
                                    tagElement.___offsetLeft = ___offsetLeftByMeasure; ;
                                }
                            }
                            else
                            {
                                if (tagElement.___ElementInlineShifted == false)
                                {
                                    if (tagElement.___style.___IsCssTopValueDefined == true)
                                    {
                                        tagElement.___offsetTop = ___offsetTopByStyle + ___parentPaddingTop + tagElement.___marginTop;
                                    }
                                    else
                                    {
                                        tagElement.___offsetTop = ___offsetTopByMeasure;

                                    }
                                    if (tagElement.___style.___IsCssLeftValueDefined == true)
                                    {
                                        tagElement.___offsetLeft = ___offsetLeftByStyle + ___parentPaddingLeft + floatLeftMargin + ___marginLeft;
                                    }
                                    else
                                    {
                                        tagElement.___offsetLeft = ___offsetLeftByMeasure;
                                    }
                                }
                            }
                        }

                        if (IsPositionSwitchedByFloatOrClear == false && tagElement.___IsElementVisible == true && (___IsBoundsFixedSize == false || tagElement.___style.___styleSizeMode != CHtmlSizeModeType.Both || tagElement.___elementTagType == CHtmlElementType.BODY))
                        {
                            if (tagElement.___IsElementBlock == true && tagElement.___childNodes.Count > 0)
                            {
                                switch (tagElement.___elementTagType)
                                {
                                    case CHtmlElementType.TR:
                                        IsBoundsAdjusted = AdjustCurrentElementBoundsFromChildTagElementTR(tagElement);
                                        break;
                                    case CHtmlElementType.TBODY:
                                    case CHtmlElementType.TH:
                                    case CHtmlElementType.TD:
                                        break;
                                    default:
                                        //IsBoundsAdjusted = AdjustCurrentElementBoundsFromChildTagElement(tagElement);
                                        break;
                                }
                            }
                        }
                    }
                    else
                    {
                        // ===============================================
                        //               Means Invisible
                        // ===============================================
                        tagElement.___offsetWidth = 0;
                        tagElement.___offsetHeight = 0;
                        if (tagElement.___style != null)
                        {
                            //tagElement.___style.Width = "0px";
                            //tagElement.___style.Height = "0px";
                        }

                    }
                    if (tagElement.___IsElementVisible == true && tagElement.___isElementPositionAbsoluteOrStatic == false && tagElement.NodeAlignType != CHtmlElementAlignType.NotSet && tagElement.___IsElementBlock == true && tagElement.___ElementInlineLevel <= 0 && tagElement.___style.___cssFloatType == CSSFloatType.NotSet)
                    {
                        if (tagElement.___IsElementLayoutByInlineBlockWay == true || tagElement.___style.___cssDisplayComputedValueType == CSSDisplayType.Inline || tagElement.___style.___cssDisplayComputedValueType == CSSDisplayType.InlineBlock || tagElement.___style.___cssDisplayComputedValueType == CSSDisplayType.InlineTable || tagElement.___style.___cssDisplayComputedValueType == CSSDisplayType.Flex || tagElement.___style.___cssDisplayComputedValueType == CSSDisplayType.Box || tagElement.___style.___cssDisplayComputedValueType == CSSDisplayType.Compact || tagElement.___style.___cssDisplayComputedValueType == CSSDisplayType.InlineBox)
                        {
                            goto AfterCSSDisplayManualPositionSet;
                        }
                        bool ___IsToLeft = false;
                        bool ___IsToCenter = false;
                        bool ___IsToRight = false;
                        switch (tagElement.NodeAlignType)
                        {
                            case CHtmlElementAlignType.Middle:
                                ___IsToCenter = true;
                                break;
                            case CHtmlElementAlignType.Right:
                                ___IsToRight = true;
                                break;
                            default:
                                break;
                        }
                        if (___IsToLeft == false && ___IsToCenter == false && ___IsToRight == false)
                        {
                            switch (tagElement.NodeInheritedAlignType)
                            {
                                case CHtmlElementAlignType.Middle:
                                    ___IsToCenter = true;
                                    break;
                                case CHtmlElementAlignType.Right:
                                    ___IsToRight = true;
                                    break;
                                case CHtmlElementAlignType.NotSet:
                                    ___IsToLeft = true;
                                    break;
                            }
                        }


                        if (___IsToCenter)
                        {
                            if (___tagElementParent == null || ___parentAllowedWidth - tagElement.___offsetWidth <= 0)
                            {
                                if (___parentAllowedWidth - tagElement.___offsetWidth == 0)
                                {
                                    tagElement.___offsetLeft = 0;
                                }
                                else
                                {
                                    tagElement.___offsetLeft = 0;
                                    //tagElement.offsetLeft = (___DocumentMinSize.Width  - tagElement.offsetWidth) / 2;
                                }
                            }
                            else
                            {
                                if (___parentAllowedWidth - tagElement.___offsetWidth > 500)
                                {
                                    tagElement.___offsetLeft = (___parentAllowedWidth - tagElement.___offsetWidth) / 2 + floatLeftMargin;
                                }
                                else
                                {
                                    tagElement.___offsetLeft = 150;
                                }
                            }
                        }
                        else if (___IsToRight)
                        {
                            if (___tagElementParent == null || ___parentAllowedWidth - tagElement.___offsetWidth <= 0 || ___tagElementParent.___elementTagType == CHtmlElementType.BODY)
                            {
                                tagElement.___offsetLeft = ___DocumentMinSize.Width - tagElement.___offsetWidth + floatLeftMargin;
                            }
                            else
                            {
                                tagElement.___offsetLeft = ___parentAllowedWidth - tagElement.___offsetWidth;
                            }
                            if (tagElement.___offsetLeft < 0)
                            {
                                tagElement.___offsetLeft = 0 + floatLeftMargin;
                            }

                        }
                        else if (___IsToLeft)
                        {

                        }

                        if (tagElement.___offsetLeft < 0)
                        {
                            tagElement.___offsetLeft = 0;
                        }


                    }
                }
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
                    {
                        commonLog.LogEntry("CalculateElementBounds delected exception " + tagElement.ToString(), ex);
                    }
                }
                AfterCSSDisplayManualPositionSet:

				// ======================================================================================================
				// Z-Indexed Element Check
				// ======================================================================================================
				if(tagElement.___IsElementVisible == true && tagElement.___ZIndexedChildElementList != null)
				{
					// ======================================================================================================
					// Z-Indexed Element Child ZIndex Check
					// ======================================================================================================
					if(tagElement.___style.___zIndexValue <= 0)
					{
						int ___ChildZIndexMinimumValue = 999999999;
						int ___ChildZIndexMaxValue = -999999;
						int ___ChildVisibleCount = 0;
						if(tagElement.___ZIndexedChildElementList.Count > 0)
						{
							// It may be z-indexed has assigned all children. We needs Visible count so lookup children.
                            int tagElementChildCount = tagElement.___childNodes.Count;
                            for (int childPos = 0; childPos < tagElementChildCount; childPos++)
                            {
                                CHtmlElement _zChild = tagElement.___childNodes[childPos] as CHtmlElement;

                                if (_zChild != null)
                                {
                                    if (_zChild.___IsElementVisible == false || commonHTML.IsElemeneITextOrIDraw(_zChild) == true)
                                    {
                                        continue;
                                    }
                                    if (_zChild.___style.___zIndexValue > 0)
                                    {
                                        ___ChildZIndexMinimumValue = Math.Min(___ChildZIndexMinimumValue, _zChild.___style.___zIndexValue);
                                        ___ChildZIndexMaxValue = Math.Max(___ChildZIndexMaxValue, _zChild.___style.___zIndexValue);
                                    }
                                    if (_zChild.___IsElementVisible == true)
                                    {
                                        ___ChildVisibleCount++;
                                    }
                                }
                            }
						}
						if(___ChildVisibleCount == tagElement.___ZIndexedChildElementList.Count)
						{
							if(___ChildZIndexMinimumValue > 0)
							{
								if(commonLog.LoggingEnabled && commonLog.CommonLogLevel> 20)
								{
									commonLog.LogEntry("{0} will be assign z-index to {1}", tagElement, ___ChildZIndexMinimumValue);
								}
								tagElement.___style.StyleCommentAdd("Child z-Index has higer value : " + ___ChildZIndexMinimumValue.ToString());
								tagElement.___style.zIndex = ___ChildZIndexMinimumValue.ToString();
								tagElement.___style.___zIndexValue = ___ChildZIndexMinimumValue;
							}
							if(tagElement.___style.___zIndexValue > 0)
							{
                               
                                    if (___tagElementParent != null)
                                    {
                                        if (___tagElementParent.___ZIndexedChildElementList == null)
                                        {
                                            ___tagElementParent.___ZIndexedChildElementList = new System.Collections.Generic.List<CHtmlElement>();
                                        }
                                        ___tagElementParent.___ZIndexedChildElementList.Add(tagElement);
                                    }
                                
							}
						}
					}
					try
					{
						if(tagElement.___ZIndexedChildElementList != null && tagElement.___ZIndexedChildElementList.Count > 1)
						{
							// tagElement.ZIndexChildElementList needs to be sorted by z-index now.
							tagElement.___ZIndexedChildElementList.Sort(new CHtmlElementZIndexComparer());
						}
					}
					catch(Exception ex)
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel> 20)
						{
							commonLog.LogEntry("{0} ZIndexElementSort Failed : {1}", tagElement.ToString(), ex.Message);
						}
					}
				}
                if (tagElement.___style.___cssClearType != CSSElelemntFloatClearType.NotSet)
				{
                    switch (tagElement.___style.___cssClearType)
					{
                        case CSSElelemntFloatClearType.Right:
                            if (___tagElementParent.___cssFloatRightElementList.Count > 0)
                            {
                                ___tagElementParent.___cssFloatRightDoneList.AddRange(___tagElementParent.___cssFloatRightElementList as ICollection);
                                ___tagElementParent.___cssFloatRightElementList.Clear();
                            }
							break;
                        case CSSElelemntFloatClearType.Left:
                            if (___tagElementParent.___cssFloatLeftElementList.Count > 0)
                            {
                                ___tagElementParent.___cssFloatLeftDoneList.AddRange(___tagElementParent.___cssFloatLeftElementList as ICollection);
                                ___tagElementParent.___cssFloatLeftElementList.Clear();
                            }
							break;
                        case CSSElelemntFloatClearType.Both:
							//tagElement.FloatMiddleDocumentIndexList.Clear();
                            if (___tagElementParent.___cssFloatRightElementList.Count > 0)
                            {
                                ___tagElementParent.___cssFloatRightDoneList.AddRange(___tagElementParent.___cssFloatRightElementList as ICollection);
                                ___tagElementParent.___cssFloatRightElementList.Clear();
                            }
                            if (___tagElementParent.___cssFloatLeftElementList.Count > 0)
                            {
                                ___tagElementParent.___cssFloatLeftDoneList.AddRange(___tagElementParent.___cssFloatLeftElementList as ICollection);
                                ___tagElementParent.___cssFloatLeftElementList.Clear();
                            }
							___tagElementParent.___cssFloatTopPostionList.Add((int)GetBottomBoundsOfElement(tagElement, ___tagElementParent));
							

							
							break;
					}
				}

				
				switch(tagElement.___elementTagType)
				{
					case CHtmlElementType.BR:
						if(tagElement.___offsetHeight > 22)
						{
							tagElement.___offsetHeight = 22;
							
						}
						if(tagElement.___ChildNodeIndex > 0 && tagElement.___offsetTop == 0)
						{
							this.___confirmElementOffsetTopIsCorrentPosition(tagElement,___tagElementParent);
						}
						break;
					case CHtmlElementType.HR:
						if(tagElement.___IsElementVisible)
						{
							if(tagElement.___offsetWidth <= 0)
							{
								tagElement.___offsetWidth = tagElement.___availWidth;
							}
							if(tagElement.___offsetWidth <= 0)
							{
								tagElement.___offsetWidth = 10;
							}
							if(tagElement.___offsetHeight <= 0)
							{
								tagElement.___offsetHeight = 16;
							}
						}
						break;
					case CHtmlElementType.HTML:
					{
						if(object.ReferenceEquals(tagElement,this.___documentElement) == true)
						{
							if(tagElement.___IsElementVisible == false)
							{
								tagElement.___IsElementVisible = true;
							}
							if(tagElement.___offsetTop != 0)
							{
								tagElement.___offsetTop = 0;
								tagElement.X_DOM_ProcessorAdd("HTML Node should be offsetTop 0");
							}

						}
					}
						break;
				}
				// Make sure all visible items has at least one drawing items
				/*
				if(tagElement.___IsElementVisible == true && tagElement.children.Count == 0 && tagElement.DrawingElements.Count == 0)
				{
					___CreateDrawingElementsAfterwords(tagElement);
				}
				*/
				// set IsElementContainsBlockElement to be true if the node parent is 
				if(tagElement.___isElementPositionAbsoluteOrStatic == false && tagElement.___IsElementVisible == true )
				
				{
					if(tagElement.___IsElementBlock == true || tagElement.___elementTagType == CHtmlElementType.P)
					{
						if(tagElement.___elementTagType != CHtmlElementType.BR && tagElement.___elementTagType != CHtmlElementType.IMG)
						{
							if( ___tagElementParent != null)
							{
								if( ___tagElementParent.___IsElementContainsBlockElement == false)
								{
									___tagElementParent.___IsElementContainsBlockElement = true;
								}
							}
						}
					}
				}
                // ===============================================================
                // [Undefined Block Sizing] 
                //  if undefind width block
                // +-------------------------------------------------------------+
                // | [Avaliable Size Block]                                              |
                // |                                                                              |
                // |                                                                              |
                // +-------------------------------------------------------------+
                // ===============================================================
                if (tagElement.___IsElementVisible == true)
                {
                    switch (tagElement.___elementTagType)
                    {
                        // Due to performance reasons only block element will be cheked
                        case CHtmlElementType.DIV:
                        case CHtmlElementType.NAV:
                        case CHtmlElementType.MENU:
                            if (tagElement.___BoundsCalucByDrawElementsCount == 0 && tagElement.___ElementInlineLevel == 0 && tagElement.___ElementInlineShifted == false && tagElement.___style.___cssDisplayComputedValueType == CSSDisplayType.Block)
                            {
                                if (tagElement.___BoundsCalucByHTMLElementsCount == 1 && tagElement.___BoundsCalucWithChildDrawElementsTotalCount <= 2)
                                {
                                    if (tagElement.___style.___cssFloatType == CSSFloatType.NotSet && IsPositionSwitchedByFloatOrClear == false)
                                    {
                                        if (tagElement.___style.___styleSizeMode == CHtmlSizeModeType.Undefined || tagElement.___style.___styleSizeMode == CHtmlSizeModeType.Height)
                                        {
                                            if (tagElement.___availWidth >= tagElement.___offsetWidth)
                                            {
                                                if (tagElement.___style.___cssClearType == CSSElelemntFloatClearType.NotSet)
                                                {
                                                    if (___tagElementParent != null && ( ___tagElementParent.___style.___styleSizeMode == CHtmlSizeModeType.Width || ___tagElementParent.___style.___styleSizeMode == CHtmlSizeModeType.Both))
                                                    {
                                                        if (___tagElementParent.___elementTagType != CHtmlElementType.BODY)
                                                        {
                                                            if (___offsetWidthByMeasure < ___tagElementParent.___availWidth)
                                                            {
                                                                tagElement.___style.StyleCommentAdd("offsetWidth is adjusted from " + tagElement.___offsetWidth.ToString() + " at calucauteElement Bounds.");
                                                                tagElement.___offsetWidth = ___tagElementParent.___availWidth;
                                                               
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                    }
                }
				// ============================================================================================================
				// IsInlineElementLayout Flag Test
				// If the element contains any block element, the element will layouted as block element
				// ============================================================================================================
				/*
				if(tagElement!= CHtmlElementType != CHtmlElementType._ITEXT &&  tagElement.___IsElementVisible == true && tagElement.___IsElementBlock == true && ___tagElementParent != null)
				{
					if(tagElement.___elementTagType != CHtmlElementType._ITEXT && tagElement.___elementTagType != CHtmlElementType.COMMENT)
					{
						if(___tagElementParent != null && ___tagElementParent.___ElementInlineShifted == true)
						{
							if(___tagElementParent.___elementTagType != CHtmlElementType._ITEXT)
							{
								___tagElementParent.___ElementInlineShifted = false;
							}
						}
					}
				}
				*/
				// ============================================================================================================
				// If all child element is inlined more than level 2, the node itself is flaged as inlined element.
				// 
				// ============================================================================================================
				/*
				if(	tagElement.___ElementInlineShifted = false && tagElement.___IsElementBlock == false && tagElement.___ElementChildMinInlineLevel >= 2 && tagElement.___IsElementContainsBlockElement == false)
				{
					tagElement.___ElementInlineLevel = tagElement.___ElementChildMinInlineLevel;
					tagElement.___ElementInlineShifted = true;
				}
				*/
               // FinalCheckByTagType:

                if (tagElement.___elementTagType == CHtmlElementType.FRAME || tagElement.___elementTagType == CHtmlElementType.IFRAME)
                {
                    if (this.___IsMultiversalDocument == true)
                    {
                        if ( tagElement.___iframeMultiversalWindow != null)
                        {
                            if (tagElement.___iframeMultiversalWindow.___WindowLevel <= 1)
                            {

                                tagElement.___iframeMultiversalWindow.___WindowLevel = this.___MultiversalWindow.___WindowLevel + 1;
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                {
                                    commonLog.LogEntry("Strange iframe WindowLevel is still less than 1 . Resetting to {0}", tagElement.___iframeMultiversalWindow.___WindowLevel);
                                }
                            }
                            if (tagElement.___iframeMultiversalWindow.___NavigateMethodCallCount == 0)
                            {
                                if (tagElement.___attributes.ContainsKey("srcdoc") == true)
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                    {
                                        commonLog.LogEntry("TODO : {0} has srcdoc to navigate. just skip", tagElement);
                                    }
                                    goto FrameNagigateCheckDone;
                                }
                                if (tagElement.___srcBase != null && tagElement.___srcBase.___IsProtocolTypeHTTPorHTTPS() == true)
                                {
                                    if (string.Equals(tagElement.___srcBase.href, this.___URL, StringComparison.OrdinalIgnoreCase) == false)
                                    {
                                        CHtmlMultiversalWindow.MultiversalWindowNavigateDelegate2 deleNavigateIframe = new CHtmlMultiversalWindow.MultiversalWindowNavigateDelegate2(tagElement.___iframeMultiversalWindow.___navigateUrl);
                                        deleNavigateIframe.BeginInvoke(tagElement.___srcBase.href, this.___URL, null, null);
                                    }
                                    goto FrameNagigateCheckDone;
                                }
                            }
                        }
                    }
                }
                else if (tagElement.___isSvgElement == true)
                {
                    if (tagElement.___elementTagType == CHtmlElementType.SVG)
                    {
                        // SVG Element
                    }
                    else
                    {
                        // SVG Child Element
                    }
                }

                FrameNagigateCheckDone:
                if (tagElement.___elementTagType != CHtmlElementType.NOSCRIPT)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 8)
                    {
                        if (tagElement.___IsElementFloat == false && tagElement.___isElementPositionAbsoluteOrStatic == false && tagElement.___ElementInlineShifted == false && tagElement.___ChildNodeIndex > 0 && tagElement.___IsElementBlock == true)
                        {
                            if (___offsetTopByMeasure > 0)
                            {
                                if (tagElement.___offsetTop == 0)
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 8)
                                    {
                                        commonLog.LogEntry("Strange. {0} has offsetTop = 0 but, offsetTopByMeasure is {1}", tagElement, ___offsetTopByMeasure);
                                    }
                                    //tagElement.offsetTop = ___offsetTopByMeasure;
                                }
                            }
                        }
                    }
                }

                if (tagElement.___elementTagType != CHtmlElementType._ELEMENT_AFTER && tagElement.___elementTagType != CHtmlElementType._ELEMENT_BEFORE)
                {
                    if (tagElement.___ElementAfter != null && tagElement.___ElementAfter.___elementTagType == CHtmlElementType._ELEMENT_AFTER)
                    {
                        if (tagElement.___ElementAfter.___IsElementBeforeAfterAddRequied == true)
                        {
                            CHtmlElement elementAfterParent = tagElement.___ElementAfter.___parent as CHtmlElement;
                            if (elementAfterParent != null)
                            {
                                tagElement.___ElementAfter.___ChildNodeIndex = elementAfterParent.___childNodes.Add(tagElement.___ElementAfter);
                            }
                            tagElement.___ElementAfter.___IsElementBeforeAfterAddRequied = false;
                        }
                        if (tagElement.___ElementAfter.___isCalculateElementBoundsCalled == false)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
                            {
                                commonLog.LogEntry("calc for :after :{0} origin: {1}", tagElement.___ElementAfter, tagElement);
                            }
                            this.___calculateElementBounds(tagElement.___ElementAfter);
                        }
                    }
                }
			} 
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
				{
					commonLog.LogEntry("CaluculaateElementBoundsForCHTmlElement", ex);
				}
				
			}
            tagElement.___isCalculateElementBoundsCalled = true;
            tagElement.___IsElementofffsetParentPointCaluculationRequired = true;
			
		}
        #endregion
		
		private void CreateDrawingElementsWithTagElementBounds(CHtmlElement tagElement)
		{
			if(tagElement.___drawingObjectList != null && tagElement.___drawingObjectList.Count > 0)
				return;
			CHtmlDrawingObject drawElement = new CHtmlDrawingObject();
           
            drawElement.___parentWeakReference = new WeakReference(tagElement, false);

			
            drawElement.offsetBounds.X = (float)tagElement.___offsetLeft;
            drawElement.offsetBounds.Height = (float)tagElement.___offsetHeight;
            drawElement.offsetBounds.Y  = (float)tagElement.___offsetTop;
            drawElement.offsetBounds.Width = (float)tagElement.___offsetWidth;
			tagElement.___drawingObjectList.Add(drawElement);

		}
		
		private double GetBottomBoundsOfElement(CHtmlElement __checkElement, CHtmlElement  __parentNode)
		{
			if(__parentNode == null)
			{
				return 0;
			}
			RectangleF __AllBounds = RectangleF.Empty;
            int _parentChildCount = __parentNode.___childNodes.Count;
            for (int i = 0; i < _parentChildCount; i++)
			{
				CHtmlElement elem = __parentNode.___childNodes[i] as CHtmlElement;
				if(elem != null)
				{

					if(elem.___IsElementFloat == true && elem.___IsElementVisible == false)
						continue;
					else
					{
						if(elem.___offsetLeft < -500)
							continue;
						if(__AllBounds == RectangleF.Empty)
						{
							__AllBounds = elem.offsetBounds;
						}
						else
						{
							__AllBounds = RectangleF.Union(__AllBounds, elem.offsetBounds);
						}
					}
					if(object.ReferenceEquals(elem, __checkElement) == true)
					{
						break;
					}
				}
			}
			return __AllBounds.Top + __AllBounds.Height + 5;
		}
		
		private void ___confirmElementOffsetTopIsCorrentPosition(CHtmlElement __checkElement, CHtmlElement  __parentNode)
		{
			if(__checkElement == null || __parentNode == null)
			{
				return;
			}
			RectangleF __AllBounds = RectangleF.Empty;
            int __childCount = __parentNode.___childNodes.Count;
            int __checkElementPosition = __checkElement.___ChildNodeIndex;
            if (__checkElementPosition == -1)
            {
                __checkElementPosition = __parentNode.___childNodes.Count;
            }
            int ___ContainsSequentalCount = 0;
            for (int i = __checkElementPosition -1 ; i >= 0; i--)
			{
				CHtmlElement elem = __parentNode.___childNodes[i] as CHtmlElement;
				if(elem != null)
				{
					if(object.ReferenceEquals(elem, __checkElement) == true)
					{
						break;
					}
					if(elem.___IsElementFloat == true || elem.___IsElementVisible == false)
						continue;
                    else if (elem.___isElementPositionAbsoluteOrStatic == true)
                    {
                        continue;
                    }
                    else
                    {
                        if (elem.___offsetLeft < -100 || elem.___offsetTop < -100)
                            continue;
                        if (__AllBounds == RectangleF.Empty)
                        {
                            __AllBounds = new RectangleF(0, 0, elem.offsetBounds.Width, elem.offsetBounds.Height);
                        }
                        else
                        {
                            if (__AllBounds.Contains(elem.offsetBounds))
                            {
                                if (___ContainsSequentalCount > 20)
                                {
                                    break;
                                }
                                ___ContainsSequentalCount++;
                            }
                            else
                            {
                                ___ContainsSequentalCount = 0;
                            }
                            __AllBounds = RectangleF.Union(__AllBounds, elem.offsetBounds);
                        }
                    }

				}
			}
			if(commonHTML.IsElemeneITextOrIDraw(__checkElement) == false && __checkElement.___IsElementVisible == true)
			{
				if(__checkElement.___offsetTop < __AllBounds.Height)
				{
					double originalTop = __checkElement.___offsetTop;
					__checkElement.___offsetTop = __AllBounds.Height;
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 15)
					{
						commonLog.LogEntry("{0} is offset seems invalid {1} reset  to {2} All : {3}", __checkElement,originalTop , __checkElement.___offsetTop, __AllBounds);
					}
				}
            }
            else if (__checkElement.___elementTagType == CHtmlElementType._ITEXT)
            {
                if (__checkElement.___offsetTop < __AllBounds.Height)
                {
                    double originalTop = __checkElement.___offsetTop;
                    __checkElement.___offsetTop = __AllBounds.Height;
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 15)
                    {
                        commonLog.LogEntry("{0} is offset seems invalid {1} reset  to {2} All : {3}", __checkElement, originalTop, __checkElement.___offsetTop, __AllBounds);
                    }
                }
            }
		}
        private double ___getElementBottomFromArrayList(ArrayList ___arrayList)
        {
            double ___resultPoint = 0;
            for (int pos = ___arrayList.Count - 1; pos >= 0; pos--)
            {
                CHtmlElement elem = ___arrayList[pos] as CHtmlElement;
                if (elem != null)
                {
                    if (elem.___IsSystemHidden == true)
                    {
                        continue;
                    }
                    if (elem.___IsElementVisible == false)
                    {
                        continue;
                    }
                    ___resultPoint = elem.offsetTop + elem.offsetHeight;
                    break;
                }
            }
            return ___resultPoint;
        }
		private double ___getPreviousFontHeight(CHtmlElement tagElement)
		{

			return 10F;
		}
		private void ___CreateDrawingElementsAfterwords(CHtmlElement ___tagElement)
		{
			if(___tagElement == null)
				return;
			if(___tagElement.___drawingObjectList.Count > 0)
				return;
			CHtmlDrawingObject _drawElement = new CHtmlDrawingObject();
          
            _drawElement.___parentWeakReference = new WeakReference(___tagElement, false);

			_drawElement.offsetBounds.Width = (float)___tagElement.___offsetWidth;
			_drawElement.offsetBounds.Height  = (float)___tagElement.___offsetHeight;
			___tagElement.___drawingObjectList.Add(_drawElement);
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				commonLog.LogEntry("___CreateDrawingElementsAfterwords {0}", ___tagElement);
			}
		}

		private bool AdjustCurrentElementBoundsFromChildTagElementTR(CHtmlElement currentElement)
		{
			double ___TRMaxHeight = 0;
			double ___TRCurrentHeight = currentElement.___offsetHeight;
			for(int i = currentElement.___childNodes.Count -1; i >= 0 ; i--)
			{
				CHtmlElement childElement = currentElement.___childNodes[i] as CHtmlElement;
				if(childElement.___offsetHeight >  ___TRMaxHeight)
				{
					___TRMaxHeight = childElement.___offsetHeight;
				}

			}
			if(___TRCurrentHeight != ___TRMaxHeight)
			{
				currentElement.___offsetHeight = ___TRMaxHeight;
				return true;
			}
			return false;
		}


		private bool AdjustCurrentElementBoundsFromChildTagElement(CHtmlElement currentElement)
		{
			int checkLowerLimit = 0;
			if(currentElement.___childNodes.Count > 10)
			{
				checkLowerLimit = currentElement.___childNodes.Count / 3 * 2;
			}
			bool ___IsAdjusted = false;
			for(int i = currentElement.___childNodes.Count -1; i >= checkLowerLimit; i--)
			{
				CHtmlElement childElement = currentElement.___childNodes[i] as CHtmlElement;
				if(childElement.___IsElementVisible == false || childElement.___IsRenderedByParent == true)
					continue;
				if( childElement != null)
				{
					if(currentElement.___offsetHeight < childElement.___offsetTop + childElement.___offsetHeight)
					{
						___IsAdjusted  = true;
						currentElement.___offsetHeight = childElement.___offsetTop + childElement.___offsetHeight;
					}
					if(currentElement.___offsetWidth < childElement.___offsetLeft + childElement.___offsetWidth)
					{
						currentElement.___offsetWidth  = childElement.___offsetLeft + childElement.___offsetWidth;
						___IsAdjusted  = true;
					}
				}
			}
			return ___IsAdjusted;
		}

		

		public CHtmlRectangle GetStyleFloatClearRectangle(CHtmlElement parentElement, CHtmlElement currentElement, string floatString,double ElementWidth, double PriorElementTop)
		{
			RectangleF rectClear = new RectangleF(0,0, (float)ElementWidth, (float)PriorElementTop);
			switch( floatString)
			{
				case "left":
				case "both":
				case "all":
				case "center":
                    int ___leftCount = parentElement.___cssFloatLeftElementList.Count;
                    for (int i = 0; i < ___leftCount; i++)
                    {
                        CHtmlElement ___leftElement = parentElement.___cssFloatLeftElementList[i] as CHtmlElement;
						rectClear = RectangleF.Union(rectClear, ___leftElement.offsetBounds);

					}
					break;
			}
			switch(floatString)
			{
				case "right":
				case "both":
				case "all":
				case "center":
                    int ___rightCount = parentElement.___cssFloatRightElementList.Count;
					for(int i = 0; i < ___rightCount; i ++)
					{
                        CHtmlElement ___rightElement = parentElement.___cssFloatRightElementList[i] as CHtmlElement;
						rectClear = RectangleF.Union(rectClear, ___rightElement.offsetBounds);

					}
					break;
			}
			CHtmlRectangle resultRect = new CHtmlRectangle();
			resultRect.X =  rectClear.X;
			resultRect.Y =  rectClear.Y;
			resultRect.Width = rectClear.Width;
			resultRect.Height = rectClear.Height;
			return resultRect;
		}
		public  CHtmlRectangle  GetStyleFloatBeginEndOffsetRectangle(CHtmlElement parentElement, CHtmlElement currentElement, string floatString, bool IsEndingPoint)
		{
			CHtmlRectangle __floatRectangle = new CHtmlRectangle();

			if(parentElement == null)
				return __floatRectangle;


			double __offsetLeftMinTop   = 9999999;
			double __offsetLeftMaxHeight   = 0;
			double __offsetRightMinTop  = 9999999;
			double __offsetRightMaxHeight  = 0;
			double __offsetCenterMinTop = 9999999;
			double __offsetCenterMaxHeight = 0;
			double __CurrentLeftFloatWidthMax   = 0;
			double __CurrentRightFloatWidthMax  = 0;
			double __CurrentMiddleFloatWidthMax = 0;
			double __CurrentLeftFloatWidthTotal   = 0;
			double __CurrentRightFloatWidthTotal  = 0;
			double __CurrentMiddleFloatWidthTotal = 0;
			PointF __LeftFloatCellPoint    = PointF.Empty;
			PointF __RightFloatCellPoint   = PointF.Empty;
			double __StyleRightMargin = 0;
			double __StyleLeftMargin = 0;
			double __parentMaxWidth = 0;
			double __parentMaxHeight = 0;
			double __parentFloatTop = 0;
			if(parentElement != null)
			{
				__parentFloatTop  = parentElement.___cssFloatTopPostionList.Max;
			}
			__parentMaxWidth = parentElement.___availWidth;
			__parentMaxHeight = parentElement.___availHeight;



			if(currentElement.___style.___MarginRightComputedValue  > 0)
			{
                double _criteria = parentElement.___availWidth;
				if(_criteria < 1)
				{
					_criteria = 1000;
				}
				if(commonHTML.IsStringAutoOrInheritOrZero(currentElement.___style.MarginRight) == true)
				{
					__StyleRightMargin = 0;
					currentElement.___style.MarginRight = "";
				}
				else
				{
                    if (currentElement.offsetWidth + currentElement.___style.___MarginRightComputedValue + currentElement.___style.___MarginLeftComputedValue > parentElement.___availWidth)
                    {
                        __StyleRightMargin = 0;
                    }
                    else
                    {
                        __StyleRightMargin = currentElement.___style.___MarginRightComputedValue;
                    }
                    
				}

			}
			if(currentElement.___style.___MarginLeftComputedValue >  0)
			{
                double _criteria = parentElement.___availWidth;
				if(_criteria < 1)
				{
					_criteria = 1000;
				}
				if(commonHTML.IsStringAutoOrInheritOrZero(currentElement.___style.MarginLeft) == true)
				{
					currentElement.___style.MarginLeft = "";
					__StyleLeftMargin = 0;

				}
				else
				{
                    if (currentElement.offsetWidth + currentElement.___style.___MarginRightComputedValue + currentElement.___style.___MarginLeftComputedValue > parentElement.___availWidth)
                    {
                        __StyleRightMargin = 0;
                    }
                    else
                    {
                        __StyleLeftMargin = currentElement.___style.___MarginLeftComputedValue;
                    }
				}

			}
			// ===============================================================================
			// ���̏����ł́A�}���O�̌��݂̃��X�g�̑S�̂̈ʒu��\������
			// ���ɁA�e�̕��ɍ��킹�āA�݂͂����Ȃ��悤�Ɉʒu��\���K�v������B
			// ================================================================================
            int __leftCount = parentElement.___cssFloatLeftElementList.Count;
			for(int i = 0; i < __leftCount ; i ++)
			{
				CHtmlElement ___leftElement = parentElement.___cssFloatLeftElementList[i] as CHtmlElement;
				if(___leftElement != null)
				{
					if(___leftElement.___IsElementVisible == false)
					{
						continue;
					}
					if (__offsetLeftMinTop > ___leftElement.___offsetTop)
					{
						__offsetLeftMinTop =  ___leftElement.___offsetTop;
					}
					if(__parentMaxWidth >= __LeftFloatCellPoint.X + ___leftElement.___offsetWidth)
					{
						__CurrentLeftFloatWidthTotal += ___leftElement.___offsetWidth;
                        __LeftFloatCellPoint.X += (float)___leftElement.___offsetWidth;
						if(IsEndingPoint)
						{
							if(i ==  parentElement.___cssFloatLeftElementList.Count -1)
							{
								__offsetLeftMaxHeight +=___leftElement.___offsetHeight;
							}
						}
					}
					else
					{
						__offsetLeftMaxHeight +=___leftElement.___offsetHeight;
						__LeftFloatCellPoint.X = 0;
                        __LeftFloatCellPoint.Y += (float)___leftElement.___offsetHeight;
					}
					if(__CurrentLeftFloatWidthMax < ___leftElement.___offsetWidth)
					{
						__CurrentLeftFloatWidthMax  = ___leftElement.___offsetWidth;
					}
				}
			}
            int __rightCount = parentElement.___cssFloatRightElementList.Count;
            for (int i = 0; i < __rightCount ; i++)
			{
				CHtmlElement ___rightElement = parentElement.___cssFloatRightElementList[i] as CHtmlElement;
				if(___rightElement  != null)
				{
					if( ___rightElement.___IsElementVisible == false)
					{
						continue;
					}
					if(__parentMaxWidth >= __RightFloatCellPoint.X + ___rightElement.___offsetWidth)
					{
						__CurrentRightFloatWidthTotal += ___rightElement.___offsetWidth;
                        __RightFloatCellPoint.X += (float)___rightElement.___offsetWidth;
						if(IsEndingPoint)
						{
							if(i ==  parentElement.___cssFloatRightElementList.Count -1)
							{
								__offsetRightMaxHeight += ___rightElement.___offsetHeight;
							}

						}
					}
					else
					{
						__offsetRightMaxHeight +=___rightElement.___offsetHeight;
						__RightFloatCellPoint.X = 0;
                        __RightFloatCellPoint.Y += (float)___rightElement.___offsetHeight;
					}
					if(__CurrentRightFloatWidthMax < ___rightElement.___offsetWidth)
					{
						__CurrentRightFloatWidthMax  = ___rightElement.___offsetWidth;
					}
				}
			}



			if(__offsetCenterMinTop == 9999999)
			{
				__offsetCenterMinTop = 0;
			}
			if(__offsetLeftMinTop   == 9999999)
			{
				__offsetLeftMinTop = 0;
			}
			if(__offsetRightMinTop  == 9999999)
			{
				__offsetRightMinTop = 0;
			}
			if(parentElement.___cssFloatLeftElementList.Count == 0 && parentElement.___cssFloatRightElementList.Count == 0)
			{
				int __currentElementIndexInParent = -1;
				__currentElementIndexInParent = parentElement.___childNodes.IndexOf(currentElement);
                if (__currentElementIndexInParent == -1)
                {
                    __currentElementIndexInParent = parentElement.___childNodes.Count - 1;

                }
            
                for (int prev = __currentElementIndexInParent -1; prev >= 0 ; prev--)
				{
                    CHtmlElement ___targetElement = parentElement.___childNodes[prev] as CHtmlElement;
                    if (___targetElement.___IsElementVisible && ___targetElement.___isElementPositionAbsoluteOrStatic == false)
					{
						__offsetLeftMinTop = ___targetElement.___offsetHeight +___targetElement.___offsetTop;
						__offsetRightMinTop = __offsetLeftMinTop;
						__offsetCenterMinTop = __offsetLeftMinTop;
						if(__offsetLeftMaxHeight == 0)
						{
							__offsetLeftMaxHeight = __offsetLeftMinTop;
						}
						if(__offsetRightMaxHeight == 0)
						{
							__offsetRightMaxHeight = __offsetLeftMinTop;
						}
						if(__offsetCenterMaxHeight == 0)
						{
							__offsetCenterMaxHeight = __offsetLeftMinTop;
						}
						break;
					}
				}
			}

			switch(floatString)
			{
				case "right":
					if(IsEndingPoint)
					{
						double rMax = Math.Max(__offsetRightMaxHeight, __offsetCenterMaxHeight);
						__floatRectangle.X = __CurrentLeftFloatWidthMax + __CurrentMiddleFloatWidthMax;
						__floatRectangle.Height =  rMax;
					}
					else
					{
						__offsetRightMinTop = Math.Max(__offsetLeftMinTop, __offsetRightMinTop);
						__floatRectangle.X   =  __parentMaxWidth -  currentElement.___offsetWidth;
						__floatRectangle.Y = __RightFloatCellPoint.Y + __parentFloatTop;
						__floatRectangle.Height = __floatRectangle.Y;
					}
					break;
				case "left":
					if(IsEndingPoint)
					{
						double lMax = Math.Max(__offsetLeftMaxHeight, __offsetCenterMaxHeight);
						__floatRectangle.X = 0 + __StyleLeftMargin + __CurrentLeftFloatWidthTotal;
						__floatRectangle.Height  = lMax;
					}
					else
					{
						__offsetLeftMinTop = Math.Max(__offsetLeftMinTop, __offsetRightMinTop);
						if(__parentMaxWidth >= __LeftFloatCellPoint.X + currentElement.___offsetWidth)
						{
							__floatRectangle.X   = __LeftFloatCellPoint.X;
							__floatRectangle.Y = __LeftFloatCellPoint.Y + __parentFloatTop ;
							__floatRectangle.Height = __floatRectangle.Y;
						}
						else
						{
							__floatRectangle.X   = 0;
							// This is bad code currentElement.offsetHeight may result in bad position
							//__floatRectangle.Y = __LeftFloatCellPoint.Y + currentElement.offsetHeight +__parentFloatTop  ;
							__floatRectangle.Y = __LeftFloatCellPoint.Y + __parentFloatTop  ;
							__floatRectangle.Height = __floatRectangle.Y;
						}
						
						
					}
					break;
				case "center":
					if(IsEndingPoint)
					{
						double lMax = Math.Max(__offsetLeftMaxHeight, __offsetCenterMaxHeight);
						double rMax = Math.Max(__offsetRightMaxHeight, __offsetCenterMaxHeight);
						double cMax = Math.Max(lMax, rMax);
						__floatRectangle.X = 0  + __StyleLeftMargin;
						__floatRectangle.Height = __CurrentMiddleFloatWidthTotal;
						__floatRectangle.Height =  cMax;
						if(__StyleRightMargin>0)
						{
							__floatRectangle.Width = __parentMaxWidth;
						}
						else
						{
							__floatRectangle.Width = __parentMaxWidth - __StyleRightMargin;
						}
					}
					else
					{
						double lMin = Math.Max(__offsetLeftMinTop, __offsetCenterMinTop);
						double rMin = Math.Max(__offsetRightMinTop, __offsetCenterMinTop);
						double cMin = Math.Max(lMin, rMin);
						double lMax = Math.Max(__offsetLeftMaxHeight, __offsetCenterMaxHeight);
						double rMax = Math.Max(__offsetRightMaxHeight, __offsetCenterMaxHeight);
						double cMax = Math.Max(lMax, rMax);
						__floatRectangle.X = 0 + __StyleLeftMargin;
						__floatRectangle.Y =  Math.Max(cMin, __parentFloatTop) ;
						__floatRectangle.Height =  cMax;
						__floatRectangle.Height = __offsetCenterMaxHeight;
						__floatRectangle.Width = __parentMaxWidth - (__CurrentRightFloatWidthMax + __CurrentLeftFloatWidthMax);
					}
					break;
				default:
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
					{
						commonLog.LogEntry("GetStyleFloatBeginEndOffsetPoint illegular");
					}
					break;
			}
			return __floatRectangle;
		}


	

        #region GetMaxSizeFFromChildrenOffsetBounds
		private SizeF GetMaxSizeFFromChildrenOffsetBounds(CHtmlElement tagElement)
		{
			RectangleF rectMeasure = RectangleF.Empty;
            int __childCount = tagElement.___childNodes.Count;
            for (int i = 0; i < __childCount; i++)
			{
				CHtmlElement childElement = tagElement.___childNodes[i] as CHtmlElement;
				if(childElement.___IsElementVisible == false)
				{
					continue;
				}
				if(childElement.offsetBounds.X >= 0 && childElement.offsetBounds.Y >= 0
					&& childElement.offsetBounds.Width  >= 0 &&  childElement.offsetBounds.Height >= 0)
				{
					rectMeasure = RectangleF.Union(rectMeasure, childElement.offsetBounds);
				}
			}
            if (tagElement.___style.___styleSizeMode == CHtmlSizeModeType.Width || tagElement.___style.___styleSizeMode == CHtmlSizeModeType.Both)
			{
                return new System.Drawing.SizeF((float)tagElement.___offsetWidth, (float)rectMeasure.Height);
			}
			return new System.Drawing.SizeF(rectMeasure.Width, rectMeasure.Height);
		}
        #endregion

		private string GetStyleValue(ref CHtmlElement element, string styleName)
		{
			int ___stylesheetsForNextNodeListCount = element.___stylesheetsForNextNodeList.Count;
			for(int i = 0; i < ___stylesheetsForNextNodeListCount; i ++)
			{
				CHtmlCSSRule sPart = element.___stylesheetsForNextNodeList[i];
				if(sPart != null)
				{
					if(sPart.___isCSSRuleForThisNode == true)
					{
						CHtmlStyleAttribute? stValue = sPart.___getStyleElemenetAttributeClassByName(styleName);
						if(stValue != null)
						{
                            CHtmlStyleAttribute attr = (CHtmlStyleAttribute)stValue;
							return attr.value;
						}
					}
				}
			}
			return "";
		}

        #region ___processElementStyleMultipleImageDataImage(string data, string mode)
        internal void ___processElementStyleMultipleImageDataImage(CHtmlCSSStyleSheet ___style ,  CHtmlElement htmlElement)
        {
            try
            {
            	int ___multipleBackgroundImageDataSetCount = ___style.___multipleBackgroundImageDataSet.Count;

                for (int i = 0; i < ___multipleBackgroundImageDataSetCount; i++)
                {
                    CHtmlStyleElementMultpleImageData ___multiData = ___style.___multipleBackgroundImageDataSet[i];
                    if (___multiData == null)
                    {
                        continue;
                    }
                    if (string.IsNullOrEmpty(___multiData.background_image_fullUrl) == true && string.IsNullOrEmpty(___multiData.background_image_origin) == false)
                    {
                        if (commonHTML.IsStringUrlCSSString(___multiData.background_image_origin) == true)
                        {
                            ___multiData.background_image_fullUrl = commonHTML.GetProperImageString(___multiData.background_image_origin, ___style, null, ___style.___ImageUrlHint);
                        }
                    }
                    if (string.IsNullOrEmpty(___multiData.liststyle_image_fullUrl) == true && string.IsNullOrEmpty(___multiData.liststyle_image_origin) == false)
                    {
                        if (commonHTML.IsStringUrlCSSString(___multiData.liststyle_image_origin) == true)
                        {
                            ___multiData.liststyle_image_fullUrl = commonHTML.GetProperImageString(___multiData.liststyle_image_origin , ___style, null, ___style.___ImageUrlHint);
                        }
                    }
                    if (string.IsNullOrEmpty(___multiData.background_image_fullUrl) == false)
                    {
                        if (___multiData.background_image_fullUrl.StartsWith("data:", StringComparison.Ordinal) == false)
                        {
                            this.___downloadviaQueue(___multiData.background_image_fullUrl, "Image", null, null, this.___URL, null, CHtmlThreadPoolQueueObjectType.UrlImage, ___multiData.background_image_fullUrl, htmlElement, 0, CHtmlUrlSourceType.BackgroundImage_of_DefaultStyle, false);
                        }
                        else
                        {
                            // TODO: html conversion
                            System.Drawing.Image __dataImage = null;
                            if (this.___images.TryGetValue(___multiData.background_image_fullUrl, out __dataImage) == false)
                            {
                                ___createDataImageForMultiDataImage(___multiData, false);
                            }
                            else 
                            {
                                
                            }
                        }
                    }
                    if (string.IsNullOrEmpty(___multiData.liststyle_image_fullUrl) == false)
                    {
                        if (___multiData.liststyle_image_fullUrl.StartsWith("data:", StringComparison.Ordinal) == false)
                        {
                            this.___downloadviaQueue(___multiData.liststyle_image_fullUrl, "Image", null, null, this.___URL, null, CHtmlThreadPoolQueueObjectType.UrlImage, ___multiData.liststyle_image_fullUrl, htmlElement, 0, CHtmlUrlSourceType.ListStyleImage_of_DefaultStyle, false);
                        }
                        {
                            // TODO: html conversion
                            System.Drawing.Image __dataImage = null;
                            if (this.___images.TryGetValue(___multiData.liststyle_image_fullUrl, out __dataImage) == false)
                            {
                                ___createDataImageForMultiDataImage(___multiData, true);
                            }
                            else
                            {
                              
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("___processElementStyleMultipleImageDataImage Error", ex);
                }
            }
        
        }
        
                    
                
        #endregion

        private void ___createDataImageForMultiDataImage(CHtmlStyleElementMultpleImageData ___multiData, bool __isListImage)
        {
            try
            {
                if (___multiData != null)
                {
                    string strBase64 = null;
                    if (__isListImage == false)
                    {
                        strBase64 = ___multiData.background_image_fullUrl;
                    }else
                    {
                        strBase64 = ___multiData.liststyle_image_fullUrl;
                    }
                    if (string.IsNullOrEmpty(strBase64) == false)
                    {
                        int posConma = -1;
                        if (strBase64.Length > 30)
                        {
                            posConma = strBase64.IndexOf(';', 0, 30);
                        }
                        else
                        {
                            posConma = strBase64.IndexOf(';');
                        }
                        if (strBase64.Length > 0 && posConma != -1)
                        {
                            string strImageHead = strBase64.Substring(5, posConma -5);
                            int nextConma = strBase64.IndexOf(',', posConma);
                            string ___Base64PartString = null;
                            string ___strMayBeCharset = null;
                            string ___xmlCharset = null;
                            if (nextConma != -1)
                            {
                                try
                                {
                                    ___strMayBeCharset = strBase64.Substring(posConma + 1, nextConma - posConma - 1);
                                    if (string.IsNullOrEmpty(___strMayBeCharset) == false)
                                    {
                                        int indexOfCharset = ___strMayBeCharset.IndexOf("charset", StringComparison.OrdinalIgnoreCase);
                                        if (indexOfCharset  > -1)
                                        {
                                            ___xmlCharset = ___strMayBeCharset.Substring(indexOfCharset + 8);
                                            int ___EqualIndex = ___xmlCharset.IndexOf('=');
                                            if (___EqualIndex > -1)
                                            {
                                                ___xmlCharset = ___xmlCharset.Substring(___EqualIndex+1);
                                            }
                                        if (___xmlCharset.Length > 0)
                                        {
                                            if (commonHTML.FasterIsWhiteSpaceLimited(___xmlCharset[0]) || commonHTML.FasterIsWhiteSpaceLimited(___xmlCharset[___xmlCharset.Length - 1]))
                                            {
                                                ___xmlCharset = ___xmlCharset.Trim();
                                            }
                                        }
                                        }
                                    }
                                }
                                catch (Exception exCharset)
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                    {
                                        commonLog.LogEntry(" ___createDataImageForMultiDataImage  charset exception.: ", exCharset);
                                    }
                                }
                               
                                ___Base64PartString = strBase64.Substring(nextConma + 1);
                            }
                            switch (strImageHead)
                            {
                                case "image/png":
                                case "image/bmp":
                                case "image/jpeg":
                                case "image/gif":
                                case "image/jpg":
                                    System.Drawing.Image ___img = null;//commonGraphics.ConvertBase64ToImage(___Base64PartString);
                                    if (___img != null)
                                    {
                                        if (System.Threading.Monitor.TryEnter(this.___ImageRawListLockingObject, 100))
                                        {
                                            this.___images[strBase64] = ___img;
                                            System.Threading.Monitor.Exit(this.___ImageRawListLockingObject);
                                        }
                                    }
                                    return;
                                case "image/svg":
                                case "image/svg+xml":
                                case "image/svgxml":
                                case "image/svg xml":
                             

                                    return;
                                default:
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                    {
                                        commonLog.LogEntry("TODO:  needs to generate image from ___createDataImageForMultiDataImage : {0}", strBase64 );
                                    }
                                    return;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("___createDataImageForMultiDataImage Exception", ex);
                }
            }
        }


        #region  ___applyElemenetStyleSheets
        public void ___applyElemenetStyleSheets(CHtmlElement htmlElement, bool _ForceReset, bool JustStartWithMergeStylePhaseDone, bool SkipStylesheet)
		{
            /*
#if DEBUG
            if (htmlElement.___class == "lazy" && htmlElement.___applyCSSMethodCount != 0)
            {
                commonLog.LogEntry("HERE");
            }
#endif
             * */
            
            /*
#if DEBUG
            if (htmlElement.___id == "primary")
            {
                commonLog.LogEntry("HERE");
            }
#endif
             */
             
            
             
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                if (commonHTML.elementTagTypesNeverSeachStyleSheetSortedList.ContainsKey(htmlElement.___elementTagType) == true)
                {
                    commonLog.LogEntry("Strange {0} is entered to ___applyElemenetStyleSheets() Method. it should not happen! ");
                }
            }
            htmlElement.___applyCSSMethodCount++;
			CHtmlElement ___tagElementParent = htmlElement.___parent as CHtmlElement;
			//============================
            if (JustStartWithMergeStylePhaseDone == true)
            {
                goto MergeStylePhaseDone;
            }
            if (___tagElementParent != null)
            {
                if (___tagElementParent.___elementTagType == CHtmlElementType.CANVAS)
                {
                    htmlElement.___IsAttributesMergedToInlineStyle = true;
                    htmlElement.___offsetWidth = 0;
                    htmlElement.___offsetHeight = 0;
                    htmlElement.___IsElementVisible = false;
                    htmlElement.___IsNoScriptBlock = true;
                    htmlElement.___isCalculateElementBoundsCalled = true;
                    htmlElement.___isApplyElemenetStyleSheetCalled = true;
                    return;
                }
                if ( ___tagElementParent.___elementTagType == CHtmlElementType._DOCUMENT_FRAGMENT)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                    {
                        commonLog.LogEntry("Strange... ___calculateElementBounds() Element {0} have document fragment as parent  {1} escaping..", htmlElement, ___tagElementParent);
                    }
                    htmlElement.___isCalculateElementBoundsCalled = true;
                    htmlElement.___isApplyElemenetStyleSheetCalled = true;
                    return;
                }
            }
            /*
          
#if DEBUG
            if (string.Compare(htmlElement.___class, "page-header", StringComparison.OrdinalIgnoreCase) == 0)
            {
                commonLog.LogEntry("HERE");
            }
#endif
             */

            if (htmlElement.___isSvgElement == false)
            {
                if (htmlElement.___isCalculateElementBoundsCalled == true)
                {
                    // in order to prohibit unwanted function call
                    htmlElement.___isApplyElemenetStyleSheetCalled = true;
                    return;
                }
            }
            
             
            
			
			//============================
			switch(htmlElement.___elementTagType) 
			{
                case CHtmlElementType._ITEXT:
                             htmlElement.___IsAttributesMergedToInlineStyle = true;
				return;
                case CHtmlElementType.COMMENT:
                case CHtmlElementType.SCRIPT:
                case CHtmlElementType.STYLE:
                case CHtmlElementType.META:
                case CHtmlElementType.LINK:
                case CHtmlElementType.NOSCRIPT:
                    htmlElement.___IsAttributesMergedToInlineStyle = true;
                    htmlElement.___IsElementVisible = false;
                    if (htmlElement.___offsetWidth != 0)
                    {
                        htmlElement.___offsetWidth = 0;
                    }
                    if (htmlElement.___offsetHeight != 0)
                    {
                        htmlElement.___offsetHeight = 0;
                    }
                    htmlElement.___isCalculateElementBoundsCalled = true;
                    htmlElement.___isApplyElemenetStyleSheetCalled = true;
				return;
			}
			if(_ForceReset)
			{
				//htmlElement.___style = null;
				htmlElement.___IsAttributesMergedToInlineStyle  = false;
				htmlElement.___isApplyElemenetStyleSheetCalled = false;
			}
            if (htmlElement.___IsNoScriptBlock == true)
            {
                htmlElement.___IsAttributesMergedToInlineStyle = true;
                htmlElement.___IsElementVisible = false;
                if (htmlElement.___offsetWidth != 0)
                {
                    htmlElement.___offsetWidth = 0;
                }
                if (htmlElement.___offsetHeight != 0)
                {
                    htmlElement.___offsetHeight = 0;
                }
                htmlElement.___isCalculateElementBoundsCalled = true;
                htmlElement.___isApplyElemenetStyleSheetCalled = true;
                return;
            }


            if (htmlElement.___style != null)
            {
                htmlElement.___style.___isApplyElemenetStyleSheetsForElementDone = false;
                if (___tagElementParent != null && ___tagElementParent.___style != null)
                {
                    ___tagElementParent.___style.___copyStyleElementFields(htmlElement.___style, true, true);
                }
                if (htmlElement.___IsDynamicElement == false)
                {
                    commonHTML.SetDefaultStyePropertiesByTagType(htmlElement.___style, htmlElement.___elementTagType);
                }
            }


            /*
			if(___tagElementParent != null && ___tagElementParent.___style != null)
			{
				if(htmlElement.___isElementPositionAbsoluteOrStatic == true)
				{
					//htmlElement.IsParentsAbsolutePosition = true;
				}
				else
				{
					//htmlElement.IsParentsAbsolutePosition = htmlElement.parent.IsParentsAbsolutePosition;
				}
				HTML.CHtmlCSSStyleSheet ___newPart = htmlElement.___style;
				
				//HTML.CHtmlCSSStyleSheet.CloneStyleSheetWithInheritanceStandard(___tagElementParent.___style, ___newPart);
				commonHTML.SetDefaultStyePropertiesByTagType(___newPart, htmlElement.___elementTagType);

			}
             */

#if DEBUG
            /*
            if(htmlElement.___elementTagType == CHtmlElementType.CANVAS)
            {
                commonLog.LogEntry("HEERE");
            }
            */
#endif
            // ==============================================================================================
            // The style sheet property mearged count and font style may be set by default values reset now
            // ==============================================================================================

            htmlElement.___style.___PropertyMeargedCount = 0;
            htmlElement.___style.___FontRelatedCount = 0;

            if (htmlElement.___styleHover != null)
            {
                htmlElement.___styleHover.___PropertyMeargedCount = 0;
                htmlElement.___styleHover.___FontRelatedCount = 0;
            }
            if (htmlElement.___styleActive != null)
            {
                htmlElement.___styleActive.___PropertyMeargedCount = 0;
                htmlElement.___styleActive.___FontRelatedCount = 0;

            }
            if (htmlElement.___elementTagType == CHtmlElementType.HTML || htmlElement.___elementTagType == CHtmlElementType.BODY)
            {
                if (htmlElement.___style.___IsBackgroundColorSpecified == true)
                {
                    htmlElement.___style.___IsBackgroundColorSpecified = false;
                }
                if (htmlElement.___style.___IsForegroundSysColorSpecified == true)
                {
                    htmlElement.___style.___IsForegroundSysColorSpecified = false;
                }
            }
            if(htmlElement.___hasMustInheritCSSElement == true && htmlElement.___inheritCSSOwnerElementWeakReference != null)
            {

            }
            // ==============================================================================================

			if(htmlElement.___IsAttributesMergedToInlineStyle == false && htmlElement.___attributes.Count > 0)
			{
                string sValue =null;


                // [NOTE]
                // repeating htmlElement.___attributes.TryGetValue(str, out Value) turns out not increase performance.
                // -> 8700 ms
                // foreach Loop is better for checking attriubtes value
                // -> 8700 ms
                if (commonHTML.isElementJustStoreCSSAttributes(htmlElement) == true)
                {
                    foreach (CHtmlAttribute attr in htmlElement.___attributes.Values)
                    {


                        if (attr.___value is string)
                        {
                            sValue = attr.___value as string;
                        }
                        else
                        {
                            if (attr.___value != null)
                            {
                                sValue = commonHTML.GetStringValue(attr.___value);
                            }
                            else
                            {
                                sValue = null;
                            }
                        }
                        //htmlElement.___mustInheritAttributeList[commonHTML.getCSSAttributeTypeByElementType(attr.___attributeType)] = sValue;
                   
                    }
                    htmlElement.___isApplyElemenetStyleSheetCalled = true;
                    return;

                }
                else
                {
                    if(commonHTML.hasMustInheritsCSSElement(htmlElement) == true)
                    {
                        CHtmlElement ___cssStrongElement = htmlElement.___inheritCSSOwnerElementWeakReference.Target as CHtmlElement;
                        if(___cssStrongElement != null && ___cssStrongElement.___mustInheritAttributeList != null)
                        {
                            foreach(CSSAttributeType csstype in ___cssStrongElement.___mustInheritAttributeList.Keys)
                            {
                                switch(csstype)
                                {
                                    case CSSAttributeType.stroke:
                                        htmlElement.___style.___Stroke = ___cssStrongElement.___mustInheritAttributeList[csstype];
                                        continue;
                                    case CSSAttributeType.strokewidth:
                                        htmlElement.___style.___StrokeWidth = ___cssStrongElement.___mustInheritAttributeList[csstype];
                                        continue;
                                    case CSSAttributeType.fill:
                                        htmlElement.___style.BackgroundColor = ___cssStrongElement.___mustInheritAttributeList[csstype];
                                        continue;

                                }
                            }
                        }
                    }

                    foreach (CHtmlAttribute attr in htmlElement.___attributes.Values)
                    {
                        if (attr == null)
                            continue;
                     
                        if (attr.___value is string)
                        {
                            sValue = attr.___value as string;
                        }
                        else
                        {
                            if (attr.___value != null)
                            {
                                sValue = commonHTML.GetStringValue(attr.___value);
                            }
                            else
                            {
                                sValue = null;
                            }
                        }

                        htmlElement.___style.___PropertyMeargedCount++;

                        switch (attr.name)
                        {


                            // Standard Attributes
                            case "clear":
                                htmlElement.___style.clear = sValue;
                                continue;

                            case "align":
                                htmlElement.___style.___Align = commonHTML.FasterToLower(commonHTML.ReplaceInvalidCharacters(sValue, true, true));

                                continue;
                            case "valign":

                                htmlElement.___style.___VerticalAlign = commonHTML.ReplaceInvalidCharacters(sValue, true, true);
                                continue;
                            case "width":
                                htmlElement.___style.Width = sValue; // will be replaced later
                                if (htmlElement.___style.___styleSizeMode == CHtmlSizeModeType.Width || htmlElement.___style.___styleSizeMode == CHtmlSizeModeType.Both)
                                {
                                    htmlElement.___offsetWidth = htmlElement.___style.___WidthComputedValue;

                                }
                                continue;
                            case "height":
                                htmlElement.___style.Height = sValue; // will be replaced later
                                if (htmlElement.___style.___styleSizeMode == CHtmlSizeModeType.Height || htmlElement.___style.___styleSizeMode == CHtmlSizeModeType.Both)
                                {
                                    htmlElement.___offsetHeight = htmlElement.___style.___HeightComputedValue;

                                }
                                continue;




                            case "backgroundcolor":
                            case "backgroundColor":
                            case "bgcolor":
                            case  "fill": // for svg


                                if (sValue.Length == 1 && sValue[0] == '#')
                                {
                                    continue;
                                }
                                else if (string.CompareOrdinal(sValue, "none") == 0)
                                {
                                    continue;
                                }
                                else
                                {
                                    htmlElement.___style.BackgroundColor = sValue; // will be replaced later
                                }
                                continue;
                            case "stroke":
                                htmlElement.___style.___Stroke = sValue;
                                continue;
                            case "stroke_width":
                                htmlElement.___style.___StrokeWidth = sValue;
                                continue;
                            case "foregroundcolor":
                            case "foregroundColor":
                            case "fgcolor":
                                if (sValue.Length == 1 && sValue[0] == '#')
                                {
                                    continue;
                                }
                                else
                                {
                                    htmlElement.___style.Color = sValue; // will be replaced later
                                }
                                continue;
                            case "size":
                                switch (htmlElement.___elementTagType)
                                {
                                    case CHtmlElementType.FONT:
                                        htmlElement.___style.FontSize = commonHTML.GetFontSizeInPixelFromHTMLSize(sValue);
                                        break;

                                }
                                continue;
                            case "frameborder":
                            case "border":
                                htmlElement.___style.___BorderWidth = commonHTML.ReplaceInvalidCharacters(sValue, true, true);
                                continue;
                            case "bordercolor":
                                htmlElement.___style.___BorderColor = commonHTML.ReplaceInvalidCharacters(sValue, true, true);
                                continue;
                            case "margin":
                                htmlElement.___style.___Margin = commonHTML.ReplaceInvalidCharacters(sValue, true, true);
                                continue;
                            case "marginwidth":
                                htmlElement.___style.___Margin = commonHTML.ReplaceInvalidCharacters(sValue, true, true);
                                continue;
                            case "cellpadding":
                                htmlElement.___style.___CellPadding = commonHTML.ReplaceInvalidCharacters(sValue, true, true);
                                continue;
                            case "cellspacing":
                                htmlElement.___style.___CellSpacing = commonHTML.ReplaceInvalidCharacters(sValue, true, true);
                                continue;
                            case "alt":
                                htmlElement.___style.TextOverFlow = sValue;
                                continue;
                            case "font_variant":
                                htmlElement.___style.fontvariant = sValue;
                                continue;
                            case "font_weight":
                                htmlElement.___style.fontweight = sValue;
                                continue;
                            case "font_style":
                                htmlElement.___style.FontStyle = sValue;
                                continue;
                            case "nowrap":
                                /*
                                 * [normal] Default. Lines of text break automatically. 
                                 * Content wraps to the next line if it exceeds the width of the object. 
                                 * [nowrap] Line breaks are suppressed. Content does not wrap to the next line. 
                                 * [pre]   Line breaks and other whitespace are preserved.
                                 * This possible value is supported in Internet Explorer 6 and later when
                                 * the !DOCTYPE declaration specifies standards-compliant mode.
                                 *  When the !DOCTYPE declaration does not specify standards-compliant mode,
                                 *  you can retrieve this value, but it does not affect rendering it functions
                                 *  like the normal value. 
                                 */
                                if (string.Equals(sValue, "false", StringComparison.OrdinalIgnoreCase) == true)
                                {

                                    htmlElement.___style.WhiteSpace = "normal";
                                    continue;
                                }
                                else
                                {

                                    htmlElement.___style.WhiteSpace = "nowrap";
                                    //htmlElement.___style.Display = "block";
                                    //htmlElement.SetChildrenDisplayStyle("inline", true, true);

                                }
                                continue;
                            case "face":
                                htmlElement.___style.FontFamily = commonHTML.ReplaceInvalidCharacters(sValue, true, true);
                                continue;
                            case "quality":
                                //htmlElement.___style.font = sValue;
                                continue;
                            case "style":
                             
                                    try
                                    {
                                        System.Collections.Generic.List<CHtmlStyleAttribute?> _styleList = commonHTML.GetProcessStyleSheetStringIntoCHtmlCollection(sValue);
                                        if (_styleList.Count == 0)
                                        {
                                            goto InlineStyleMergeDone;
                                        }
                                        CHtmlCSSRule styleNewPart = new CHtmlCSSRule(CHtmlElementStyleType.InlineStyle);

                                        if (string.IsNullOrEmpty(this.___URL) == false)
                                        {
                                            styleNewPart.___baseUrl = string.Copy(this.___URL);
                                            styleNewPart.___ImageUrlHint = string.Copy(this.___URL);
                                        }
                                        styleNewPart.___isCSSRuleForThisNode = true;

                                        styleNewPart.SelectorID = commonHTML.StylesheetSelectorIDDirect;
                                        styleNewPart.___IsDirectStyleElement = true;
                                        styleNewPart.___styleAttributeList.AddRange(_styleList);
                                        styleNewPart.___SelectorRanking = int.MaxValue;
                                        htmlElement.___stylesheetsForCurrentNodeList.Add(styleNewPart);
                                    }
                                    catch (Exception ex)
                                    {
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                        {
                                            commonLog.LogEntry("ProcessingInlineStyleSheet Parse Exception {0} \"{1}\"", ex.Message, sValue);
                                        }
                                    }
                                    //commonHTML.ApplyStyleSheetIntoHTMLControl(tPart, htmlControl, ClientRectangle);
                                
                                InlineStyleMergeDone:
                                continue;
                            case "backgroundimage":
                                htmlElement.___style.___BackgroundImage = sValue;
                                if (string.IsNullOrEmpty(this.___URL) == false)
                                {
                                    htmlElement.___style.___ImageUrlHint = string.Copy(this.___URL);
                                }
                                break;
                            case "background":
                                // Note) This "background is attribute not CSS background. Be carefull.
                                if (string.IsNullOrEmpty(sValue) == false)
                                {
                                    htmlElement.___style.___Background = sValue;
                                    if (htmlElement.___style.___BackgroundImage != null)
                                    {
                                        htmlElement.___style.___BackgroundImage = null;
                                    }
                                }


                                continue;
                            case "marginbottom":
                            case "marginBottom":
                                htmlElement.___style.MarginBottom = commonHTML.ReplaceInvalidCharacters(sValue, true, true);
                                continue;
                            case "marginleft":
                            case "marginLeft":
                                htmlElement.___style.MarginLeft = commonHTML.ReplaceInvalidCharacters(sValue, true, true);
                                continue;
                            case "margintop":
                            case "marginTop":
                                htmlElement.___style.MarginTop = commonHTML.ReplaceInvalidCharacters(sValue, true, true);
                                continue;
                            case "marginright":
                            case "marginRight":
                                htmlElement.___style.MarginRight = commonHTML.ReplaceInvalidCharacters(sValue, true, true);
                                continue;
                            case "marginheight":
                            case "marginHeight":
                                htmlElement.___style.MarginHeight = commonHTML.ReplaceInvalidCharacters(sValue, true, true);
                                continue;
                            case "text":
                                // attribute Text is font color not Text
                                htmlElement.___style.Color = commonHTML.ReplaceInvalidCharacters(sValue, true, true);
                                continue;
                            default:
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 30)
                                {
                                    commonLog.LogEntry("Warning! style non-related element attribute can be skipped : " + attr.name);
                                }

                                continue;
                        }
                    }
                }


				htmlElement.___IsAttributesMergedToInlineStyle = true;
			}
			if(htmlElement.___elementTagType  == CHtmlElementType.A )
			{
                if (htmlElement.___hrefBase != null && string.IsNullOrEmpty(htmlElement.___hrefBase.href) == false)
                {
                    htmlElement.___style.___AHrefBase = htmlElement.___hrefBase.CloneUri();
                    htmlElement.___style.___AHrefBase.___OriginatingElementReference = new WeakReference(htmlElement, false);
                }
			}
			else
			{
				if(___tagElementParent != null)
				{
					if(___tagElementParent.___style.___AHrefBase != null && string.IsNullOrEmpty(___tagElementParent.___style.___AHrefBase.___Href) == false)
					{
                        htmlElement.___style.___AHrefBase = ___tagElementParent.___style.___AHrefBase.CloneUri();
					}
				}
			}


			// 1) Now Hit List SHOULD only Contains Hited Style. Sort By Ranking
			try
			{
				if(htmlElement.___stylesheetsForCurrentNodeList.Count > 0)
				{
					htmlElement.___stylesheetsForCurrentNodeList.Sort(new CHtmlCSSRuleRankingComparer());
				}
			}
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel > 5)
				{
					commonLog.LogEntry("HitList Sort Exception", ex);
				}

			}
			// Higher Ranking is Top
			// [Note] 
			// Do Not Alter htmlt.___stylesheetsForNextNodeList. It has been binary sorted by WorkingKey. it is expensive.

			
			// ===============================================================================
			// Set Elements Style Status
			// ===============================================================================
			if(htmlElement.___style.___styleConditionType  == CSSStyleConditionType.None)
			{
                htmlElement.___style.___styleConditionType = CSSStyleConditionType.ElementStyle;
			}

			// ===============================================================================
			// By The Tag Name
			// ===============================================================================
			switch(htmlElement.___elementTagType)
			{
				case CHtmlElementType.NOBR:
					//htmlElement.___style.StyleLists.Remove("white-space");

					//htmlElement.___style.StyleLists.Add("white-space", "nowrap");
					htmlElement.___style.setAttributeInner("white-space", "nowrap", true, true);
					break;
                case CHtmlElementType.FRAMESET:
                    if (htmlElement.___attributes.ContainsKey("rows") == true)
                    {
                        htmlElement.___framesetRowsParsedArray = commonHTML.ConvertFrameSetRowsColsStringIntoDouble(commonHTML.GetElementAttributeInString(htmlElement, "rows"));
                    }
                    if (htmlElement.___attributes.ContainsKey("cols") == true)
                    {
                        htmlElement.___framesetColsParsedArray = commonHTML.ConvertFrameSetRowsColsStringIntoDouble(commonHTML.GetElementAttributeInString(htmlElement, "cols"));
                    }


                    break;

				default:
					break;
			}


			// ===============================================================================
            if (htmlElement.___elementTagType == CHtmlElementType._ELEMENT_AFTER || htmlElement.___elementTagType == CHtmlElementType._ELEMENT_BEFORE)
            {
                htmlElement.___IsAttributesMergedToInlineStyle = true;
                if (htmlElement.___isElementPositionAbsoluteOrStatic == true)
                {
                    htmlElement.___style.position = "relative";
                }
                if (htmlElement.___style.___cssPositionComputedValueType != CSSPositionType.relative)
                {
                    htmlElement.___style.___cssPositionComputedValueType = CSSPositionType.relative;
                }
                htmlElement.___ElementInlineLevel = 0;
                htmlElement.___IsElementBlock = false;
                htmlElement.___ElementInlineShifted = false;
                switch (htmlElement.___style.___cssDisplayComputedValueType)
                {
                    case CSSDisplayType.Inline:
                    case CSSDisplayType.InlineBlock:
                    case CSSDisplayType.InlineGrid:
                    case CSSDisplayType.TableRow:
                    case CSSDisplayType.TableCell:
                    case CSSDisplayType.TableCaption:
                    case CSSDisplayType.InlineStack:
                        htmlElement.___style.___cssDisplayComputedValueType = CSSDisplayType.Block;
                        break;
                }
                goto MergeStylePhaseDone;
            }

			if(SkipStylesheet == false && htmlElement.___stylesheetsForCurrentNodeList.Count > 0)
			{
				// =======================================================================================
				//   CHtmlCSSRuleRankingCompare() has sorted hit list in Higher Ranking is Top
				//   Apply each CHtmlCSSStyleSheet From Bottom to Top.
				// =======================================================================================
                
				for(int i =  htmlElement.___stylesheetsForCurrentNodeList.Count -1; i >= 0 ; i-- )
				{
				    CHtmlCSSRule sPart = htmlElement.___stylesheetsForCurrentNodeList[i];
                    if (sPart.___IsDirectStyleElement == true)
                    {
                        goto SetValuesInCHtmlStyleElementII;
                    }
						if(sPart.___PseudoClassCount == 0)
						{
							// There is no PseduClassDefined 
							goto SetValuesInCHtmlStyleElementII;

                        }
                        else if (sPart.___HasBeforePseudoClass == true || sPart.___HasAfterPseudoClass == true)
                        {
                            if (commonHTML.elementTagTypesDisallowsCSSBeforeAfterSortedList.ContainsKey(htmlElement.___elementTagType) == false)
                            {
                                bool IsTrueAfterBeforeKeyCheck = false;
                                if (sPart.___PseudoClassCount == 1)
                                {
                                    IsTrueAfterBeforeKeyCheck = true;
                                }
                                else
                                {
                                    CHtmlStyleKey ___lastKey = sPart.___styleKeyOrignalList[sPart.___styleKeyOrignalList.Count - 1] as CHtmlStyleKey;
                                    if (___lastKey == null)
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        if ((___lastKey.___pseudoTitleParamList != null ) && ___lastKey.___pseudoTitleParamList.ContainsKey(CHtmlPseudoClassType.AfterPseudoClass) || ___lastKey.___pseudoTitleParamList.ContainsKey(CHtmlPseudoClassType.BeforePseudoClass))
                                        {
                                            IsTrueAfterBeforeKeyCheck = true;
                                        }
                                        else
                                        {
                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 30)
                                            {
                                                commonLog.LogEntry("Style Selector does not have :after or :before ignore now... :{0}", sPart.___SelectorID);
                                            }
                                            continue;
                                        }
                                    }
                                }
                                
                                if (IsTrueAfterBeforeKeyCheck == false)
                                {
                                    continue;
                                }
                                if (sPart.___HasBeforePseudoClass == true)
                                {
                                    if (htmlElement.___IsElementBeforeCreated == false)
                                    {
                                        htmlElement.___ElementBefore = new CHtmlElement();
                                        htmlElement.___ElementBefore.___SetTagNameOnly("#BEFORE");
                                        htmlElement.___ElementBefore.___elementTagType = CHtmlElementType._ELEMENT_BEFORE;
                                        htmlElement.___ElementBefore.___style.___StyleType = CHtmlElementStyleType.Element;
                                        htmlElement.___ElementBefore.___style.___Display = "block";
                                        htmlElement.___ElementBefore.___style.___Width = "0px";
                                        htmlElement.___ElementBefore.___style.___Height = "0px";
                                        htmlElement.___ElementBefore.___style.___isPositionMustbeRelativeFix = true;
                                        htmlElement.___ElementBefore.___style.___cssDisplayComputedValueType = CSSDisplayType.Block;
                                        htmlElement.___ElementBefore.___parentWeakRef = new WeakReference(htmlElement, false);
                                        htmlElement.___ElementBefore.___documentWeakRef = new WeakReference(this, false);
                                        htmlElement.___ElementBefore.___IsSystemHidden = true;
                                        htmlElement.___ElementBefore.___ClosedReson = CHtmlTagClosedReasonType.Direct;
                                        
                                        htmlElement.___ElementBefore.___IsElementBeforeAfterAddRequied = false;
                                        if (htmlElement.___IsElementBeforeCreated == false)
                                        {
                                            if (htmlElement.___childNodes.Count == 0)
                                            {
                                                htmlElement.___ElementBefore.___ChildNodeIndex = htmlElement.___childNodes.Add(htmlElement.___ElementBefore);
                                            }
                                            else
                                            {
                                                htmlElement.___childNodes.Insert(0, htmlElement.___ElementBefore);
                                                htmlElement.___ElementBefore.___ChildNodeIndex = 0;
                                                commonHTML.ResetCHtmlElementChildIndex(htmlElement, 0);
                                            }
                                        }
                                        htmlElement.___IsElementBeforeCreated = true;
                                        //htmlElement.___setElementCriticalPropertiesChildNode(htmlElement.___ElementBefore);
                                    }
                                    if (htmlElement.___ElementBefore == null)
                                    {
                                        continue;
                                    }
                                    try
                                    {
                                        commonHTML.SetValuesInCHtmlStyleElement(htmlElement.___ElementBefore.___style, sPart, sPart.___styleAttributeList, true, sPart.___baseUrl);
                                    }
                                    catch (Exception ex)
                                    {
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                        {
                                            commonLog.LogEntry("Error Before Style Selector {0}  : {1}", sPart, ex.Message);
                                        }


                                    }
                                }
                                else if (sPart.___HasAfterPseudoClass == true)
                                {
          

                                    if (htmlElement.___IsElementAfterCreated == false)
                                    {
                                        htmlElement.___ElementAfter = new CHtmlElement();
                                        htmlElement.___ElementAfter.___SetTagNameOnly("#AFTER");
                                        htmlElement.___ElementAfter.___elementTagType = CHtmlElementType._ELEMENT_AFTER;
                                        htmlElement.___ElementAfter.___style.___StyleType = CHtmlElementStyleType.Element;
                                        htmlElement.___ElementAfter.___style.___isPositionMustbeRelativeFix = true;
                                        htmlElement.___ElementAfter.___style.___Display = "block";
                                        htmlElement.___ElementAfter.___style.___Width = "0px";
                                        htmlElement.___ElementAfter.___style.___Height = "0px";
                                        htmlElement.___ElementAfter.___style.___cssDisplayComputedValueType = CSSDisplayType.Block;
                                        htmlElement.___ElementAfter.___parentWeakRef = new WeakReference(htmlElement, false);
                                        htmlElement.___ElementAfter.___documentWeakRef = new WeakReference(this, false);
                                        htmlElement.___IsElementAfterCreated = true;
                                        htmlElement.___ElementAfter.___ClosedReson = CHtmlTagClosedReasonType.Direct;
                                        htmlElement.___ElementAfter.___IsSystemHidden = true;
                                        // After Elements will be append to htmllement.___childrens when it is close.
                                        htmlElement.___ElementAfter.___IsElementBeforeAfterAddRequied = true;
                                    
                                        //htmlElement.___setElementCriticalPropertiesChildNode(htmlElement.___ElementAfter);
                                    }
                                    if (htmlElement.___ElementAfter == null)
                                    {
                                        continue;
                                    }
                                    //htmlElement.___ElementAfter.___style.StyleLists.Add(afterPart);
                                    try
                                    {
                                        commonHTML.SetValuesInCHtmlStyleElement(htmlElement.___ElementAfter.___style, sPart, sPart.___styleAttributeList, true, sPart.___baseUrl);
                                    }
                                    catch (Exception ex)
                                    {
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                        {
                                            commonLog.LogEntry("Error After Style Selector {0}  : {1}", sPart, ex.Message);
                                        }

                                    }
                                }
                            }
                            continue;
                        }
                        else if (sPart.___HasHoverPseudoClass == true || sPart.___HasFocusPseudoClass == true)
                        {
                            commonHTML.SetValuesInCHtmlStyleElement(htmlElement.___styleHover, sPart, sPart.___styleAttributeList, false, sPart.___baseUrl);
                            htmlElement.___IsStyleHoverSet = true;
                            continue;
                        }
                        else if (sPart.___HasActivePseudoClass == true)
                        {
                            if (htmlElement.___styleActive == null)
                            {
                                htmlElement.___styleActive = new CHtmlCSSStyleSheet(CHtmlElementStyleType.Active);
                                htmlElement.___styleActive.___StyleType = CHtmlElementStyleType.Active;
                            }
                            commonHTML.SetValuesInCHtmlStyleElement(htmlElement.___styleActive, sPart, sPart.___styleAttributeList, false, sPart.___baseUrl);
                            htmlElement.___IsStyleHoverSet = true;
                            continue;
                        }
                        else if (sPart.___HasVisitedPseudoClass == true || sPart.___HasWarningPseudoClass == true || sPart.___HasActivePseudoClass == true || sPart.___HasValidPseudoClass == true || sPart.___HasInvalidPseudoClass == true || sPart.___HasPlaceHolderPseudoClass == true)
                        {
                            /*
                             *        Node :invalid and :valid case conditional by control. so just skip it for now.
                             *        PlaceHolder will not be applyed here
                             */

                            continue;
                        }
                        else if (sPart.___HasBeforePseudoClass == false && sPart.___HasAfterPseudoClass == false)
                        {
                            // There is no after and before
                            goto SetValuesInCHtmlStyleElementI;
                        }
						// ----------------------------------------------------------------
						// Means sPart.___isCSSRuleForThisNode == true
						// ----------------------------------------------------------------
						//int ___periodPos = sPart.SelectorID.LastIndexOf(":");
   
					SetValuesInCHtmlStyleElementI:
						if(sPart.___PseudoClassCount > 0)
						{
							
							if(sPart.___HasVisitedPseudoClass == true)
							{
								continue;
							}
							if(sPart.___HasHoverPseudoClass == true  || sPart.___HasFocusPseudoClass == true)
							{
                                commonHTML.SetValuesInCHtmlStyleElement(htmlElement.___styleHover, sPart, sPart.___styleAttributeList, false, sPart.___baseUrl);
								htmlElement.___IsStyleHoverSet = true;
								continue;
							}
							else if(sPart.___HasActivePseudoClass == true)
							{
                                if (htmlElement.___styleActive == null)
                                {
                                    htmlElement.___styleActive = new CHtmlCSSStyleSheet(CHtmlElementStyleType.Active);
                                    htmlElement.___styleActive.___StyleType = CHtmlElementStyleType.Active;
                                }
                                commonHTML.SetValuesInCHtmlStyleElement(htmlElement.___styleActive, sPart, sPart.___styleAttributeList, false, sPart.___baseUrl);
								htmlElement.___IsStyleHoverSet = true;
								continue;
							}
				
						}
					SetValuesInCHtmlStyleElementII:
        
                    commonHTML.SetValuesInCHtmlStyleElement(htmlElement.___style, sPart, sPart.___styleAttributeList, false, sPart.___baseUrl);
					

					
				}
				

				
				htmlElement.___IsAttributesMergedToInlineStyle = true;
			}
			// Set Style Flag Which means list has move to property
			htmlElement.___style.IsSortedListFieldsHasCopiedToProperty = true;
			if(htmlElement.___styleHover != null)
			{
				htmlElement.___styleHover.IsSortedListFieldsHasCopiedToProperty  = true;
			}
			/*
			if(htmlElement.styleActive != null)
			{
				htmlElement.styleActive.IsSortedListFieldsHasCopiedToProperty = true;
			}
			*/

            MergeStylePhaseDone:
			// ===============================================================================
			// Absolute Positon
			// ===============================================================================

                /*
                         * 				Position  | String that specifies or receives one of the following values.static Default. Object has no 
                              | special positioning; it follows the layout rules of HTML. 
                              | absolute : Object is positioned relative to parent element's position or to the body object
                              | if its parent element is not positioned using the top and left properties. 
                              | relative : Object is positioned according to the normal flow, and then offset by the top 
                              | and left properties. 
                              | static : Default. Object has no special positioning; it follows the layout rules of HTML.
                    [Remarks]
                    Setting the property to absolute pulls the object out of the "flow" of the document and positions it 
                    regardless of the layout of surrounding objects. If other objects already occupy the given position,
                    they do not affect the positioned object, nor does the positioned object affect them. Instead, all 
                    objects are drawn at the same place, causing the objects to overlap. This overlap is controlled by
                    using the z-index attribute or property. Absolutely positioned objects do not have margins, but
                    they do have borders and padding. To enable absolute positioning on an object you must specify at
                    least one of the top, bottom, left, or right properties, in addition to setting the position 
                    property to absolute. Otherwise, these positioning properties use their default value of absolute, 
                    which causes the object to render immediately after the preceding elements, according to the layout 
                    rules of HTML.

                    Input from pointing devices, such as the mouse, does not penetrate through overlapping elements
                    even if the elements are not visible. This is also true for positioned elements with a negative 
                    z-index unless: 

                    The parent is a scrolling container (that is, its overflow property is set to auto or scroll).
                    The parent is positioned (that is, its position property is set to absolute or relative).

                    Setting the property to relative places the object in the natural HTML flow of the document,
                    but offsets the position of the object based on the preceding content. The following syntax
                    shows how to create superscript text by placing the text in a span that is positioned relative
                    to the remaining text in the paragraph.

                    <P>The superscript in this name
                        <SPAN STYLE="position:relative; 
                        top:-3px">xyz </SPAN> is "xyz".</P>

                    Text and objects that follow a relatively positioned object occupy their own space and do not 
                    overlap the natural space for the positioned object. In contrast, text and objects that follow
                    an absolutely positioned object occupy what would have been the natural space for the positioned
                    object before it was pulled out of the flow. Placing an absolutely positioned object beyond the 
                    viewable area of the window causes a scroll bar to appear. When relatively positioned objects are
                     placed beyond the viewable area, a scroll bar is not shown.

                    The size of the content determines the size of objects with layout. For example, setting the 
                    height and position properties on a div object gives it layout. The content of the div determines
                    the size. In this case, the content determines the size of the width.

                    For an overview about how to use dynamic positioning, see About Element Positioning.

                    See the Applies To section for elements that can be relatively and absolutely positioned.
                    */




            
			

			// ===============================================================================
			// Visibility
			// ===============================================================================
			try
			{
				/*  -------------------------------------------------------------------------------------
				 *  We would like to keep Visivility of child even if the parent is non-visible
				 *  -------------------------------------------------------------------------------------*/
				if(___tagElementParent  != null && (___tagElementParent.___IsElementVisible == false || ___tagElementParent.___IsParentVisible == false))
				{
					if(___tagElementParent.___elementTagType != CHtmlElementType.HTML && ___tagElementParent.___elementTagType != CHtmlElementType.HEAD)
					{
						
						htmlElement.___IsParentVisible = false;
					}
				}
			
				if(htmlElement.___IsElementVisible == true && htmlElement.___style.___cssVisibilityComputedValueType  != CSSVisibilityType.visible)
				{

                        htmlElement.___IsElementVisible = false;
                        goto VisibileStyleDone;
                    
				}
                if (htmlElement.___IsElementVisible == true && htmlElement.___style.___cssDisplayComputedValueType == CSSDisplayType.None)
				{
					htmlElement.___IsElementVisible  = false;
				}
				goto VisibileStyleDone;
			} 
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
				{
					commonLog.LogEntry("___applyElemenetStyleSheets For Bounds", ex);
				}
			}
			VisibileStyleDone:
				if(htmlElement.___IsElementVisible == false)
				{
                    if (htmlElement.___style.___cssVisibilityComputedValueType != CSSVisibilityType.hidden)
					{
                        htmlElement.___style.___cssVisibilityComputedValueType = CSSVisibilityType.hidden;
					}
					/*
					htmlElement.___style.Width  = "0px";
					htmlElement.___style.Height  = "0x";
					htmlElement.offsetWidth = 0;
					htmlElement.offsetHeight = 0;
					*/
				}
			if(htmlElement.___elementTagType == CHtmlElementType.BODY || htmlElement.___elementTagType == CHtmlElementType.HTML)
			{
				if(htmlElement.___IsElementVisible == false)
				{
					htmlElement.X_DOM_ProcessorAdd("Root Visibility Force to True");
					htmlElement.___IsElementVisible = true;
				}
			}

			
			// ===============================================================================
			// Inherits Style Overflow
			// Note ) ovrflow css is not inherited but it actually
			// causes invisible to client element to be invisible 
			// It is important the inherits the value into children
			// use special field to store the information
			// ===============================================================================
			if(___tagElementParent != null && ___tagElementParent.___style != null)
			{
				if(string.IsNullOrEmpty(___tagElementParent.___style.___OverFlowFromParent) == false)
				{
					htmlElement.___style.___OverFlowFromParent = string.Copy(___tagElementParent.___style.___OverFlowFromParent);
					htmlElement.___style.___OverFlowFromParentHeight = ___tagElementParent.___style.___OverFlowFromParentHeight;
					htmlElement.___style.___OverFlowFromParentWidth = ___tagElementParent.___style.___OverFlowFromParentWidth;
					htmlElement.___style.___OverFlowElementStart = string.Copy(___tagElementParent.___style.___OverFlowElementStart);

				}
			}
			
			
			// ===============================================================================
			// Inherits Width and Height Values
			// ===============================================================================
								
			if(___tagElementParent != null)
			{

				CHtmlElement blockElement = ___tagElementParent;

				if(blockElement != null)
				{
					bool WidthMaxFound = false;
					bool HeightMaxFound = false;
					int ___parentLookup = 0;
                    int ___availHeightLookupCount = 0;
					while(blockElement != null)
					{
						if(blockElement.___IsElementBlock == true && blockElement.___IsElementVisible == true)
						{
							if(WidthMaxFound == false && (blockElement.___availWidth > 0 ))
							{
								htmlElement.___availWidth = blockElement.___availWidth;
								if(blockElement.___elementTagType == CHtmlElementType.TABLE && htmlElement.___elementTagType  == CHtmlElementType.TR)
								{
									htmlElement.___offsetWidth = blockElement.___offsetWidth;
                                    htmlElement.___style.___Width = ((int)blockElement.___offsetWidth).ToString() + "px";
									htmlElement.___style.StyleCommentAdd("Width is inherited by table width.;");
								}
								WidthMaxFound = true;
							}
                            if (HeightMaxFound == false && (blockElement.___availHeight > 0))
                            {
                                htmlElement.___availHeight = blockElement.___availHeight;
                                HeightMaxFound = true;
                            }
                            else
                            {
                                ___availHeightLookupCount++;
                                if (___availHeightLookupCount > 2)
                                {
                                    HeightMaxFound = true;
                                }
                            }
							if(___parentLookup > 30)
							{
								break;
							}
							if(WidthMaxFound == true && HeightMaxFound == true)
							{
								htmlElement.parentBlockElement = null;
								htmlElement.parentBlockElement = blockElement;
								break;
							}
							___parentLookup++;
						}
						else if(blockElement.___IsElementVisible== true)
						{
                            if (blockElement.___style.___styleSizeMode == CHtmlSizeModeType.Both || blockElement.___style.___styleSizeMode == CHtmlSizeModeType.Width)
							{
                                if (WidthMaxFound == false && blockElement.___availWidth > 0)
								{
									htmlElement.___availWidth = blockElement.___availWidth;
									WidthMaxFound = true;
								}
                                if (HeightMaxFound == false && (blockElement.___availHeight > 0))
                                {
                                    htmlElement.___availHeight = blockElement.___availHeight;
                                    HeightMaxFound = true;
                                }

							}
						}
                        blockElement = blockElement.___parent as CHtmlElement;
					}
				}
				else
				{
					blockElement.___availWidth = this.___DocumentMinSize.Width;
					blockElement.___availHeight = this.___DocumentMinSize.Height;
				}
			}
			/*
#if DEBUG
			if(htmlElement.@class == "noion")
			{
				commonLog.LogEntry("HERE");
			}
#endif
			*/
            // ===============================================================================
            // Get IsBlock
            // ===============================================================================
            htmlElement.___IsElementBlock = commonHTML.IsBlockElement(htmlElement);
            // ===============================================================================
            // Inherits Parents Inline if Permitted by 'Rule'
            // ===============================================================================


            if (htmlElement.___IsElementBlock == false)
            {
                if (commonHTML.elementTagTypesDisallowInlineSortedList.ContainsKey(htmlElement.___elementTagType) == true)
                {
                    if (htmlElement.___elementTagType != CHtmlElementType.DIV)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("'{0}' was disallowed inline", htmlElement);
                        }
                        htmlElement.X_DOM_ProcessorAdd("TagTypesDisallowInlineSortedList disallowes inline");
                        htmlElement.___IsElementBlock = true;
                    }
                }
                if (htmlElement.___elementTagType == CHtmlElementType.LI)
                {
                    if (htmlElement.___style.___cssDisplayComputedValueType == CSSDisplayType.Inline)
                    {
                        //htmlElement.X_DOM_ProcessorAdd("This element will be layout the same as inline-block");
                        htmlElement.___IsElementBlock = true;
                        htmlElement.___IsElementLayoutByInlineBlockWay = true;
                    }
                }
            }



            // ===============================================================================


			// ===============================================================================
			// Reset Width and Height Values
			// ===============================================================================
            if (htmlElement.___elementTagType == CHtmlElementType.BODY && string.IsNullOrEmpty(htmlElement.___style.Width) == true)
			{
                htmlElement.___style.Width = this.___DocumentMinSize.Width.ToString() + "px";
			}

			
			/*
			if(htmlElement.___style.Width.Length > 0 && commonHTML.IsStringAutoOrInherit(htmlElement.___style.Width) == true)
			{
				//htmlElement.___style.Width = "";
				htmlElement.X_DOM_ProcessorAdd("Width auto erased. ");
			}
			else
			{

			}
			*/


			// ============================================================

			// ============================================================
			// IE6 can have Height = 1% to make clearfix. but it may cause trouble
			// we do not want it.
			// ============================================================
            if (string.IsNullOrEmpty(htmlElement.___style.___Height) == false && htmlElement.___style.___Height[htmlElement.___style.___Height.Length -1]
                 == '%')
			{
                if (htmlElement.___elementTagType != CHtmlElementType.IMG && htmlElement.___elementTagType != CHtmlElementType.HR && htmlElement.___elementTagType != CHtmlElementType.FRAMESET && htmlElement.___elementTagType != CHtmlElementType.FRAME)
				{
                    string numValue = htmlElement.___style.___Height;
					if(commonHTML.IsStringAutoOrInheritOrZero(numValue) == false)
					{
						numValue = numValue.Replace("%", "");
						if(numValue.Length > 0)
						{
                            double fValue;
                            try
                            {
                                double.TryParse(numValue, out fValue);
                                if (fValue <= 3)
                                {
                                    htmlElement.___style.Height = "";
                                    htmlElement.X_DOM_ProcessorAdd("Height Value " + numValue + "% is disabled;");
                                }
                            }
                            catch (Exception ex)
                            {
                                if (commonLog.LoggingEnabled)
                                {
                                    commonLog.LogEntry("IE6 Double Parse Error", ex);
                                }
                            }
						}
					}
				}
			}




			// ============================================================

            if (string.IsNullOrEmpty(htmlElement.___style.___FontFamily) == false)
			{
                htmlElement.___style.FontFamily = commonHTML.ReplaceInvalidCharacters(htmlElement.___style.___FontFamily, true, true);
			}



			// ===============================================================================
			// <input tag Width and Height
			// ===============================================================================

			if(commonHTML.elementTagTypesForCreatingManagedControlSortedList.ContainsKey(htmlElement.___elementTagType) == true)
			{
				if(htmlElement.___IsNoScriptBlock == true)
				{
					htmlElement.X_DOM_ProcessorAdd("No Managed Control Created for No Script Block");
					goto ManagedControlSecionDone;
				}
                if (htmlElement.___elementTagType == CHtmlElementType.IFRAME || htmlElement.___elementTagType == CHtmlElementType.FRAME)
                {
                    if (this.___IsMultiversalDocument == true)
                    {
                        htmlElement.X_DOM_ProcessorAdd("No Managed Control Created at Apply Stylesheet section.");
                        goto ManagedControlSecionDone;
                    }
                }
				if(htmlElement.___elementTagType == CHtmlElementType.INPUT)
				{
					if(htmlElement.type.Length != 0 && string.Equals(htmlElement.type, "hidden", StringComparison.OrdinalIgnoreCase) == true)
					{
						htmlElement.___IsElementVisible = false;
						goto ManagedControlSecionDone;
					}
				}
				if(htmlElement.___elementTagType == CHtmlElementType.EMBED)
				{
					if(___tagElementParent != null && ___tagElementParent.___elementTagType == CHtmlElementType.OBJECT)
					{
						htmlElement.___IsElementVisible = false;
						goto ManagedControlSecionDone;
					}
				}
				htmlElement.___WillCreateMangedControl = true;
                if (this.___ManagedControlPendingElementList != null)
                {
                    if (this.___ManagedControlPendingElementList.ContainsKey(htmlElement.___elementOID) == false)
                    {
                        this.___ManagedControlPendingElementList[htmlElement.___elementOID] = htmlElement;
                    }
                }



                #region ManagedControlSizingSection
                bool ___IsManagedHeightSet = false;
                bool ___IsManagedWidthSet = false;
                double ___ManagedControlPossibleWidth = 0;
                double ___ManagedControlPossibleHeight = 0;
                if(string.IsNullOrEmpty(htmlElement.___style.Width) == false && commonHTML.IsStringAutoOrInheritOrZero(htmlElement.___style.Width) == false)
                {
                    ___IsManagedWidthSet = true;
                    ___ManagedControlPossibleWidth = commonHTML.GetDoubleValueFromString(htmlElement.___style.___Width, htmlElement.availWidth, this.___HTMLTagRemUnitSize);
                }
                if (string.IsNullOrEmpty(htmlElement.___style.Height) == false && commonHTML.IsStringAutoOrInheritOrZero(htmlElement.___style.Height) == false)
                {
                    ___IsManagedHeightSet = true;
                    ___ManagedControlPossibleHeight = commonHTML.GetDoubleValueFromString(htmlElement.___style.Height, htmlElement.availHeight, this.___HTMLTagRemUnitSize);
                }
                switch (htmlElement.___elementTagType)
                {
                    case CHtmlElementType.OBJECT:
                        break;
                    case CHtmlElementType.FRAME:
                        {
                            if (___tagElementParent != null)
                            {
                                if (___tagElementParent.___elementTagType == CHtmlElementType.FRAMESET)
                                {
                                    if (___tagElementParent.___framesetRowsParsedArray == null || ___tagElementParent.___framesetRowsParsedArray.Length == 0)
                                    {
                                        htmlElement.___style.Height = "100%";

                                    }
                                    else
                                    {
                                        // rows is defined
                                        htmlElement.___style.Height = "30%";
                                    }
                                    if (htmlElement.offsetHeight == 0)
                                    {
                                        htmlElement.offsetHeight = commonHTML.GetDoubleValueFromString(htmlElement.___style.height, htmlElement.availHeight, this.___HTMLTagRemUnitSize);
                                    }
                                    if (___tagElementParent.___framesetColsParsedArray == null || ___tagElementParent.___framesetColsParsedArray.Length == 0)
                                    {
                                        htmlElement.___style.Width = "100%";

                                    }
                                    else
                                    {
                                        // cols is defined
                                        htmlElement.___style.Width = "30%";
                                    }
                                    if (htmlElement.offsetWidth == 0)
                                    {
                                        htmlElement.offsetWidth = commonHTML.GetDoubleValueFromString(htmlElement.___style.Width, htmlElement.availWidth, this.___HTMLTagRemUnitSize);
                                    }


                                }
                                else
                                {

                                }
                            }
                            goto InputBoundsSetAfter;

                        }

                    case CHtmlElementType.INPUT:
                    case CHtmlElementType.BUTTON:
                    case CHtmlElementType.SELECT:
                        {
                            //string __inputType = "";
                            string __inputSize = "";
                            if (htmlElement.___attributes.ContainsKey("size"))
                            {
                                __inputSize = commonHTML.GetElementAttributeInString(htmlElement, "size");
                            }
                            if (__inputSize.Length != 0)
                            {
                                if (___IsManagedWidthSet == false || ___ManagedControlPossibleWidth <= 0)
                                {
                                    int sizeVal = 0;
                                    int.TryParse(__inputSize, out sizeVal);
                                    if (htmlElement.___elementTagType == CHtmlElementType.INPUT)
                                    {

                                        if (sizeVal > 0)
                                        {
                                            ___ManagedControlPossibleWidth = 20 * sizeVal;
                                            ___IsManagedWidthSet = true;
                                            htmlElement.___offsetWidth = (int)___ManagedControlPossibleWidth;
                                            htmlElement.___style.___Width = ((int)htmlElement.___offsetWidth).ToString() + "px";
                                            htmlElement.___style.StyleCommentAdd("Width is obtained by size.");
                                        }
                                    }
                                    else if (htmlElement.___elementTagType == CHtmlElementType.SELECT)
                                    {
                                        if (sizeVal > 0)
                                        {
                                            ___ManagedControlPossibleHeight = 20 * sizeVal;
                                            ___IsManagedHeightSet = true;
                                            htmlElement.___offsetHeight = (int)___ManagedControlPossibleHeight;
                                            htmlElement.___style.Height = ((int)htmlElement.___offsetHeight).ToString() + "px";
                                            htmlElement.___style.StyleCommentAdd("Height is obtained by size.");
                                            htmlElement.___IsHTMLSelectElementSizeSpecified = true;
                                            if (___IsManagedWidthSet == false)
                                            {
                                                htmlElement.___style.Width = "120px";
                                            }
                                        }

                                        htmlElement.___isCalculateElementBoundsCalled = true;
                                    }
                                }

                                }
                            else
                            {
                                if (htmlElement.___elementTagType == CHtmlElementType.SELECT)
                                {
                                    if (htmlElement.___IsElementVisible == true && (htmlElement.___offsetHeight <= 0 || htmlElement.___offsetWidth <= 0))
                                    {
                                        if (htmlElement.___offsetWidth <= 0)
                                        {
                                            htmlElement.___offsetWidth = 150;
                                            htmlElement.___style.Width = ((int)htmlElement.___offsetWidth).ToString() + "px";
                                            htmlElement.___style.StyleCommentAdd("Width is obtained by size.");
                                            htmlElement.___IsHTMLSelectElementSizeSpecified = true;
                                        }
                                        if (htmlElement.___offsetHeight <= 0)
                                        {
                                            htmlElement.___offsetHeight = 30;
                                            htmlElement.___style.Height = ((int)htmlElement.___offsetHeight).ToString() + "px";
                                            htmlElement.___style.StyleCommentAdd("Height is obtained by size.");
                                            htmlElement.___IsHTMLSelectElementSizeSpecified = true;
                                        }
                                        htmlElement.___isCalculateElementBoundsCalled = true;
                                    }
                                }
                            }

                            if (htmlElement.___elementTagType == CHtmlElementType.INPUT && string.IsNullOrEmpty (htmlElement.___type) == false)
                            {
                                switch (htmlElement.___type)
                                {
                                    case "hidden":
                                        {
                                            htmlElement.___style.Visibility = "hidden";
                                            htmlElement.___IsElementVisible = false;
                                            htmlElement.___offsetTop = 0;
                                            htmlElement.___offsetLeft = 0;
                                            htmlElement.___offsetWidth = 0;
                                            htmlElement.___offsetHeight = 0;
                                            goto InputBoundsSetAfter;
                                        }
                                    case "radio":
                                        {
                                            if (___IsManagedWidthSet == false)
                                            {
                                                htmlElement.___style.Width = "20px";
                                                htmlElement.___offsetWidth = 20;
                                            }
                                            if (___IsManagedHeightSet == false)
                                            {
                                                htmlElement.___style.___Height = "13px";
                                                htmlElement.___offsetHeight = 13;
                                            }

                                            goto InputBoundsSetAfter;
                                        }
                                    case "checkbox":
                                        {
                                            if (___IsManagedWidthSet == false)
                                            {
                                                htmlElement.___style.___Width = "20px";
                                                htmlElement.___offsetWidth = 20;
                                            }
                                            if (___IsManagedHeightSet == false)
                                            {
                                                htmlElement.___style.___Height = "13px";
                                                htmlElement.___offsetHeight = 13;
                                            }

                                            goto InputBoundsSetAfter;
                                        }
                                    case "button":
                                    case "submit":
                                    case "reset":
                                       
                                        break;
                                }





                            }

                        }
                        break;
                    case CHtmlElementType.TEXTAREA:
                        {

                            if (string.IsNullOrEmpty(htmlElement.___style.___Height) == true)
                            {
                                if (htmlElement.___attributes.ContainsKey("rows"))
                                {
                                    double intRows = 0; 
                                    try
                                    {
                                        /*
                                        intRows = commonHTML.getTextAreaColsRowsWith(htmlElement, 1, this.___HtmlGraphics.Font);
                                        */
       
                                        htmlElement.___style.___Height = intRows.ToString() +"px";
                                        if (htmlElement.___offsetHeight  < intRows)
                                        {

                                                htmlElement.___offsetHeight = intRows;
                                            
                                        }
                                        htmlElement.___style.StyleCommentAdd("Height is obtained from rows.");
                                    }
                                    catch
                                    {
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                                        {
                                            commonLog.LogEntry("Parse Textarea Rows");
                                        }

                                    }
                                }
                            }
                            if (string.IsNullOrEmpty(htmlElement.___style.___Width) == true)
                            {
                                if (htmlElement.___elementTagType != CHtmlElementType.FRAMESET && htmlElement.___elementTagType != CHtmlElementType.FRAME)
                                {
                                    if (htmlElement.___attributes.ContainsKey("cols"))
                                    {

                                        double intCols = 0;
                                        try
                                        {
                                            intCols = commonHTML.GetTextAreaColsRowsWith(htmlElement, 2, this.___HtmlGraphics.Font);
                                            if (htmlElement.___availWidth > 0 && htmlElement.___availWidth < intCols)
                                            {
                                                intCols = htmlElement.___availWidth;
                                            }
                                            if (htmlElement.___offsetWidth == 0)
                                            {
                                                htmlElement.___offsetWidth = intCols;
                                            }
                                            htmlElement.___style.___Width = intCols.ToString() +"px";
                                            htmlElement.___style.StyleCommentAdd("Width is obtained from cols " +  ". ;");
                                        }
                                        catch
                                        {
                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                                            {
                                                commonLog.LogEntry("Parse Textarea Cols");
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        }
                }

                #endregion


            InputBoundsSetAfter:
				if(htmlElement.___IsElementVisible == true && htmlElement.___elementTagType != CHtmlElementType.IFRAME && htmlElement.___elementTagType != CHtmlElementType.FRAME)
				{
						
					if(htmlElement.___offsetWidth == 0 || htmlElement.___offsetHeight == 0)
					{
						switch(htmlElement.___elementTagType)
						{
							case CHtmlElementType.INPUT:
								if(string.Equals(htmlElement.type, "text",StringComparison.OrdinalIgnoreCase) == true)
								{
									if(htmlElement.___offsetHeight == 0)
									{
										htmlElement.___offsetHeight = 20;
									}
									if(htmlElement.___offsetWidth == 0)
									{
										htmlElement.___offsetWidth = 200;
									}
								}
								break;
						}
					}
						
				}
			}
			if(htmlElement.___elementTagType == CHtmlElementType.OPTGROUP || htmlElement.___elementTagType == CHtmlElementType.OPTION)
			{
				if(htmlElement.___IsElementVisible == true)
				{
					htmlElement.___IsElementVisible = false;
				}
				if(htmlElement.___offsetWidth != 0)
				{
					htmlElement.___offsetWidth = 0;
				}
				if(htmlElement.___offsetHeight != 0)
				{
					htmlElement.___offsetHeight = 0;
				}
			}
			ManagedControlSecionDone:

			

				// ===============================================================================
				// No All Style sheet attriutes are marged into Element StyePart
				// ===============================================================================
				if(htmlElement.___style != null)
				{
					if(string.IsNullOrEmpty(htmlElement.___style.___Background) == false)
					{
						if(commonHTML.IsStringAutoOrInheritOrZeroOrNone(htmlElement.___style.___Background) == false)
						{
							commonHTML.parseCSSBackgroundString(htmlElement.___style.___Background, htmlElement.___style);
						}
					}

					if(string.IsNullOrEmpty(htmlElement.___style.___BorderColor)== false)
                    {
                        commonHTML.parseBorder_Color(htmlElement.___style, htmlElement.___style.___BorderColor, 0);
					}
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderLeftColor) == false)
                    {
                        commonHTML.parseBorder_Color(htmlElement.___style, htmlElement.___style.___BorderLeftColor, 1);
                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderTopColor) == false)
                    {
                        commonHTML.parseBorder_Color(htmlElement.___style, htmlElement.___style.___BorderTopColor, 2);
                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderRightColor) == false)
                    {
                        commonHTML.parseBorder_Color(htmlElement.___style, htmlElement.___style.___BorderRightColor, 3);
                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderBottomColor) == false)
                    {
                        commonHTML.parseBorder_Color(htmlElement.___style, htmlElement.___style.___BorderBottomColor, 4);
                    }
					if(string.IsNullOrEmpty(htmlElement.___style.___BorderStyle) == false)
					{
                        commonHTML.parseBorder_Style(htmlElement.___style, htmlElement.___style.___BorderStyle, 0);
					}
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderLeftStyle) == false)
                    {
                        commonHTML.parseBorder_Style(htmlElement.___style, htmlElement.___style.___BorderLeftStyle, 1);
                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderTopStyle) == false)
                    {
                        commonHTML.parseBorder_Style(htmlElement.___style, htmlElement.___style.___BorderTopStyle, 2);
                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderRightStyle) == false)
                    {
                        commonHTML.parseBorder_Style(htmlElement.___style, htmlElement.___style.___BorderRightStyle, 3);
                    }

                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderBottomStyle) == false)
                    {
                        commonHTML.parseBorder_Style(htmlElement.___style, htmlElement.___style.___BorderBottomStyle, 4);
                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___Border)== false)
                    {
                        commonHTML.parseCSSBorderString(htmlElement.___style, htmlElement.___style.___Border, 0);
                    }
	
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderLeft) == false)
                    {
                        commonHTML.parseCSSBorderString(htmlElement.___style, htmlElement.___style.___BorderLeft, 1);

                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderTop) == false)
                    {
                        commonHTML.parseCSSBorderString(htmlElement.___style, htmlElement.___style.___BorderTop, 2);

                    }

					if(string.IsNullOrEmpty(htmlElement.___style.BorderRight) == false)
					{
                        commonHTML.parseCSSBorderString(htmlElement.___style, htmlElement.___style.___BorderRight, 3);

					}
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderBottom) ==false)
                    {
                        commonHTML.parseCSSBorderString(htmlElement.___style, htmlElement.___style.___BorderBottom, 4);

                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderWidth) == false)
                    {
                        commonHTML.parseBorder_Width(htmlElement.___style, htmlElement.___style.___BorderWidth, 0, this.___HTMLTagRemUnitSize);
                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderLeftWidth) == false)
                    {
                        commonHTML.parseBorder_Width(htmlElement.___style, htmlElement.___style.___BorderLeftWidth, 1, this.___HTMLTagRemUnitSize);
                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderTopWidth)  == false)
                    {
                        commonHTML.parseBorder_Width(htmlElement.___style, htmlElement.___style.___BorderTopWidth, 2, this.___HTMLTagRemUnitSize);
                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderRightWidth) == false)
                    {
                        commonHTML.parseBorder_Width(htmlElement.___style, htmlElement.___style.___BorderRightWidth, 3, this.___HTMLTagRemUnitSize);
                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderBottomWidth) == false)
                    {
                        commonHTML.parseBorder_Width(htmlElement.___style, htmlElement.___style.___BorderBottomWidth, 4, this.___HTMLTagRemUnitSize);
                    }

					if(string.IsNullOrEmpty(htmlElement.___style.___Margin) == false)
					{
						if(commonHTML.IsStringAutoOrInheritOrZero(htmlElement.___style.___Margin) == false)
						{
							commonHTML.SetCHTMLElementStyleSheet4NameAnd4Value(htmlElement, "margin", htmlElement.___style.___Margin);
						}
						else
						{
							htmlElement.___style.___Margin = "";
							htmlElement.___style.StyleCommentAdd("margin erased. ");
						}
					}
					if(string.IsNullOrEmpty(htmlElement.___style.___Padding) == false)
					{
						if(commonHTML.IsStringAutoOrInheritOrZero(htmlElement.___style.___Padding) == false)
						{
                            if (htmlElement.___style.___cssFloatType == CSSFloatType.Right || htmlElement.___style.___cssFloatType == CSSFloatType.Left)
							{
								htmlElement.___style.___Padding = "";
								htmlElement.___style.StyleCommentAdd("Padding is disabled to float;");
							}
							else
							{
								commonHTML.SetCHTMLElementStyleSheet4NameAnd4Value(htmlElement, "padding", htmlElement.___style.___Padding);
							}
						}
						else
						{
							htmlElement.___style.___Padding = "";
							htmlElement.___style.StyleCommentAdd("Padding value erased;");
							
						}
					}

					// ------------------------------------------------------------------------------------------
					// BackgroundPostionX && BackgroundPositionY should be set after calculating width and height
					// ------------------------------------------------------------------------------------------
					/*
					if(htmlElement.___style.BackgroundPositionX .Length != 0)
					{
						htmlElement.BackgroundPositionX = commonHTML.GetIntValueFromString(htmlElement.___style.BackgroundPositionX , htmlElement.availWidth);
					}
					if(htmlElement.___style.BackgroundPositionY .Length != 0)
					{
						htmlElement.BackgroundPositionY  = commonHTML.GetIntValueFromString(htmlElement.___style.BackgroundPositionY , htmlElement.availHeight);
					}
					*/



                    if (string.IsNullOrEmpty(htmlElement.___style.___BackgroundImage) == false)
                    {
                        commonHTML.parseCSSBackgroundImageIntoMultipleImageData(htmlElement.___style, 0);
                    }

                    if (htmlElement.___styleHover != null && string.IsNullOrEmpty(htmlElement.___styleHover.___BackgroundImage) == false)
                    {
                        commonHTML.parseCSSBackgroundImageIntoMultipleImageData(htmlElement.___styleHover, 0);
                    }


                    if (htmlElement.___elementTagType == CHtmlElementType.LI)
                    {
                        if (string.IsNullOrEmpty(htmlElement.___style.___ListStyleImage) == false)
                        {
                            commonHTML.parseCSSBackgroundImageIntoMultipleImageData(htmlElement.___style, 1);
                        }
                        else if (___tagElementParent != null)
                        {
                            if (___tagElementParent.___elementTagType == CHtmlElementType.UL || ___tagElementParent.___elementTagType == CHtmlElementType.OL)
                            {
                                if (string.IsNullOrEmpty(___tagElementParent.___style.___ListStyleImage) == false)
                                {
                                    htmlElement.___style.___ListStyleImage = string.Copy(___tagElementParent.___style.___ListStyleImage);
                                    commonHTML.parseCSSBackgroundImageIntoMultipleImageData(htmlElement.___style, 1);
                                }
                            }
                        }

                        if (htmlElement.___styleHover != null && string.IsNullOrEmpty(htmlElement.___styleHover.___ListStyleImage) == false)
                        {
                            commonHTML.parseCSSBackgroundImageIntoMultipleImageData(htmlElement.___styleHover, 1);
                        }
                        else if (___tagElementParent != null)
                        {
                            if (___tagElementParent.___elementTagType == CHtmlElementType.UL || ___tagElementParent.___elementTagType == CHtmlElementType.OL)
                            {
                                if (string.IsNullOrEmpty(___tagElementParent.___styleHover.___ListStyleImage) == false)
                                {
                                    htmlElement.___styleHover.___ListStyleImage = string.Copy(___tagElementParent.___styleHover.___ListStyleImage);
                                    commonHTML.parseCSSBackgroundImageIntoMultipleImageData(htmlElement.___styleHover, 1);
                                }
                            }
                        }
                    }
                    if (htmlElement.___style.___multipleBackgroundImageDataSet.Count > 0)
                    {
                        this.___processElementStyleMultipleImageDataImage(htmlElement.___style,  htmlElement);
                    }
                    if(htmlElement.___styleHover.___multipleBackgroundImageDataSet.Count > 0)
                    {
                        this.___processElementStyleMultipleImageDataImage(htmlElement.___styleHover, htmlElement);
                    }

                    if (string.IsNullOrEmpty(htmlElement.___style.___BackgroundPosition) == false)
                    {
                        if (commonHTML.IsStringAutoOrInheritOrZero(htmlElement.___style.___BackgroundPosition) == false)
                        {
                            commonHTML.parseCSSBackgroundPosition(htmlElement.___style, htmlElement.___style.___BackgroundPosition, 0, htmlElement);
                        }
                        else
                        {
                            htmlElement.___style.___BackgroundPosition = null;

                        }
                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___BackgroundRepeat) == false)
                    {
                        if (commonHTML.IsStringAutoOrInheritOrZero(htmlElement.___style.___BackgroundRepeat) == false)
                        {
                            commonHTML.parseCSSBackgroundRepeat(htmlElement.___style, htmlElement.___style.___BackgroundRepeat, 0);
                        }
                        else
                        {
                            htmlElement.___style.___BackgroundRepeat = null;

                        }
                    }
				
					

					

					// ===============================================================================
					// Bound Information wil be applied at this stage
					// ===============================================================================

					// ===============================================================================
					// Width and Height
					// ===============================================================================
					try
					{
                        if (string.IsNullOrEmpty(htmlElement.___style.___Width) == false)
						{
                            if(htmlElement.___style.___isWidthValueSet == false)
                            {
                                htmlElement.___style.Width = htmlElement.___style.___Width;
                            }
                            if (htmlElement.___style.___isWidthValueSet == true && htmlElement.___style.___isWidthValuePercent == false)
							{
                                double __offsetWidthVal = htmlElement.___style.___WidthComputedValue;
                                if(htmlElement.___availWidth >= __offsetWidthVal)
                                {
                                    htmlElement.___offsetWidth = __offsetWidthVal;
                                }
                                else if (htmlElement.___availWidth > 0 && htmlElement.___availWidth < __offsetWidthVal)
                                {
                                    htmlElement.___offsetWidth = htmlElement.___availWidth;
                                }
                                else
                                {
                                    htmlElement.___offsetWidth = __offsetWidthVal;
                                }
                            }
                            else if (htmlElement.___style.___isWidthValuePercent == true)
                            {
                                if (___tagElementParent != null)
                                {
                                    if (___tagElementParent.___availWidth > 0)
                                    {
                                        if (htmlElement.___style.___WidthComputedValue > 0 && htmlElement.___style.___WidthComputedValue <= 3)
                                        {
                                            htmlElement.___offsetWidth = (htmlElement.___style.___WidthComputedValue * ___tagElementParent.___availWidth);
                                            htmlElement.___style.___setStyleSizingMode(CHtmlSizeModeType.Width);
                                            goto WidthPercentCheckDone;
                                        }
                                        else
                                        {
                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                            {
                                                commonLog.LogEntry("Element caluculation for {0} is seems to invalid '{1}' skip now", htmlElement, htmlElement.___style.___WidthComputedValue);
                                                
                                            }
                                            htmlElement.___style.StyleCommentAdd(string.Format("Element caluculation for {0} is seems to invalid '{1}' skip now", htmlElement, htmlElement.___style.___WidthComputedValue));

                                        }
                                    }
                                }
                                else
                                {
                                    htmlElement.___offsetWidth = (htmlElement.___style.___WidthComputedValue * 1000);
                                    htmlElement.___style.___setStyleSizingMode(CHtmlSizeModeType.Width);
                                    goto WidthPercentCheckDone;
                                }
                            }
                        WidthPercentCheckDone:
							if(htmlElement.___offsetWidth  > 0 && htmlElement.___IsElementBlock  == true)
							{
                                if (htmlElement.___style.___styleSizeMode == CHtmlSizeModeType.Width || htmlElement.___style.___styleSizeMode == CHtmlSizeModeType.Both)
                                {
                                    if (htmlElement.___availWidth > htmlElement.___offsetWidth)
                                    {
                                        htmlElement.___availWidth = htmlElement.___offsetWidth;
                                    }
                                }
							}
							else 
							{
								// <a> tag can have width specified
								// 2012/11/12
								if(htmlElement.___offsetWidth  > 0 )
								{
									htmlElement.___availWidth = htmlElement.___offsetWidth;
								}
							}
						}
						if(string.IsNullOrEmpty(htmlElement.___style.___Right) == false)
						{
							if(commonHTML.IsStringAutoOrInheritOrZero(htmlElement.___style.___Right) == false)
							{
								double __RightValue = commonHTML.GetDoubleValueFromString(htmlElement.___style.___Right, htmlElement.___availWidth, this.___HTMLTagRemUnitSize);
								htmlElement.offsetRight_CMZ = __RightValue;
							}
							else
							{
								//htmlElement.___style.Right = "";

							}
						
						}
                        
                        if (string.IsNullOrEmpty(htmlElement.___style.___Height) == false)
						{
                            /*
                            if (string.Compare(htmlElement.___style.___Height, "1%", StringComparison.OrdinalIgnoreCase) == 0 || string.Compare(htmlElement.___style.___Height, "1 %", StringComparison.OrdinalIgnoreCase) == 0)
							{
								htmlElement.___offsetHeight = 0;
                                htmlElement.___style.Height = "";
								htmlElement.___style.StyleCommentAdd("Height 1% has droped");
								goto OffsetHeightDone;

							}
                            else if (htmlElement.___elementTagType != CHtmlElementType.HTML && htmlElement.___elementTagType != CHtmlElementType.BODY && htmlElement.___elementTagType != CHtmlElementType.FRAMESET && htmlElement.___elementTagType != CHtmlElementType.FRAME)
							{
                                if (htmlElement.___style.___Height.EndsWith("%") == true)
								{
									if(htmlElement.___DOM_Level <= 2)
									{
                                        htmlElement.___style.Height = "";
										htmlElement.___style.StyleCommentAdd("Height 100% has droped. it's level < 3.");
										htmlElement.___offsetHeight = 0;
										goto OffsetHeightDone;
									}
									else
									{
										double __parentFixedHeight = HTML.CHtmlDocument.GetExplicitFixedHeightFromParentElement(___tagElementParent);
										if(__parentFixedHeight <= 0)
										{
                                            htmlElement.___style.Height = "";
											htmlElement.___style.StyleCommentAdd("Height 100% has droped.");
											htmlElement.___offsetHeight = 0;
											goto OffsetHeightDone;
										}
										else
										{
											if( __parentFixedHeight <= ___DocumentMinSize.Height)
											{
												htmlElement.___offsetHeight = __parentFixedHeight;
												goto OffsetHeightDone;
											}
											else
											{
                                                htmlElement.___style.Height = "";
												htmlElement.___style.StyleCommentAdd("Height 100% has droped.");
												htmlElement.___offsetHeight = 0;
												goto OffsetHeightDone;
											}

										}

									}
								}
                         
							}
                             */
                     

                            if (commonHTML.IsStringAutoOrInheritOrZeroOrNone(htmlElement.___style.___Height) == false)
							{
                                if (htmlElement.___style.___isHeightValueSet == true && htmlElement.___style.___isHeightValuePercent == false)
                                {
                                    htmlElement.___offsetHeight = htmlElement.___style.___HeightComputedValue;
                                }
                                else if(htmlElement.___style.___isHeightValuePercent == true)
                                {
                                    if (___tagElementParent != null)
                                    {
                                        if (___tagElementParent.___style.___isHeightValueSet == true && ___tagElementParent.___style.___isHeightValuePercent == false)
                                        {
                                            if (htmlElement.___style.___HeightComputedValue >= 0 && htmlElement.___style.___HeightComputedValue <= 3)
                                            {
                                                htmlElement.___offsetHeight = ___tagElementParent.___style.___HeightComputedValue * htmlElement.___style.___HeightComputedValue;
                                                htmlElement.___style.___setStyleSizingMode(CHtmlSizeModeType.Height);
                                                goto OffsetHeightDone;
                                            }
                                            // else case height should be handled as dynamic
                                            
                                        }
                                        if (___tagElementParent.___offsetHeight > 0 && (___tagElementParent.___style.___styleSizeMode == CHtmlSizeModeType.Height || ___tagElementParent.___style.___styleSizeMode == CHtmlSizeModeType.Both))
                                        {
                                            htmlElement.___offsetHeight = ___tagElementParent.___offsetHeight * htmlElement.___style.___HeightComputedValue;
                                            htmlElement.___style.___setStyleSizingMode(CHtmlSizeModeType.Height);
                                        }
                                        if (htmlElement.___IsElementBlock == true)
                                        {
                                            htmlElement.___style.___isHeightDynamicCalculationRequired = true;
                                        }
                                    }
                                  
									goto OffsetHeightDone;
								}
							}
						
							if(htmlElement.___offsetHeight > 0 && htmlElement.___IsElementBlock == true)
							{
								htmlElement.___availHeight = htmlElement.___offsetHeight;
							}
						}
						if(string.IsNullOrEmpty(htmlElement.___style.___Bottom) == false)
						{
						
							if(commonHTML.IsStringAutoOrInherit(htmlElement.___style.___Bottom) == false)
							{
								htmlElement.___style.___IsCssBottomValueDefined = true;
								double __BottomValue = commonHTML.GetDoubleValueFromString(htmlElement.___style.___Bottom, htmlElement.___availHeight, this.___HTMLTagRemUnitSize);
								if(__BottomValue != 0)
								{
									htmlElement.offsetBottom_CMZ = __BottomValue;
								}	
							}
							else
							{
								htmlElement.___style.___IsCssBottomValueDefined = false;
								//htmlElement.___style.Bottom = "";
							}

						}
						else
						{
							htmlElement.___style.___IsCssBottomValueDefined = false;
						}
					OffsetHeightDone:

				
						if(string.IsNullOrEmpty(htmlElement.___style.___Top) == false)
						{
							if(commonHTML.IsStringAutoOrInherit(htmlElement.___style.___Top) == false)
							{
								htmlElement.___style.___IsCssTopValueDefined = true;
								if(htmlElement.___style.___Top[htmlElement.___style.___Top.Length -1] !='%')
								{
									htmlElement.___offsetTop =  commonHTML.GetDoubleValueFromString(htmlElement.___style.___Top,htmlElement.___availHeight, this.___HTMLTagRemUnitSize);
								}
								else
								{
									// ----------------------------------------------------------------------------
									// Top Percentage '%' may result in unexpected top result. To fix the issue
									// ----------------------------------------------------------------------------
									if(htmlElement.PreviousElement != null)
									{
										htmlElement.___offsetTop =  commonHTML.GetDoubleValueFromString(htmlElement.___style.___Top, htmlElement.PreviousElement.___offsetTop + htmlElement.___offsetHeight + 12, this.___HTMLTagRemUnitSize);
									}
									else
									{
                                        if (___tagElementParent != null && (___tagElementParent.___style.___styleSizeMode == CHtmlSizeModeType.Height || ___tagElementParent.___style.___styleSizeMode == CHtmlSizeModeType.Both))
                                        {
                                            htmlElement.___offsetTop = commonHTML.GetDoubleValueFromString(htmlElement.___style.___Top,___tagElementParent.___offsetHeight , this.___HTMLTagRemUnitSize);
                                        }
                                        else
                                        {
                                            htmlElement.___offsetTop = commonHTML.GetDoubleValueFromString(htmlElement.___style.___Top, ___tagElementParent.___availHeight, this.___HTMLTagRemUnitSize);

                                        }
									}

								}
								if(htmlElement.___IsElementBlock == true)
								{
									htmlElement.___availTop = 0;
								}
                                if (htmlElement.___offsetTop < -999)
                                {
                                    htmlElement.___style.StyleCommentAdd("style.top is big negative  over -999. Make it invisible. "+ htmlElement.___offsetTop.ToString());
                                    htmlElement.___style.___Top = "";
                                    
                                    htmlElement.___offsetTop = 0;
                                    htmlElement.___IsElementVisible = false;
                                }
							}
							else
							{
								htmlElement.___style.___Top = "";
								htmlElement.___style.___IsCssTopValueDefined = false;
							}
				
						}
						else
						{
							htmlElement.___style.___IsCssTopValueDefined = false;
						}
						if(string.IsNullOrEmpty(htmlElement.___style.Left) == false)
						{
							if(commonHTML.IsStringAutoOrInherit(htmlElement.___style.Left) == false)
							{
								htmlElement.___style.___IsCssLeftValueDefined = true;
								double ___offsetLeft = 0;
                                if (htmlElement.___style.Left[htmlElement.___style.Left.Length - 1] != '%')
                                {
                                    ___offsetLeft = commonHTML.GetDoubleValueFromString(htmlElement.___style.Left, htmlElement.___availWidth, this.___HTMLTagRemUnitSize);
                                }
                                else
                                {
                                    if (___tagElementParent != null)
                                    {
                                        ___offsetLeft = commonHTML.GetDoubleValueFromString(htmlElement.___style.Left, ___tagElementParent.___availWidth, this.___HTMLTagRemUnitSize);
                                    }
                                    else
                                    {
                                        ___offsetLeft = commonHTML.GetDoubleValueFromString(htmlElement.___style.Left, this.___DocumentMinSize.Width, this.___HTMLTagRemUnitSize);
                                    }
                                }
								if(___offsetLeft >= 0 || ( Math.Abs(___offsetLeft) < htmlElement.___offsetWidth && ___offsetLeft < 0))
								{
									htmlElement.___offsetLeft  =___offsetLeft;
								}
								else
								{
									if(htmlElement.___isElementPositionAbsoluteOrStatic == false)
									{
										htmlElement.___IsElementVisible = false;
										htmlElement.___style.StyleCommentAdd("Left Is Negative. Visivilty Off : " + htmlElement.___style.Left);
									}
									else
									{   // Abosolute Position Can use Negative Value
										htmlElement.___offsetLeft  =___offsetLeft;
									}
								}
								if(htmlElement.___IsElementBlock  == true)
								{
									htmlElement.___availLeft = htmlElement.___availLeft;
								}
							}
							else
							{
								htmlElement.___style.Left = "";
								htmlElement.___style.___IsCssLeftValueDefined = false;
							}
						}
						else
						{
							htmlElement.___style.___IsCssLeftValueDefined = false;
						}
					} 
					catch(Exception ex)
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
						{
							commonLog.LogEntry("___applyElemenetStyleSheets For Bounds", ex);
						}
					}
					// ===============================================================================
					// Margin
					// ===============================================================================
	
					try
					{
                   
                        if (htmlElement.___style.___isMinWidthValueSet  == true)
						{
                            

                                double ___minWidth = htmlElement.___style.___MinWidthComputedValue;
								if(___minWidth < 0)
								{ 
									___minWidth = 0;
								}
								htmlElement.___minWidth = ___minWidth;
                                if (htmlElement.___offsetWidth < ___minWidth)
                                {
                                    htmlElement.___offsetWidth = ___minWidth;
                                    htmlElement.___availWidth = ___minWidth;
                                }

						}
						if(htmlElement.___style.___isMaxHeightValueSet ==true)
						{
							if(commonHTML.IsStringAutoOrInherit(htmlElement.___style.___MaxWidth) == false)
							{

                                double ___maxWidth = htmlElement.___style.___MaxWidthComputedValue;
								if(___maxWidth < 0)
								{ 
									___maxWidth = 0;
								}
								htmlElement.___maxWidth = ___maxWidth;
							}
							else
							{
                                if (htmlElement.___IsElementBlock == true && htmlElement.___availWidth > 0)
                                {
                                    htmlElement.___maxWidth = htmlElement.___availWidth;
                                }
                                htmlElement.___style.___MaxWidth = "";
							}
						}
                        if (htmlElement.___style.___isMinHeightValueSet == true)
						{
                            if (htmlElement.___style.___isMinHeightValuePercent == false)
							{
                                double ___minHeight = htmlElement.___style.___MinHeightComputedValue;

								if(___minHeight < 0)
								{ 
									___minHeight = 0;
								}
								htmlElement.___minHeight = ___minHeight;
                                if (htmlElement.___offsetHeight < ___minHeight)
                                {
                                    htmlElement.___offsetHeight = ___minHeight;
                                }
                                if (htmlElement.___availHeight > ___minHeight)
                                {
                                    htmlElement.___availHeight = ___minHeight;
                                }
                                if (htmlElement.___style.___styleSizeMode == CHtmlSizeModeType.Undefined || htmlElement.___style.___styleSizeMode == CHtmlSizeModeType.Width)
                                {
                                    htmlElement.___style.___setStyleSizingMode(CHtmlSizeModeType.Height);
                                }
							}
							else
							{
                                

							}
						}
                        if (string.IsNullOrEmpty(htmlElement.___style.___MaxHeight) == false)
						{
                            if (commonHTML.IsStringAutoOrInherit(htmlElement.___style.___MaxHeight) == false)
							{
                                double ___maxHeight = commonHTML.GetDoubleValueFromString(htmlElement.___style.___MaxHeight, htmlElement.___availHeight, this.___HTMLTagRemUnitSize);
								if(___maxHeight < 0)
								{ 
									___maxHeight = 0;
								}
								htmlElement.___maxHeight = ___maxHeight;
							}
							else
							{
                                if (htmlElement.___IsElementBlock == true && htmlElement.___availHeight > 0)
                                {
                                    htmlElement.___maxHeight = htmlElement.___availHeight;
                                }
                                htmlElement.___style.___MaxHeight = "";
							}
						}
					}
					catch (Exception ex)
					{
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                        {
                            commonLog.LogEntry("___applyElemenetStyleSheets For Maxheight Error", ex);
                        }
                    }

					// ===============================================================================
					// Padding
					// ===============================================================================
					try
					{
						if(string.IsNullOrEmpty(htmlElement.___style.___PaddingTop) ==false)
						{
							if(commonHTML.IsStringAutoOrInheritOrZero(htmlElement.___style.PaddingTop) == false)
							{
								htmlElement.___paddingTop = commonHTML.GetDoubleValueFromString(htmlElement.___style.PaddingTop,htmlElement.___availHeight, this.___HTMLTagRemUnitSize);
							}
							else
							{
								htmlElement.___style.PaddingTop = "";
							}
							if(htmlElement.___paddingTop < 0)
							{
								htmlElement.___paddingTop = 0;
							}
						}
						if(string.IsNullOrEmpty(htmlElement.___style.___PaddingLeft) == false)
						{
							if(commonHTML.IsStringAutoOrInheritOrZero(htmlElement.___style.PaddingLeft) == false)
							{
								htmlElement.___paddingLeft = commonHTML.GetDoubleValueFromString(htmlElement.___style.PaddingLeft,htmlElement.___availWidth, this.___HTMLTagRemUnitSize);
							}else
							 {
								htmlElement.___style.PaddingLeft = "";
							 }
						}
						if(string.IsNullOrEmpty(htmlElement.___style.___PaddingRight) == false)
						{
							if(commonHTML.IsStringAutoOrInheritOrZero(htmlElement.___style.PaddingRight) == false)
							{
								htmlElement.___paddingRight = commonHTML.GetDoubleValueFromString(htmlElement.___style.PaddingRight,htmlElement.___availWidth, this.___HTMLTagRemUnitSize);
							}
							else
							{
								htmlElement.___style.PaddingRight = "";
							}

						}
						if(string.IsNullOrEmpty(htmlElement.___style.___PaddingBottom) == false)
						{
							if(commonHTML.IsStringAutoOrInheritOrZero(htmlElement.___style.___PaddingBottom) == false)
							{
								htmlElement.___paddingBottom = commonHTML.GetDoubleValueFromString(htmlElement.___style.___PaddingBottom,htmlElement.___availHeight, this.___HTMLTagRemUnitSize);
							}
							else
							{
								htmlElement.___style.___PaddingBottom = "";

							}
						}
					}
					catch(Exception ex)
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
						{
							commonLog.LogEntry("___applyElemenetStyleSheets For Bounds", ex);
						}
					}
					try
					{
						if(string.IsNullOrEmpty(htmlElement.___style.___MaxHeight) == false)
						{
							if(commonHTML.IsStringAutoOrInheritOrZero(htmlElement.___style.___MaxHeight) == false)
							{
								htmlElement.___availHeight = commonHTML.GetDoubleValueFromString(htmlElement.___style.___MaxHeight,  htmlElement.___availHeight, this.___HTMLTagRemUnitSize); 
							}
							else
							{
								htmlElement.___style.___MaxHeight = "";
							}
						}
						if(string.IsNullOrEmpty(htmlElement.___style.___MaxWidth) == false)
						{
							if(commonHTML.IsStringAutoOrInheritOrZero(htmlElement.___style.___MaxWidth) == false)
							{

								htmlElement.___availWidth = commonHTML.GetDoubleValueFromString(htmlElement.___style.___MaxWidth,htmlElement.___availWidth, this.___HTMLTagRemUnitSize);
							}
							else
							{
								htmlElement.___style.___MaxWidth = "";
							}
						}
					}
                    catch (Exception ex)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                        }
                    }
                    // ===============================================================================
                    // CSS OverFlow
                    // ===============================================================================
                    if (string.IsNullOrEmpty(htmlElement.___style.___OverFlow)  == false)
                    {
                        commonHTML.parseCSSOverFlowString(htmlElement.___style, htmlElement.___style.___OverFlow, 0);
                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___OverFlowX) == false)
                    {
                        commonHTML.parseCSSOverFlowString(htmlElement.___style, htmlElement.___style.___OverFlowX, 1);
                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___OverFlowY) == false)
                    {
                        commonHTML.parseCSSOverFlowString(htmlElement.___style, htmlElement.___style.___OverFlowY, 2);
                    }
                 
					// ===============================================================================
					// In Some cases Top , Left is set -1000,-1000, set invisible
					// ===============================================================================
					if(htmlElement.___style != null && htmlElement.___IsElementVisible == true && ( htmlElement.___style.___OverFlowYComputedType != CSSOverFlowType.Visible && htmlElement.___style.___OverFlowYComputedType != CSSOverFlowType.NotSet))
					{
						switch(htmlElement.___style.___OverFlowYComputedType)
						{
							case CSSOverFlowType.Hidden:
							case CSSOverFlowType.Auto:
							case CSSOverFlowType.Scroll:

								int _MaxWidth = (int)Math.Max(htmlElement.___offsetWidth, 0);
								int _MaxHeight = (int)Math.Max(htmlElement.___offsetHeight,0);


								if(_MaxWidth> 0 && _MaxHeight > 0 )
								{
									htmlElement.___HasOverflowHidden = true;
									htmlElement.___StyleOverFlowSize = new SizeF(_MaxWidth, _MaxHeight);
									htmlElement.___style.___OverFlowFromParent = htmlElement.___style.overflow;
									htmlElement.___style.___OverFlowFromParentWidth = _MaxWidth;
									htmlElement.___style.___OverFlowFromParentHeight = _MaxHeight;

									//commonLog.LogEntry("OverFlow has declared with non size '{0}' : {1} x {2}", htmlElement.___style.overflow, htmlElement.___style.OverFlowFromParentWidth, htmlElement.___style.OverFlowFromParentHeight);
							
									htmlElement.___style.___OverFlowElementStart = string.Concat(  htmlElement.___elementOID , htmlElement.___style.overflow,  htmlElement.ToString());
								}
								break;
							default:
								break;
						}
					}
			
					// ===============================================================================
					// Offset Left OverFlow Check
					// ===============================================================================
					if(htmlElement.___IsElementBlock == true && htmlElement.___IsElementVisible == true && ___tagElementParent != null)
					{
						if(___tagElementParent.___availWidth > 0 && htmlElement.___offsetLeft +  htmlElement.___marginLeft + htmlElement.___paddingLeft> 0 && htmlElement.___offsetWidth + htmlElement.___marginLeft + htmlElement.___paddingLeft + htmlElement.___offsetLeft > ___tagElementParent.___availWidth)
						{
							if(___tagElementParent.___availWidth - (htmlElement.___offsetLeft + htmlElement.___marginLeft + htmlElement.___paddingLeft) > 0)
							{
								htmlElement.___offsetWidth = ___tagElementParent.___availWidth - (htmlElement.___offsetLeft + htmlElement.___marginLeft + htmlElement.___paddingLeft);
								htmlElement.___availWidth = htmlElement.___offsetWidth;
                                if (htmlElement.___style.___styleSizeMode == CHtmlSizeModeType.Undefined)
								{
                                    htmlElement.___style.___styleSizeMode = CHtmlSizeModeType.Width;
								}
							}
						}
					}

					// ===============================================================================
					// BackgroundColor Foreground Color
					// ===============================================================================
					try
					{
						if(htmlElement.___style.___IsBackgroundColorSpecified == true && htmlElement.___style.___StyleType == CHtmlElementStyleType.Element)
						{

                                htmlElement.___BackgroundSysColor = htmlElement.___style.___BackgroundSysColor;
								htmlElement.___IsBackgroundColorSpecified = true;
								if(htmlElement.___elementTagType == CHtmlElementType.HTML)
								{
									// BODY Element should not be transparent
									if(htmlElement.___BackgroundSysColor  == Color.Transparent)
									{
										htmlElement.___BackgroundSysColor = Color.White;
									}
								}

						}
						if(htmlElement.___style.___IsForegroundSysColorSpecified == true && htmlElement.___style.___StyleType == CHtmlElementStyleType.Element)
						{
							if(commonHTML.IsStringAutoOrInherit(htmlElement.___style.Color) == false)
							{
                                htmlElement.___ForegroundSysColor = htmlElement.___style.___ForegroundSysColor;
								htmlElement.___IsForegroundColorSpecified = true;
							}
							else
							{
								htmlElement.___style.Color = "";
								if(___tagElementParent !=null)
								{
									htmlElement.___ForegroundSysColor  = ___tagElementParent.___ForegroundSysColor;
									htmlElement.___IsForegroundColorSpecified = true;
								}
								else
								{
									htmlElement.___ForegroundSysColor = Color.Black;
								}

							}
						}
					} 
					catch(Exception ex)
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
						{
							commonLog.LogEntry("BackgroundColor & Foreground Color", ex);
						}
					}
					if(htmlElement.___elementTagType == CHtmlElementType.HTML || htmlElement.___elementTagType == CHtmlElementType.BODY)
					{
						if(htmlElement.___style.___IsBackgroundColorSpecified == true)
						{
							if(commonHTML.IsEqualColor(htmlElement.___BackgroundSysColor, Color.Black) == true)
							{
								if(commonHTML.IsEqualColor(htmlElement.___ForegroundSysColor, Color.Black) == true)
								{
                                    if (string.Equals(htmlElement.___style.backgroundColor, "black",StringComparison.OrdinalIgnoreCase) == false)
                                    {
                                        htmlElement.___BackgroundSysColor = Color.White;
                                        htmlElement.___style.BackgroundColor = "";
                                        htmlElement.___style.StyleCommentAdd("Color is reverted to white");
                                    }
								}
							}
							
						}
					}

					// ===============================================================================
					// Float And Clear
					// ===============================================================================

                        switch (htmlElement.___style.___cssFloatType)
                        {
                            case CSSFloatType.NotSet:

                                htmlElement.___IsElementFloat = false;
                                break;
                            case CSSFloatType.Left:
                            case CSSFloatType.Right:
                            case CSSFloatType.Both:

                                htmlElement.___IsElementFloat = true;
                                break;
                        }
						if(htmlElement.___IsElementBlock == false && htmlElement.___IsElementFloat == true)
						{
                            if (htmlElement.___style.___cssFloatType == CSSFloatType.Right )
							{
								htmlElement.___IsElementBlock = true;
							}
						}
					

                        switch (htmlElement.___style.___cssClearType)
						{
							case CSSElelemntFloatClearType.NotSet:
								htmlElement.___IsElementClear = false;
								break;
                            case CSSElelemntFloatClearType.Left:
                            case CSSElelemntFloatClearType.Right:
                            case CSSElelemntFloatClearType.Both:
								htmlElement.___IsElementClear = true;
								break;
						}

					// ===============================================================================
					// Align
					// ===============================================================================
					try
					{
						if(htmlElement.___elementTagType != CHtmlElementType.TR && string.IsNullOrEmpty(htmlElement.___style.___Align) == false)
						{
							switch(htmlElement.___style.___Align)
							{
								case "left":
									htmlElement.___IsElementAligned = false;
									htmlElement.NodeAlignType = CHtmlElementAlignType.NotSet;
									break;
								case "right":
									htmlElement.___IsElementAligned = true;
									htmlElement.NodeAlignType = CHtmlElementAlignType.Right;
									break;
								case "center":
								case "absmiddle":
								case "middle":
									htmlElement.___IsElementAligned = true;
									htmlElement.NodeAlignType = CHtmlElementAlignType.Middle;
									break;
								case "baseline":
								case "top":
								case "texttop":
									htmlElement.___IsElementAligned = true;
									htmlElement.NodeAlignType = CHtmlElementAlignType.Top;
									break;
								case "absbottom":
								case "bottom":
									htmlElement.___IsElementAligned = true;
									htmlElement.NodeAlignType = CHtmlElementAlignType.Bottom;
									break;
								default:
									htmlElement.___IsElementAligned = false;
									break;
							}
		
						}
						else if(htmlElement.___elementTagType == CHtmlElementType.CENTER)
						{
							htmlElement.___IsElementAligned = true;
							htmlElement.NodeAlignType = CHtmlElementAlignType.Middle;
						}
					}
                    catch (Exception ex)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                        }
                    }
                    /* We do not inherits parent Align Type
					if(___tagElementParent  != null && ___tagElementParent .NodeAlignType != .CHtmlElementAlignType.NotSet)
					{
						htmlElement.NodeInheritedAlignType = ___tagElementParent.NodeAlignType;
					}
                     */
					if(htmlElement.NodeAlignType == CHtmlElementAlignType.NotSet)
					{
						if(___tagElementParent != null && ___tagElementParent.NodeInheritedAlignType != CHtmlElementAlignType.NotSet)
						{
							htmlElement.NodeAlignType = ___tagElementParent.NodeInheritedAlignType;
						}
					}
                    // ===============================================================================
                    // Style CSS Cllip
                    // ===============================================================================
                    if (string.IsNullOrEmpty(htmlElement.___style.___Clip) == false)
                    {
                        if (string.Equals(htmlElement.___style.___Clip, "auto", StringComparison.OrdinalIgnoreCase) == false)
                        {
                            htmlElement.___style.___ClipComputedValue = commonHTML.GetRectangleFromStringValue(htmlElement.___style.___Clip);
                            htmlElement.___style.___IsClipSpedified = true;
                        }
                        else
                        {
                            htmlElement.___style.___IsClipSpedified = false;
                        }
                    }
                    // ===============================================================================
                    // Style CSS Background-Size
                    // ===============================================================================
                    if (string.IsNullOrEmpty(htmlElement.___style.___BackgroundSize) == false)
                    {
                        commonHTML.parseCSSBackgroundSize(htmlElement.___style, htmlElement.___style.___BackgroundSize, this.___HTMLTagRemUnitSize, htmlElement);
                    }
                    if (string.IsNullOrEmpty(htmlElement.___styleHover.___BackgroundSize) == false)
                    {
                        commonHTML.parseCSSBackgroundSize(htmlElement.___styleHover, htmlElement.___styleHover.___BackgroundSize, this.___HTMLTagRemUnitSize, htmlElement);
                    }

					// ===============================================================================
					// Style Parent RelationShip
					// ===============================================================================
					if(htmlElement.___style.___ownerElementWeakReference  == null)
					{
                        htmlElement.___style.___ownerElementWeakReference = new WeakReference(htmlElement, false);
					}


					// ===============================================================================
					// TextIndent (will be set and parsed on style element
					// ===============================================================================

                    /* -------------------------------------------------------------------------
                     * this is should be set from style element
                     *  ------------------------------------------------------------------------
                    if (htmlElement.___TextIndentStyleParsed <= -100)
                    {
                        htmlElement.___IsTextRenderSkip = true;
                    }
                    */

					if(htmlElement.___IsTextRenderSkip == false)
					{
						if(___tagElementParent != null && ___tagElementParent.___IsTextRenderSkip == true)
						{
							htmlElement.___IsTextRenderSkip = true;
						}
					}

					// ===============================================================================
					// Line Height
					// ===============================================================================
					if(htmlElement.___IsTextRenderSkip == false && string.IsNullOrEmpty(htmlElement.___style.___LineHeight) == false)
					{
						try
						{
                            double ___doubleLineHeight = commonHTML.GetDoubleValueFromString(htmlElement.___style.___LineHeight,16, this.___HTMLTagRemUnitSize);
                            if (___doubleLineHeight > 0 && ___doubleLineHeight <= 50)
                            {
                                htmlElement.___style.___LineHeightComputedValue = ___doubleLineHeight;
                                /*
                                if (htmlElement.___elementTagType != CHtmlElementType.BODY && htmlElement.___elementTagType != CHtmlElementType.HTML)
                                {
                                    if (htmlElement.___style.___LineHeightComputedValue > 0 && htmlElement.___offsetHeight > 0 && htmlElement.___style.___LineHeightComputedValue > htmlElement.___offsetHeight)
                                    {

                                        htmlElement.___IsTextRenderSkip = true;

                                    }
                                }
                                 */
                            }
                            else
                            {
                                htmlElement.___style.StyleCommentAdd("line height value is too big. Ignore now. ");
                            }
						}
                        catch (Exception ex)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                            }
                        }
					}

                    // ===============================================================================
                    // CSS3 Border Radius Section
                    // ===============================================================================
                    // Note)
                    // Border-Radius -> border-top-right-radius
                    // 
                    // [Current Style]
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderRadius) == false)
                    {
                        htmlElement.___style.___parseBorderRadiusMain();
                    }
                    // [Hover Style]
                    if (htmlElement.___styleHover != null && string.IsNullOrEmpty(htmlElement.___styleHover.___BorderRadius) == false)
                    {
                        htmlElement.___styleHover.___parseBorderRadiusMain();
                    }
                    // [Active Style]
                    if (htmlElement.___styleActive != null && string.IsNullOrEmpty(htmlElement.___styleActive.___BorderRadius) == false)
                    {
                        htmlElement.___styleActive.___parseBorderRadiusMain();
                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderTopLeftRadius) == false)
                    {
                        htmlElement.___style.___parseBorderRadiusSideCornerString(1, this.___HTMLTagRemUnitSize);
                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderTopRightRadius) == false)
                    {
                        htmlElement.___style.___parseBorderRadiusSideCornerString(2, this.___HTMLTagRemUnitSize);
                    }

                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderBottomRightRadius) ==  false)
                    {
                        htmlElement.___style.___parseBorderRadiusSideCornerString(3, this.___HTMLTagRemUnitSize);
                    }
                    if (string.IsNullOrEmpty(htmlElement.___style.___BorderBottomLeftRadius) == false)
                    {
                        htmlElement.___style.___parseBorderRadiusSideCornerString(4, this.___HTMLTagRemUnitSize);
                    }

					// ===============================================================================
					// Image Background Position 
					// ===============================================================================
					if(string.IsNullOrEmpty(htmlElement.___style.___BackgroundPositionX)== false)
					{
						if(commonHTML.IsStringAutoOrInherit(htmlElement.___style.___BackgroundPositionX) == false)
						{
							if(commonHTML.LeftCenterRightStringSortedList.ContainsKey(htmlElement.___style.___BackgroundPositionX ) == true)
							{
								switch(htmlElement.___style.___BackgroundPositionX)
								{
									case "left":
										htmlElement.___BackgroundPositionX = 0;
										break;
									case "center":
										htmlElement.___BackgroundPositionX = 0;// Defined at Draw Time
										break;
									case "right":
										htmlElement.___BackgroundPositionX = 0;// Defined at Draw Time
										break;
								}

							}
							else
							{
								htmlElement.___BackgroundPositionX = commonHTML.GetDoubleValueFromString(htmlElement.___style.___BackgroundPositionX , htmlElement.___availWidth, this.___HTMLTagRemUnitSize);
							}
						}
						else
						{
							htmlElement.___style.___BackgroundPositionX = "";
						}
					}
					if(string.IsNullOrEmpty(htmlElement.___style.___BackgroundPositionY) == false)
					{
						if(commonHTML.IsStringAutoOrInherit(htmlElement.___style.___BackgroundPositionY) == false)
						{
							if(commonHTML.TopCenterBottomStringSortedList.ContainsKey( htmlElement.___style.___BackgroundPositionY ) == true)
							{
								switch(htmlElement.___style.___BackgroundPositionY)
								{
									case "top":
										htmlElement.___BackgroundPositionY = 0;
										break;
									case "center":
										htmlElement.___BackgroundPositionY = 0;// Defined at Draw Time
										break;
									case "bottom":
										htmlElement.___BackgroundPositionY = 0; // Defined at Draw Time
										break;
								}

							}
							else
							{
								htmlElement.___BackgroundPositionY  = commonHTML.GetDoubleValueFromString(htmlElement.___style.___BackgroundPositionY , htmlElement.___availHeight, this.___HTMLTagRemUnitSize);
							}
						}
						else
						{
							htmlElement.___style.___BackgroundPositionY = "";
						}
					}	
				}
            //ApplyStylesSheetsFinalStage:
			if(htmlElement.___style.___styleConditionType  != CSSStyleConditionType.MergedToElement)
			{
				htmlElement.___style.___styleConditionType  = CSSStyleConditionType.MergedToElement;
			}
			if(htmlElement.___IsElementBlock == false)
			{
				if(htmlElement.___ElementInlineLevel <= 0)
				{
                    if (commonHTML.elementTagTypesNormallyBlockSortedList.ContainsKey(htmlElement.___elementTagType) == false)
                    {
                        if (___tagElementParent != null)
                        {
                            htmlElement.___ElementInlineLevel = ___tagElementParent.___ElementInlineLevel + 1;
                        }
                        else
                        {
                            htmlElement.___ElementInlineLevel++;

                        }

                    }
				}
			}

			/*
			if(htmlElement.styleBeforeList != null && htmlElement.styleBeforeList.Count > 0)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel > 10)
				{
					
				}
			}
			*/

			if(htmlElement.___IsElementVisible == true)
			{
				if(___tagElementParent  != null && ___tagElementParent.___elementTagType == CHtmlElementType.IFRAME)
				{
					htmlElement.___IsElementVisible = false;
				}
				// ===============================================================================
				// Create Z-Indexed Child List
				// ===============================================================================
			
				if(htmlElement.___style.___zIndexValue > 0)
				{
					if(___tagElementParent != null)
					{
						if(___tagElementParent.___ZIndexedChildElementList  == null)
						{
							___tagElementParent.___ZIndexedChildElementList  = new System.Collections.Generic.List<CHtmlElement>();
						}
                
						___tagElementParent.___ZIndexedChildElementList.Add(htmlElement);
					}
				}
			}
			if(___tagElementParent != null && ___tagElementParent.___elementTagType == CHtmlElementType.P)
			{
				if(commonHTML.elementTagTypesSentenceSortedList.ContainsKey(htmlElement.___elementTagType) == true)
				{
					if(htmlElement.___ElementInlineLevel <= 1)
					{
						htmlElement.___ElementInlineLevel = ___tagElementParent.___ElementInlineLevel + 2;
					}
					if(htmlElement.___IsElementBlock == true)
					{
						htmlElement.X_DOM_ProcessorAdd("P child is becomes inline with it's tag");
						htmlElement.___IsElementBlock = false;
					}
                    if (htmlElement.___style.___cssDisplayComputedValueType == CSSDisplayType.Block)
					{
                        htmlElement.___style.___cssDisplayComputedValueType = CSSDisplayType.Inline;
					}
				}
			}
            // ===============================================================================
            // Generates Font Info
            // ===============================================================================
            this.___CreateCHtmlFontInfoInfoForElementAndHoverStyle(htmlElement);
            if (htmlElement.___elementTagType == CHtmlElementType.HTML)
            {
                if (this.___HTMLTagRemUnitSize == -1)
                {
                    if (string.IsNullOrEmpty(htmlElement.___style.fontSize) == false)
                    {
                        if (htmlElement.___style.___StyleFontInfo != null && htmlElement.___style.___StyleFontInfo.FontSize > 0)
                        {
                            htmlElement.___style.StyleCommentAdd("HTML Element has font size defined as " + htmlElement.___style.___StyleFontInfo.FontSize);
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                            {
                                commonLog.LogEntry("HTML Element has font size defined : {0}", htmlElement.___style.___StyleFontInfo.FontSize);
                            }
                            this.___HTMLTagRemUnitSize = htmlElement.___style.___StyleFontInfo.FontSize;
                        }
                    }
                }
            }

			switch(htmlElement.___elementTagType)
			{
				case CHtmlElementType.BR:
					if(htmlElement.___IsElementVisible == false)
					{
						htmlElement.___IsElementVisible = true;
						htmlElement.___style.StyleCommentAdd("BR is always visible; ");
					}
					if(htmlElement.___isElementPositionAbsoluteOrStatic == true)
					{
						htmlElement.___style.position = "relative";
						htmlElement.___style.StyleCommentAdd("BR needs to be relative; ");
					}
					if(htmlElement.___IsElementBlock == false)
					{
						htmlElement.___IsElementBlock = true;
						htmlElement.___style.StyleCommentAdd("BR is always block; ");

					}
					if(string.IsNullOrEmpty(htmlElement.___style.___Top) == false)
					{
						htmlElement.___style.___Top = "";
						htmlElement.___style.StyleCommentAdd("top is removed due to block; ");
					}
					break;
				case CHtmlElementType.TT:
				case CHtmlElementType.XMP:
				case CHtmlElementType.PRE:
				case CHtmlElementType.CODE:
					if(htmlElement.___IsElementBlock == false)
					{
						htmlElement.X_DOM_ProcessorAdd("Inline element is not allowed for this tag; ");
						htmlElement.___IsElementBlock = true;
					}
					break;
				default:
					break;
			}
			htmlElement.___isApplyElemenetStyleSheetCalled = true;
            htmlElement.___style.___isApplyElemenetStyleSheetsForElementDone = true;
            htmlElement.___IsElementofffsetParentPointCaluculationRequired = true;
		}
        #endregion


        internal void ___applyElementsStyleSheetsForRecaluculationForRootChangedElement(CHtmlElement ___element)
        {


            DateTime dtStart = dtStart = DateTime.Now;
            
            ushort ___reachedLevel = 0;

            try
            {

                if (___element == null)
                {
                    
                    return;
                }
                if (___element.___IsDynamicElement == true && ___element.___IsDynamicProcessDone == false)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                    {
                        commonLog.LogEntry(" ___applyElementsStyleSheetsForRecaluculationForRootChangedElement('" + ___element.ToString() + "') has skiped.... ");
                    }
                    ___element.___isApplyElemenetStyleSheetCalled = true;
                    return;
                }
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                {
                    commonLog.LogEntry(" ___applyElementsStyleSheetsForRecaluculationForRootChangedElement('" + ___element.ToString() + "') has entered... ");
                }


                if (this.___cssRuleGroundList != null)
                {
                    ___ElementCountAffectedByCSSRecaluculation = 0;
                    ___reachedLevel = 1;
                    ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(___element, true, 1);
                    int childCount2 = ___element.___childNodes.Count;

                    for (int l2 = 0; l2 < childCount2; l2++)
                    {
                        CHtmlElement childElement2 = ___element.___childNodes[l2] as CHtmlElement;
                        if (childElement2 != null)
                        {
                            if (commonHTML.IsElemeneITextOrIDraw(childElement2) == false && childElement2.___IsNoScriptBlock == false)
                            {
                                if (___reachedLevel < 2)
                                {
                                    ___reachedLevel = 2;
                                }
                                ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement2, true, 2);
                                int childCount3 = childElement2.___childNodes.Count;
                                for (int l3 = 0; l3 < childCount3; l3++)
                                {
                                    CHtmlElement childElement3 = childElement2.___childNodes[l3] as CHtmlElement;
                                    if (childElement3 != null && childElement3.___IsNoScriptBlock == false)
                                    {
                                        if (commonHTML.IsElemeneITextOrIDraw(childElement3) == false)
                                        {
                                            if (___reachedLevel < 3)
                                            {
                                                ___reachedLevel = 3;
                                            }
                                            ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement3, true, 3);
                                            int childCount4 = childElement3.___childNodes.Count;
                                            for (int l4 = 0; l4 < childCount4; l4++)
                                            {
                                                CHtmlElement childElement4 = childElement3.___childNodes[l4] as CHtmlElement;
                                                if (childElement4 != null && childElement4.___IsNoScriptBlock == false)
                                                {
                                                    if (commonHTML.IsElemeneITextOrIDraw(childElement4) == false)
                                                    {
                                                        if (___reachedLevel < 4)
                                                        {
                                                            ___reachedLevel = 4;
                                                        }
                                                        ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement4, true, 4);
                                                        int childCount5 = childElement4.___childNodes.Count;
                                                        for (int l5 = 0; l5 < childCount5; l5++)
                                                        {
                                                            CHtmlElement childElement5 = childElement4.___childNodes[l5] as CHtmlElement;
                                                            if (childElement5 != null && childElement5.___IsNoScriptBlock == false)
                                                            {
                                                                if (commonHTML.IsElemeneITextOrIDraw(childElement5) == false)
                                                                {
                                                                    if (___reachedLevel < 5)
                                                                    {
                                                                        ___reachedLevel = 5;
                                                                    }
                                                                    ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement5, true, 5);
                                                                    int childCount6 = childElement5.___childNodes.Count;
                                                                    for (int l6 = 0; l6 < childCount6; l6++)
                                                                    {
                                                                        CHtmlElement childElement6 = childElement5.___childNodes[l6] as CHtmlElement;
                                                                        if (childElement6 != null && childElement6.___IsNoScriptBlock == false)
                                                                        {
                                                                            if (commonHTML.IsElemeneITextOrIDraw(childElement6) == false)
                                                                            {
                                                                                if (___reachedLevel < 6)
                                                                                {
                                                                                    ___reachedLevel = 6;
                                                                                }
                                                                                ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement6, true, 6);
                                                                                int childCount7 = childElement6.___childNodes.Count;
                                                                                for (int l7 = 0; l7 < childCount7; l7++)
                                                                                {
                                                                                    CHtmlElement childElement7 = childElement6.___childNodes[l7] as CHtmlElement;
                                                                                    if (childElement7 != null)
                                                                                    {
                                                                                        if (commonHTML.IsElemeneITextOrIDraw(childElement7) == false)
                                                                                        {
                                                                                            if (___reachedLevel < 7)
                                                                                            {
                                                                                                ___reachedLevel = 7;
                                                                                            }
                                                                                            ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement7, true, 7);
                                                                                            int childCount8 = childElement7.___childNodes.Count;
                                                                                            for (int l8 = 0; l8 < childCount8; l8++)
                                                                                            {
                                                                                                CHtmlElement childElement8 = childElement7.___childNodes[l8] as CHtmlElement;
                                                                                                if (childElement8 != null)
                                                                                                {
                                                                                                    if (commonHTML.IsElemeneITextOrIDraw(childElement8) == false && childElement8.___IsNoScriptBlock == false)
                                                                                                    {
                                                                                                        if (___reachedLevel < 8)
                                                                                                        {
                                                                                                            ___reachedLevel = 8;
                                                                                                        }
                                                                                                        ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement8, true, 8);
                                                                                                        int childCount9 = childElement8.___childNodes.Count;
                                                                                                        for (int l9 = 0; l9 < childCount9; l9++)
                                                                                                        {
                                                                                                            CHtmlElement childElement9 = childElement8.___childNodes[l9] as CHtmlElement;
                                                                                                            if (childElement9 != null)
                                                                                                            {
                                                                                                                if (commonHTML.IsElemeneITextOrIDraw(childElement9) == false && childElement9.___IsNoScriptBlock == false)
                                                                                                                {
                                                                                                                    if (___reachedLevel < 9)
                                                                                                                    {
                                                                                                                        ___reachedLevel = 9;
                                                                                                                    }
                                                                                                                    ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement9, true, 9);

                                                                                                                    int childCount10 = childElement9.___childNodes.Count;
                                                                                                                    for (int l10 = 0; l10 < childCount10; l10++)
                                                                                                                    {
                                                                                                                        CHtmlElement childElement10 = childElement9.___childNodes[l10] as CHtmlElement;
                                                                                                                        if (childElement10 != null && childElement10.___IsNoScriptBlock == false)
                                                                                                                        {
                                                                                                                            if (commonHTML.IsElemeneITextOrIDraw(childElement10) == false)
                                                                                                                            {
                                                                                                                                if (___reachedLevel < 10)
                                                                                                                                {
                                                                                                                                    ___reachedLevel = 10;
                                                                                                                                }
                                                                                                                                ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement10, true, 10);

                                                                                                                                int childCount11 = childElement10.___childNodes.Count;
                                                                                                                                for (int l11 = 0; l11 < childCount11; l11++)
                                                                                                                                {
                                                                                                                                    CHtmlElement childElement11 = childElement10.___childNodes[l11] as CHtmlElement;
                                                                                                                                    if (childElement11 != null && childElement11.___IsNoScriptBlock == false)
                                                                                                                                    {
                                                                                                                                        if (commonHTML.IsElemeneITextOrIDraw( childElement11) == false)
                                                                                                                                        {
                                                                                                                                            if (___reachedLevel < 11)
                                                                                                                                            {
                                                                                                                                                ___reachedLevel = 11;
                                                                                                                                            }
                                                                                                                                            ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement11, true, 11);
                                                                                                                                            int childCount12 = childElement11.___childNodes.Count;
                                                                                                                                            for (int l12 = 0; l12 < childCount12; l12++)
                                                                                                                                            {
                                                                                                                                                CHtmlElement childElement12 = childElement11.___childNodes[l12] as CHtmlElement;
                                                                                                                                                if (childElement12 != null && childElement12.___IsNoScriptBlock == false)
                                                                                                                                                {
                                                                                                                                                    if (commonHTML.IsElemeneITextOrIDraw(childElement12) == false)
                                                                                                                                                    {
                                                                                                                                                        if (___reachedLevel < 12)
                                                                                                                                                        {
                                                                                                                                                            ___reachedLevel = 12;
                                                                                                                                                        }
                                                                                                                                                        ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement12, true, 12);
                                                                                                                                                        int childCount13 = childElement12.___childNodes.Count;
                                                                                                                                                        for (int l13 = 0; l13 < childCount13; l13++)
                                                                                                                                                        {
                                                                                                                                                            CHtmlElement childElement13 = childElement12.___childNodes[l13] as CHtmlElement;
                                                                                                                                                            if (childElement13 != null && childElement13.___IsNoScriptBlock == false)
                                                                                                                                                            {
                                                                                                                                                                if (commonHTML.IsElemeneITextOrIDraw(childElement13) == false)
                                                                                                                                                                {
                                                                                                                                                                    if (___reachedLevel < 13)
                                                                                                                                                                    {
                                                                                                                                                                        ___reachedLevel = 13;
                                                                                                                                                                    }
                                                                                                                                                                    ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement13, true, 13);
                                                                                                                                                                    int childCount14 = childElement13.___childNodes.Count;
                                                                                                                                                                    for (int l14 = 0; l14 < childCount14; l14++)
                                                                                                                                                                    {
                                                                                                                                                                        CHtmlElement childElement14 = childElement13.___childNodes[l14] as CHtmlElement;
                                                                                                                                                                        if (childElement14 != null && childElement14.___IsNoScriptBlock == false)
                                                                                                                                                                        {
                                                                                                                                                                            if (commonHTML.IsElemeneITextOrIDraw(childElement14) == false)
                                                                                                                                                                            {
                                                                                                                                                                                if (___reachedLevel < 14)
                                                                                                                                                                                {
                                                                                                                                                                                    ___reachedLevel = 14;
                                                                                                                                                                                }
                                                                                                                                                                                ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement14, true, 14);
                                                                                                                                                                                int childCount15 = childElement14.___childNodes.Count;
                                                                                                                                                                                for (int l15 = 0; l15 < childCount15; l15++)
                                                                                                                                                                                {
                                                                                                                                                                                    CHtmlElement childElement15 = childElement14.___childNodes[l15] as CHtmlElement;
                                                                                                                                                                                    if (childElement15 != null && childElement15.___IsNoScriptBlock == false)
                                                                                                                                                                                    {
                                                                                                                                                                                        if (commonHTML.IsElemeneITextOrIDraw(childElement15) == false)
                                                                                                                                                                                        {
                                                                                                                                                                                            if (___reachedLevel < 15)
                                                                                                                                                                                            {
                                                                                                                                                                                                ___reachedLevel = 15;
                                                                                                                                                                                            }
                                                                                                                                                                                            ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement15, true, 15);
                                                                                                                                                                                            int childCount16 = childElement15.___childNodes.Count;
                                                                                                                                                                                            for (int l16 = 0; l16 < childCount16; l16++)
                                                                                                                                                                                            {
                                                                                                                                                                                                CHtmlElement childElement16 = childElement15.___childNodes[l16] as CHtmlElement;
                                                                                                                                                                                                if (childElement16 != null && childElement16.___IsNoScriptBlock == false)
                                                                                                                                                                                                {
                                                                                                                                                                                                    if (commonHTML.IsElemeneITextOrIDraw(childElement16) == false)
                                                                                                                                                                                                    {
                                                                                                                                                                                                        if (___reachedLevel < 16)
                                                                                                                                                                                                        {
                                                                                                                                                                                                            ___reachedLevel = 16;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement16, true, 16);
                                                                                                                                                                                                        int childCount17 = childElement16.___childNodes.Count;
                                                                                                                                                                                                        for (int l17 = 0; l17 < childCount17; l17++)
                                                                                                                                                                                                        {
                                                                                                                                                                                                            CHtmlElement childElement17 = childElement16.___childNodes[l17] as CHtmlElement;
                                                                                                                                                                                                            if (childElement17 != null && childElement17.___IsNoScriptBlock == false)
                                                                                                                                                                                                            {
                                                                                                                                                                                                                if (commonHTML.IsElemeneITextOrIDraw(childElement17) == false)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    if (___reachedLevel < 17)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        ___reachedLevel = 17;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement17, true, 17);
                                                                                                                                                                                                                    int childCount18 = childElement17.___childNodes.Count;
                                                                                                                                                                                                                    for (int l18 = 0; l18 < childCount18; l18++)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        CHtmlElement childElement18 = childElement17.___childNodes[l17] as CHtmlElement;
                                                                                                                                                                                                                        if (childElement18 != null && childElement18.___IsNoScriptBlock == false)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            if (commonHTML.IsElemeneITextOrIDraw(childElement18) == false)
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                if (___reachedLevel < 18)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    ___reachedLevel = 18;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement18, true, 18);
                                                                                                                                                                                                                                int childCount19 = childElement18.___childNodes.Count;
                                                                                                                                                                                                                                for (int l19 = 0; l19 < childCount19; l19++)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    CHtmlElement childElement19 = childElement18.___childNodes[l19] as CHtmlElement;
                                                                                                                                                                                                                                    if (childElement19 != null && childElement19.___IsNoScriptBlock == false)
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        if (commonHTML.IsElemeneITextOrIDraw(childElement19) == false)
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            if (___reachedLevel < 19)
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                ___reachedLevel = 19;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement19, true, 19);
                                                                                                                                                                                                                                            int childCount120 = childElement19.___childNodes.Count;
                                                                                                                                                                                                                                            for (int l20 = 0; l20 < childCount120; l20++)
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                CHtmlElement childElement20 = childElement19.___childNodes[l20] as CHtmlElement;
                                                                                                                                                                                                                                                if (childElement20 != null && childElement20.___IsNoScriptBlock == false)
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    if (commonHTML.IsElemeneITextOrIDraw(childElement20) == false)
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        if (___reachedLevel < 20)
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            ___reachedLevel = 20;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(childElement20, false, 20);


                                                                                                                                                                                                                                                    }

                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                {
                    commonLog.LogEntry(" ___applyElementsStyleSheetsForRecaluculationForRootChangedElement('" + ___element.ToString() + "') has exception", ex);
                }
            }
                       
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
            {
                TimeSpan tpSpan = DateTime.Now.Subtract(dtStart);
                commonLog.LogEntry(" ___applyElementsStyleSheetsForRecaluculationForRootChangedElement('{0}') processed with {1} ms {2}  elements recaluculated with {3} levels...", ___element, tpSpan.TotalMilliseconds, this.___ElementCountAffectedByCSSRecaluculation, ___reachedLevel);
                // note) 
                // Recursive call 266 ms = 955 elements
                //
                // Fow Loop : 350 ms << 
            }
            this.___ImageArrivalLatestTime = DateTime.Now;
        }

        internal void ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(CHtmlElement ___element, bool ___ElementOnly, ushort ___callingLevel)
        {
            try
            {
                ___ElementCountAffectedByCSSRecaluculation++;
                if (commonHTML.elementTagTypesNeverSeachStyleSheetSortedList.ContainsKey(___element.___elementTagType) == false)
                {
                    /*
                    double ___oldWidth = 0;
                    double ___oldHeight = 0;
                    CSSFloatType ___oldCSSFloatType = CSSFloatType.NotSet;
                     */
                    ___element.___IsElementVisible = true;
                    if (___element.___stylesheetsForNextNodeList != null && ___element.___stylesheetsForNextNodeList.Count != 0)
                    {
                        ___element.___stylesheetsForNextNodeList.Clear();
                    }
                    if (___element.___stylesheetsForCurrentNodeList != null && ___element.___stylesheetsForCurrentNodeList.Count != 0)
                    {
                        ___element.___stylesheetsForCurrentNodeList.Clear();
                    }
                    ___element.___IsStyleListSortedByHitForThisNode = false;
                    if (___element.___style != null)
                    {
                        /* Do not clear Style Element
                        ___element.___style = null;
                        ___element.___style = new CHtmlCSSStyleSheet(CHtmlElementStyleType.Element);
                        ___element.___style.___ownerElementWeakReference = new WeakReference(___element, false);
                         */
                        ___element.___style.___clearCriticalStyleAttributesBeforeRecalulations();
                        

                        /*
                        if (string.IsNullOrEmpty(___element.___style.___Display) == false)
                        {
                            ___element.___style.___Display = null;
                            ___element.___style.___cssDisplayComputedValueType = CSSDisplayType.UNKNOWN; 
                        }
                        if (string.IsNullOrEmpty(___element.___style.___cssFloat ) == false)
                        {
                            ___element.___style.___cssFloat = null;
                            ___element.___style.___cssFloatType = CSSFloatType.NotSet;
                        }
                        if (string.IsNullOrEmpty(___element.___style.___Width) == false)
                        {
                            ___element.___style.___Width = null;
                        }
                        if (string.IsNullOrEmpty(___element.___style.___MaxWidth) == false)
                        {
                            ___element.___style.___MaxWidth = null;
                        }
                        if (string.IsNullOrEmpty(___element.___style.___MinWidth) == false)
                        {
                            ___element.___style.___MinWidth = null;
                        }
                        if (string.IsNullOrEmpty(___element.___style.___Height) == false)
                        {
                            ___element.___style.___Height = null;
                        }
                        if (string.IsNullOrEmpty(___element.___style.___MaxHeight ) == false)
                        {
                            ___element.___style.___MaxHeight = null;
                        }
                        if (string.IsNullOrEmpty(___element.___style.___MinHeight) == false)
                        {
                            ___element.___style.___MinHeight = null;
                        }
                        if (string.IsNullOrEmpty(___element.___style.___OverFlow) == false)
                        {
                            ___element.___style.___OverFlow = null;
                        }
                        if (string.IsNullOrEmpty(___element.___style.___OverFlowX) == false)
                        {
                            ___element.___style.___OverFlowX = null;
                        }
                        if (string.IsNullOrEmpty(___element.___style.___OverFlowY) == false)
                        {
                            ___element.___style.___OverFlowY = "";
                        }
                        ___element.___style.___OverFlowXComputedType = CSSOverFlowType.NotSet;
                        ___element.___style.___OverFlowYComputedType = CSSOverFlowType.NotSet;
                        
                        if (string.IsNullOrEmpty(___element.___style.___OverFlowFromParent) == false)
                        {
                            ___element.___style.___OverFlowFromParent = null;
                        }
                        if (string.IsNullOrEmpty(___element.___style.zIndex) == false)
                        {
                            ___element.___style.zIndex = null;
                        }
                        if (___element.___style.___zIndexValue != 0)
                        {
                            ___element.___style.___zIndexValue = 0;
                        }
                         */
                        if (___element.___ZIndexedChildElementList != null && ___element.___ZIndexedChildElementList.Count > 0)
                        {
                            ___element.___ZIndexedChildElementList = null;
                            ___element.___ZIndexedChildElementList = new System.Collections.Generic.List<CHtmlElement>();
                        }

                    }
                    ___element.___isApplyElemenetStyleSheetCalled = false;
                    this.___cssRuleGroundList.CreateCHtmlStyleElementCandidateListIntoElement(___element);
                    if (___element.___stylesheetsForNextNodeList.Count > 1)
                    {
                        ___element.___stylesheetsForNextNodeList.Sort(new CHtmlCSSRuleWorkingKeyStringComparer());
                    }
                    ___element.___IsStyleListSortedByHitForThisNode = true;
                    ___element.___IsAttributesMergedToInlineStyle = false;
                    ___element.___IsElementUnderCSSRecaluculation = true;
                    ___element.___availHeight = 0;
                    ___element.___availLeft = 0;
                    ___element.___availWidth = 0;
                    ___element.___availTop = 0;

                    this.___applyElemenetStyleSheets(___element, false, false, false);
                    /*
                    if (commonHTML.compareDoubleDiff(___oldWidth ,___element.___offsetWidth, 200) || commonHTML.compareDoubleDiff( ___oldHeight,___element.___offsetHeight, 200))
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("Element Style '{0}' recalcated to tuns out diffrent size {1}:{2} ===> {3}:{4}", ___element, ___oldWidth, ___oldHeight, ___element.___offsetWidth, ___element.___offsetHeight);
                        }
                        if (___element.___style != null)
                        {
                            ___element.___style.StyleCommentAdd(string.Format("CSS Recalulation has different Size.  Element Style '{0}' recalcated to tuns out diffrent size {1}:{2} ===> {3}:{4}  ", ___element, ___oldWidth, ___oldHeight, ___element.___offsetWidth, ___element.___offsetHeight));
                        }
                    }
                   
                    if (___oldCSSFloatType != ___element.___style.___cssFloatType)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("Element Style '{0}' recalcated to tuns out diffrent size OLD : {1} NOW : {2}", ___element, ___oldCSSFloatType, ___element.___style.___cssFloatType);
                        }
                        if (___element.___style != null)
                        {
                            ___element.___style.StyleCommentAdd("CSS Recalulation has different float type... ");
                        }
                    }
                    */
                    // ___element.___isCalculateElementBoundsCalled = false;
                   // this.___calculateElementBounds(___element);

                }
       
                if (___ElementOnly == true)
                {
                    ___element.___IsElementUnderCSSRecaluculation = false;
                    return;
                }
                if (___element.___childNodes.Count != 0)
                {
                    int ___childCount = ___element.___childNodes.Count;
                    for (int i = 0; i < ___childCount; i++)
                    {
                        CHtmlElement ___childElement = ___element.___childNodes[i] as CHtmlElement;
                        if (___childElement != null)
                        {
                            if (commonHTML.IsElemeneITextOrIDrawOrComment(___childElement) == true)
                            {
                            }
                            else
                            {
                                ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively(___childElement, ___ElementOnly, ___callingLevel);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                {

                    commonLog.LogEntry(" ___applyElementsStyleSheetsForRecaluculationForEachElementRecursively('" + ___element.ToString() + "') has exception", ex);
                }
            }
            ___element.___IsElementUnderCSSRecaluculation = false;
        }


		private bool IsTagStartChar(char c)
		{
			if(char.IsLetterOrDigit(c))
				return true;
			else if(c == '!')
				return true;
			else if(c == '/')
				return true;
			else 
				return false;

		}
        /// <summary>
        /// Imports a node from another document to this document. The returned node has no parent; (parentNode is null). The source node is not altered or removed from the original document; this method creates a new copy of the source node.
        /// For all nodes, importing a node creates a node object owned by the importing document, with attribute values identical to the source node's nodeName and nodeType, plus the attributes related to namespaces (prefix, localName, and namespaceURI). As in the cloneNode operation on a Node, the source node is not altered.
        /// Additional information is copied as appropriate to the nodeType, attempting to mirror the behavior expected if a fragment of XML or HTML source was copied from one document to another, recognizing that the two documents may have different DTDs in the XML case. The following list describes the specifics for each type of node.
        /// </summary>
        /// <param name="___importNode">OriginalNode</param>
        /// <param name="___objDeep">Deep Copy</param>
        /// <returns>Result Element Node</returns>
        public CHtmlElement importNode(object ___importNode, object ___objDeep)
        {
            CHtmlElement ___orignalRootNode = commonData.convertObjectIntoCHtmlElement(___importNode);
            bool ___boolDeep = commonData.convertObjectToBoolean(___objDeep, false);
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
            {
                commonLog.LogEntry("TODO: {0}.importNode({1}, {2}) will just use Element.cloneNode()....", this.toLogString(), ___orignalRootNode, ___boolDeep);
            }

            return ___orignalRootNode.cloneNode(___boolDeep);
        }
		
		private void DumpInnerText()
		{
			if(commonLog.LoggingEnabled )
			{
				foreach(CHtmlElement ele in this.___childNodes)
				{

					commonLog.LogEntry("{0}\t:\t{1}", ele.tagName, ele.innerText); 
				
				}
			}
		}
		private int IsParentContainsOpenTagName(string _sTagName, CHtmlElement ___currentElement ,int _MaxLookup)
		{
			int ___CurrentLookup = 0;
			CHtmlElement __LookUpElement = ___currentElement;
			while(__LookUpElement != null)
			{
				if(__LookUpElement.tagName == _sTagName && __LookUpElement.___ClosedReson == CHtmlTagClosedReasonType.Open)
				{
					return __LookUpElement.___TagOpenEndPosition;
				}
                __LookUpElement = __LookUpElement.___parent as CHtmlElement;
				___CurrentLookup++;
				if( ___CurrentLookup > _MaxLookup)
				{
					break;
				}
			}
			return -1;
		}
		private static CHtmlElement  ___getParentElementOpenFromTagType(CHtmlElementType _sTagType, CHtmlElement ___currentElement ,int _MaxLookup)
		{
			int ___CurrentLookup = 0;
			CHtmlElement __LookUpElement = ___currentElement;
			while(__LookUpElement != null)
			{
				if(__LookUpElement.___elementTagType == _sTagType && __LookUpElement.___ClosedReson == CHtmlTagClosedReasonType.Open)
				{
					return __LookUpElement;
				}
                __LookUpElement = __LookUpElement.___parent as CHtmlElement;
				___CurrentLookup++;
				if( ___CurrentLookup > _MaxLookup)
				{
					break;
				}
			}
			return null;
		}
		
		public void ___registerElementDocumentElementID(CHtmlElement addElement)
		{
            if (addElement.___isInactivativeElementNodeChild == true)
                return;
			if(addElement.___documentWeakRef  == null)
			{
                addElement.___documentWeakRef = new WeakReference(this, false);
			}
			//addElement.___Document = this;


			if(string.IsNullOrEmpty(addElement.___idLowSimple) == false)
			{
				___registerElementIDToDocument(addElement);
			}
			addElement.___WillElementIDAlternationRequiresDocumentCheck = true;
		}
		internal void CreateLinksInfo(CHtmlElement ___linkElement)
		{
            if (this.___links == null)
            {
                return;
            }
			if(___linkElement.___hrefBase != null && string.IsNullOrEmpty(___linkElement.___hrefBase.___Href) == false)
			{
				CHtmlLinkItem linkInfo =new CHtmlLinkItem();
				linkInfo.SetPropertiesFromElement(___linkElement);
                this.___links.Add(linkInfo);
			}
		}

		internal void ___registerElementIDToDocument(CHtmlElement addElement)
		{
            if (addElement.___IsElementPrefetchDummy == true)
            {
                return;
            }
			bool ___IsLockObtained = false;
			try
			{
				if(Monitor.TryEnter(this.___DocumentElementIDLockingObject, 50))
				{
					___IsLockObtained = true;
					this.___DocumentElementIDList[addElement.___idLowSimple] = addElement;
				}
				else
				{
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
					{
						commonLog.LogEntry("Ohhh, _allElementIdSortedList seems locked..., but cont");
					}
				}

			} 
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
				{
					commonLog.LogEntry("RegisterElementIDToDocument(", ex);
				}
			}
			finally
			{
				if(___IsLockObtained)
				{
			
					Monitor.Exit(this.___DocumentElementIDLockingObject);
				}
			
			}
			addElement.___WillElementIDAlternationRequiresDocumentCheck = true;
		}
		
		private CHtmlLocationBase RecreateLocationBase()
		{
			CHtmlLocationBase locBase = new CHtmlLocationBase();
			try
			{
				if(string.IsNullOrEmpty(this.___URL) == false && (this.___URL.StartsWith("http://", StringComparison.Ordinal) == true || this.___URL.StartsWith("https://", StringComparison.Ordinal) == true || this.___URL.StartsWith( "file://", StringComparison.OrdinalIgnoreCase) == true || this.___URL.StartsWith( "ftp://",StringComparison.OrdinalIgnoreCase) == true ))
				{
                    locBase.___setHrefDirect(this.___URL);
				}
				else
				{
                    locBase.___setHrefDirect("http://error/");
				}
			} 
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
				{
					commonLog.LogEntry("HTML.CHtmlLocationBase RecreateLocationBase",ex);
				}
			}
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
			{
				commonLog.LogEntry("Document Location has recreted : {0}",  locBase.ToString());
			}
			return locBase;
		}
        /// <summary>
        /// FireFox and Chrome Experimental object
        /// </summary>
        /// <param name="___newTagString">new TagName</param>
        /// <returns>Contructor Object</returns>
        public CHtmlRegisteredElementConstructorFunction  registerElement(object ___newTagString, object ___objOption)
        {
            return ___registerElementInner(___newTagString, ___objOption);
        }
        /// <summary>
        /// FireFox and Chrome Experimental object
        /// </summary>
        /// <param name="___newTagString">new TagName</param>
        /// <returns>Contructor Object</returns>
        public CHtmlRegisteredElementConstructorFunction registerElement(object ___newTagString)
        {
            return ___registerElementInner(___newTagString, null);
        }
        /// <summary>
        /// FireFox and Chrome Experimental object [Not Supported Feature]
        /// Note: created object may be put in global or local class. we can not tell them at creation time.
        /// node.con = document.registerElement();
        /// it is not good implementation. so we do not want support this feature.
        /// </summary>
        /// <param name="___newTagString">new TagName</param>
        /// <returns>Contructor Object(Prototype Information)</returns>
        internal CHtmlRegisteredElementConstructorFunction ___registerElementInner(object ___newTagString, object ___objOption)
        {
            CHtmlRegisteredElementConstructorFunction ___registeredFunction = new CHtmlRegisteredElementConstructorFunction();
            ___registeredFunction.___registeredTagName = commonHTML.GetStringValue(___newTagString);
            ___registeredFunction.___optionObject = ___objOption;
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
            {
                commonLog.LogEntry("TODO: {0}.registerElement({1}, {2}) is called, but it is unsupported. it will fail...", this, ___registeredFunction.___registeredTagName, ___registeredFunction.___optionObject);
            }
            ___registeredFunction.___ownerDocumentWeakReference = new WeakReference(this);
            return null;
        }
		/// <summary>
		/// Create Document generic list entry for appendChildElement etc.
		/// </summary>
		/// <param name="addElement"></param>
		internal void AddDyamicElementInfoDocumentPropertyList(CHtmlElement addElement)
		{
			if(addElement == null)
				return;
            if (this.___IsDomModeFullParseMode() == false)
                return;
            try
            {
                switch (addElement.___elementTagType)
                {

                    case CHtmlElementType.STYLE:

                        this.___tagStyles.Add(addElement);


                        if (addElement.___sheet == null)
                        {
                            CHtmlCSSStyleSheet.___createCHtmlCSSStylesheetForElement(addElement);
                            this.___styleSheets.Add(addElement.___sheet);
                        }
                        else
                        {
                            this.___styleSheets.Add(addElement.___sheet);
                        }
                        return;
                    case CHtmlElementType.A:
                        if (string.IsNullOrEmpty(addElement.___id) == false)
                        {
                            this.___anchors.Add(addElement.___id, addElement);
                        }
                        else if (string.IsNullOrEmpty(addElement.___name) == false)
                        {
                            this.___anchors.Add(addElement.___name, addElement);
                        }
                        else if (addElement.___hrefBase != null && string.IsNullOrEmpty(addElement.___hrefBase.___Href) == false)
                        {
                            this.___anchors.Add(addElement.___hrefBase.___Href, addElement);

                        }
                        this.CreateLinksInfo(addElement);
                        break;
                    case CHtmlElementType.FORM:
                        if (this.___forms != null)
                        {
                            if (string.IsNullOrEmpty(addElement.___name) == false)
                            {
                                this.___forms.Add(addElement.___name, addElement);
                            }
                            else
                            {
                                // We want to polulate the item even though there is no name
                                this.___forms.Add(commonData.GenerateRandomString(10), addElement);
                            }
                        }
                        break;
                    case CHtmlElementType.AREA:
                        this.CreateLinksInfo(addElement);
                        break;
                    case CHtmlElementType.EMBED:
                        if (string.IsNullOrEmpty(addElement.___name) == false)
                        {
                            this.___embeds.Add(addElement.___name, addElement);
                        }
                        break;
                    case CHtmlElementType.LAYER:
                    case CHtmlElementType.ILAYER:
                        if (string.IsNullOrEmpty(addElement.___id) == false)
                        {
                            if (this.___layers != null)
                            {
                                this.___layers.Add(addElement.___id, addElement);
                            }
                        }
                        if (string.IsNullOrEmpty(addElement.___name) == false)
                        {
                            if (this.___layers != null)
                            {
                                this.___layers.Add(addElement.___name, addElement);
                            }
                        }
                        break;
                    case CHtmlElementType.SCRIPT:
                        this.___scripts.Add(addElement);


                        // script block can not have any children. Then, no parent Element shift.
                        return;
                    case CHtmlElementType.FRAME:
                    case CHtmlElementType.IFRAME:
                        if (this.___IsMultiversalDocument == true)
                        {
                     
                            if (addElement.___IsDynamicElement == true)
                            {
                                if (this.___framesAsMultiversalWindow != null && this.___MultiversalWindow != null)
                                {
                                    if (addElement.___iframeMultiversalWindow == null)
                                    {
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                                        {
                                            commonLog.LogEntry("AddDyamicElementInfoDocumentPropertyList detected '{0}' does not have iframeMultiversalWindow assigned. create now...", addElement);
                                        }
                                        addElement.___iframeMultiversalWindow = commonHTML.createIFrameMultiversalWindow(this.___MultiversalWindow, this, addElement);
                                    }
                                }
                            }
                            if (string.IsNullOrEmpty(addElement.___id) == false)
                            {
                                this.___framesAsMultiversalWindow.Add(addElement.___id, addElement.___iframeMultiversalWindow);
                                if (string.IsNullOrEmpty(addElement.___iframeMultiversalWindow.___id) == true)
                                {
                                    addElement.___iframeMultiversalWindow.___id = string.Copy(addElement.id);
                                }
                            }
                            else if (string.IsNullOrEmpty(addElement.___name) == false)
                            {
                                this.___framesAsMultiversalWindow.Add(addElement.___name, addElement.___iframeMultiversalWindow);
                                if (string.IsNullOrEmpty(addElement.___iframeMultiversalWindow.___name) == true)
                                {
                                    addElement.___iframeMultiversalWindow.___name = string.Copy(addElement.name);
                                }
                            }
                            else
                            {
                                this.___framesAsMultiversalWindow.Add("IFRAME-" + addElement.___elementOID.ToString(), addElement.___iframeMultiversalWindow);
                            }
                        }
                        return;
                    case CHtmlElementType.IMG:
                        if (this.___imageElements != null)
                        {
                            if (Monitor.TryEnter(this.___imageElements.SyncRoot, 1))
                            {
                                try
                                {
                                    this.___imageElements.Add(addElement);
                                }
                                finally
                                {
                                    Monitor.Exit(this.___imageElements.SyncRoot);
                                }
                            }
                        }
                        break;
                    case CHtmlElementType.LINK:
                        //rel="stylesheet" type="text/css" href="style.css" />
                        if (commonHTML.isElementCanGenerateCSSStylesheetObject(addElement) == true)
                        {
                            // properties have been altered. rebind again

                            if (addElement.___sheet != null)
                            {
                                this.___styleSheets.Add(addElement.___sheet);
                            }
                        }
                        else
                        {
                            addElement.___sheet = null;
                        }

                        break;


                    default:
                        break;
                }
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                {
                    commonLog.LogEntry("AddDyamicElementInfoDocumentPropertyList Exception", ex);
                }
            }
		}
        internal int ___addToCurrrentParentElementBodyElementCount = 0;
        internal int ___addToCurrrentParentElementHeadElementCount = 0;
		internal void ___addToCurrentParentElement(CHtmlElement addElement)
        {
            /*
            if (addElement.id == "ADVERTISE_TOP_TEXT_TARGET1")
            {
                commonLog.LogEntry("HERE");
            }
             */
            /*
#if DEBUG
            if (string.Equals(addElement.___id, "hogehoge", StringComparison.Ordinal) == true)
           {
               commonLog.LogEntry("HERE");
           }
#endif
           */

            

            bool ___isPossibleCurrentParentElementIsInactiveElement = false;

			try
			{
				
				if(addElement.___documentWeakRef  == null)
				{
                    addElement.___documentWeakRef = new WeakReference(this, false);
				}
				int _children_index = -1;
				if(addElement.___elementTagType == CHtmlElementType.DOCTYPE)
				{
					if(this.___docTypeElement == null)
					{
						this.___docTypeElement = addElement as CHtmlDTD;
                       
					}
					return;
				}
				if(this.___IsDomModeAnyHTML())
				{
                    if (addElement.___elementTagType == CHtmlElementType.HTML)
                    {
                        if (this.___documentElement == null)
                        {
                            this.___documentElement = addElement;
                            if (this.___childNodes.Count  == 0)
                            {
                                addElement.___ChildNodeIndex =  this.___childNodes.Add(addElement);
                                
                            }
                           
                            addElement.___parentWeakRef = new WeakReference(this, false);
                         
                            this.___currentParentElement = addElement;
                            ___AddCurrentParentNodeIntoStack(this.___currentParentElement);
                            return;
                        }
                    }
                    //goto HeadCheckDone;
                    
                    if (this.___currentParentElement != null)
                    {
                        ___isPossibleCurrentParentElementIsInactiveElement = this.___currentParentElement.___isInactivativeElementNodeChild;
                    }
                    if (this.___documentElement  == null)
                    {
                        if (this.___head == null && this.___headDummyElement == null)
                        {
                            if (commonHTML.elementTagTypesAppearsOnlyHeaderSortedList.ContainsKey(addElement.___elementTagType) == true || addElement.___elementTagType == CHtmlElementType.STYLE || addElement.___elementTagType == CHtmlElementType.SCRIPT || addElement.___elementTagType == CHtmlElementType.LINK)
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                {
                                    commonLog.LogEntry("document has no root and head, create one. " + addElement.ToString());
                                }
                                CHtmlElement ___htmlElement = new CHtmlElement();
                                ___htmlElement.___SetTagNameOnly("HTML");
                                ___htmlElement.___elementTagType = CHtmlElementType.HTML;
                                ___htmlElement.___parentWeakRef = new WeakReference(this, false);
                                this.___documentElement = ___htmlElement;
                               
                                ___htmlElement.___ChildNodeIndex = 0;

                                this.___childNodes.Add(___htmlElement);
                                if (addElement.___elementTagType != CHtmlElementType.HEAD)
                                {
                                    CHtmlElement ___headElement = new CHtmlElement();
                                    ___headElement.___SetTagNameOnly("HEAD");
                                    ___headElement.___parentNode = ___htmlElement;
                                    ___headElement.___elementTagType = CHtmlElementType.HEAD;
                                
                                    ___headElement.___ChildNodeIndex = ___htmlElement.___childNodes.Add(___headElement);
                                    this.___head = ___headElement;
                                    this.___currentParentElement = ___headElement;
                                }
                                else
                                {
 
                                    addElement.___ChildNodeIndex = ___htmlElement.___childNodes.Add(addElement);
                                    this.___head = addElement;
                                    this.___currentParentElement = addElement;
                                }
                                return; ;
                            }
                        }
                     
                    }
                    
                    if (this.___IsDomModeAnyHTML() == true)
                    {
                        switch (addElement.___elementTagType)
                        {
                            case CHtmlElementType.META:
                            case CHtmlElementType.LINK:
                            case CHtmlElementType.SCRIPT:
                            case CHtmlElementType.STYLE:
                            case CHtmlElementType.NOSCRIPT:
                            case CHtmlElementType.TITLE:
                            case CHtmlElementType.HEAD:
                                addElement.___IsElementVisible = false;
                                break;
                            case CHtmlElementType.BODY:
                                if (this.___head == null && this.___headDummyElement == null)
                                {
                                    CHtmlElement __headElement = new CHtmlElement();
                                    __headElement.tagName = "HEAD";
                                    if (this.___documentElement  != null)
                                    {
                                        __headElement.___parentWeakRef = new WeakReference(this.___documentElement, false);
                                    }
                                    __headElement.___documentWeakRef = new WeakReference(this, false);
                                    __headElement.___IsElementBlock = true;
                                    __headElement.___IsElementVisible = false;
                                    __headElement.___isCalculateElementBoundsCalled = true;
                                    __headElement.___ClosedReson = CHtmlTagClosedReasonType.ForceCleanup;
                                   
                                    this.___head = __headElement;
                                }
                                break;
                        }
                    }
					// Here is not head exists for <meta> <link> etc
					if(this.___documentElement  != null  && this.___head == null && this.___headDummyElement == null)
					{
						if(addElement.___elementTagType != CHtmlElementType.HEAD)
						{
							if(commonHTML.elementTagTypesAppearsOnlyHeaderSortedList.ContainsKey(addElement.___elementTagType) == true || addElement.___elementTagType == CHtmlElementType.STYLE || addElement.___elementTagType == CHtmlElementType.SCRIPT || addElement.___elementTagType == CHtmlElementType.LINK)
							{
								CHtmlElement __headElement = new CHtmlElement();
								__headElement.tagName = "HEAD";
                                if (this.___documentElement != null)
                                {
                                    __headElement.___parentWeakRef = new WeakReference(this.___documentElement, false);
                                }
                                __headElement.___documentWeakRef = new WeakReference(this, false);
								__headElement.___IsElementBlock = true;
								__headElement.___IsElementVisible = false;
								__headElement.___isCalculateElementBoundsCalled = true;
								__headElement.___ClosedReson = CHtmlTagClosedReasonType.ForceCleanup;
								
                                if (this.documentElement != null)
                                {
                                    __headElement.___ChildNodeIndex = this.___documentElement.___childNodes.Add(__headElement);
                                    this.___documentElement.___setElementCriticalPropertiesChildNode(__headElement);
                                }
                                else
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1000)
                                    {
                                        commonLog.LogEntry("AddToParent could not find documentElement for {0}", addElement);
                                    }

                                }
								this.___head = __headElement;
                                ___AddCurrentParentNodeIntoStack(this.___currentParentElement);
								this.___currentParentElement = __headElement;
                                goto HeadCheckDone;
							}
						}
					}
                }
                HeadCheckDone:




                if (this.___IsElementCreationNeedsToBeDynamic == true && addElement.___IsDynamicElement == false)
                {
                    addElement.___IsDynamicElement = true;
                }
                
            

				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1000)
				{
					commonLog.LogEntry("AddToParent Start {0} {1}", addElement, addElement.___TagOpenStartPosition );
				}


				if(this.___IsDomModeXMLLikeStyleMode())
				{
					addElement.___isCalculateElementBoundsCalled = true;
					addElement.___IsStyleListSortedByHitForThisNode = true;
					addElement.___isApplyElemenetStyleSheetCalled = true;
					if(this.___currentParentElement == null)
					{
                        addElement.___parentWeakRef = null;
                        if(this.___documentElement == null)
                        {
                            this.___documentElement = addElement;
                        }
                        ___AddCurrentParentNodeIntoStack(this.___currentParentElement);
						this.___currentParentElement = addElement;
						addElement.___DOM_Level = 0;
					}
					else
					{
						
						this.___currentParentElement.___childNodes.Add(addElement);
                        this.___currentParentElement.___setElementCriticalPropertiesChildNode(addElement);
                        if (addElement.___isSvgElement == true)
                        {
                            ___assignParentSVGRootElement(addElement, this.___currentParentElement);
                        }       
                 
                        addElement.___parentWeakRef = new WeakReference(this.___currentParentElement, false);
                        ___AddCurrentParentNodeIntoStack(this.___currentParentElement);
						this.___currentParentElement = null;
						this.___currentParentElement = addElement;
                        
                    }
					return;
				}
			

				if(this.___IsDomModeAnyHTML() == true)
				{
					if(_children_index == 0 && addElement.___elementTagType  != CHtmlElementType.HTML)
					{
						if(string.Equals(addElement.tagName, "htm",StringComparison.OrdinalIgnoreCase) == true)
						{
							addElement.tagName = "HTML";
							goto AddElementFistCheckDone;
						}
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
						{
							commonLog.LogEntry("Stange all[0] is not html, create manually and insert at 0");
						}
						CHtmlElement htmlBody = createCHtmlElementWithDomType("BODY", this.___documentDomType, null);
                        if (this.___MultiversalWindow != null)
                        {
                            this.___MultiversalWindow.___assignElementPrototype(htmlBody);
                        }
						htmlBody.___ElementVersion = CHtmlVersionType.Version3;
						htmlBody.tagName = "HTML";
                        htmlBody.___documentWeakRef = new WeakReference(this, false);
						htmlBody.___TagOpenStartPosition = 0;
						htmlBody.___TagOpenEndPosition = 4;
						htmlBody.___DOM_Level = 0;


                        ___AddCurrentParentNodeIntoStack(this.___currentParentElement);
						this.___currentParentElement = htmlBody;
						_children_index = 1;
					}
				}
			
			AddElementFistCheckDone:
	
				if(_children_index == 0)
				{
					addElement.___DOM_Level = 0;
                    if (addElement.___parentWeakRef == null)
                    {
                        addElement.___parentWeakRef = new WeakReference(this, false);
                    }
					if(addElement.___ChildNodeIndex == -1)
					{
						addElement.___ChildNodeIndex = 0;
					}
					if(this.___documentElement == null)
					{
						if(addElement.___elementTagType == CHtmlElementType.HTML)
						{
							this.___documentElement = addElement;
                            this.___childNodes.Add(addElement);
						}
						else
						{
							if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
							{
								commonLog.LogEntry("Strange Element {0} becoomes documentElement", addElement);
							}
							this.___documentElement = addElement;
                            this.___childNodes.Add(addElement);
						}
					}
					if(this.___currentParentElement == null)
					{
						this.___currentParentElement = addElement;
					}
                    if (this.___documentDomType != CHtmlDomModeType.HTMLSegment )
                    {
                        addElement.___IsMainDocumentNodeElement = true;
                    }
                    else
                    {
                        // may be Segument document.
                        addElement.___IsMainDocumentNodeElement = false;
                    }
				}
				if(string.IsNullOrEmpty(addElement.___tagName) == true)
				{
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
					{
						commonLog.LogEntry("Strange Element {0} in ___AddToParentElement", addElement);
					}
				}
				if(string.IsNullOrEmpty(addElement.___idLowSimple) == false)
				{
                    if (___isPossibleCurrentParentElementIsInactiveElement == false || (___isPossibleCurrentParentElementIsInactiveElement == true &&  addElement.___elementTagType == CHtmlElementType.TEMPLATE))
                    {
                        ___registerElementIDToDocument(addElement);
                    }
				}
           
                if (___isPossibleCurrentParentElementIsInactiveElement == true)
                    goto AddToDocumentCollectionDonePhase;
                switch (addElement.___elementTagType)
                {
                    case CHtmlElementType.BODY:
                        if (___addToCurrrentParentElementBodyElementCount == 0)
                        {
                            //bool ___IsRootBody = false;



                            if (this.___body  == null)
                            {
                                if(this.___documentElement == null || this.___head == null)
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
                                    {
                                        commonLog.LogEntry("___addToCurrentParentElement({0}) could not find documentElement or head element. create it know...", addElement.toLogString(),  this);
                                    }
                                    this.___createBaseHtmlElement(this.___documentElement == null, this.___head == null, false);
                                }

                                addElement.___parentWeakRef = new WeakReference(this.___documentElement, false);
                                CHtmlElement addElementParent = addElement.___parent as CHtmlElement;

                                int pos = addElementParent.___childNodes.Add(addElement);
                                addElementParent.___setElementCriticalPropertiesChildNode(addElement);

                                addElement.___ChildNodeIndex = pos;
                                this.___body = addElement;
                                ___AddCurrentParentNodeIntoStack(this.___currentParentElement);
                                this.___currentParentElement = ___body;
                      
                                //___IsRootBody = true;
                            }
                            if (this.___IsHtmlBodyTagPassed == false)
                            {
                                this.___IsHtmlBodyTagPassed = true;
                            }

                            return;
                        }
                        break;
                    case CHtmlElementType.FRAMESET:

                            // ----------------------------------------------------------------------
                            // Note Frameset document may not have body element
                            // it should use first frameset element as body (By Specifications).
                            // ----------------------------------------------------------------------


                            if (this.___body == null)
                            {
                                this.___body = addElement;
                            }
                            if (this.___IsHtmlBodyTagPassed == false)
                            {
                                this.___IsHtmlBodyTagPassed = true;
                            }
                        
                        break;
                    case CHtmlElementType.HEAD:
                  
                        if (this.___addToCurrrentParentElementHeadElementCount == 0)
                        {
                          
                            if (this.___currentParentElement != null && this.___currentParentElement.___elementTagType == CHtmlElementType.HEAD)
                            {
                                if (this.___head == null)
                                {
                                    this.___head = addElement;
                                }
                                return;
                            }
                            if (this.___head == null)
                            {
                                this.___head = addElement;
                            }
                        }
                        this.___addToCurrrentParentElementHeadElementCount++;
                        break;
                    case CHtmlElementType.STYLE:
                        addElement.___IsElementVisible = false;
                        addElement.___offsetWidth = 0;
                        addElement.___offsetTop = 0;
                        if (addElement.___documentWeakRef == null || object.ReferenceEquals(addElement.___documentWeakRef.Target , this) == false)
                        {
                            addElement.___documentWeakRef = new WeakReference(this, false);
                        }
                        if (___tagStyles != null)
                        {
                            this.___tagStyles.Add(addElement);
                        }
                        if (addElement.___sheet != null && this.___styleSheets != null)
                        {
                            this.___styleSheets.Add(addElement.___sheet);
                        }


                        if (this.___currentParentElement != null)
                        {
                            addElement.___parentWeakRef = new WeakReference(this.___currentParentElement, false);
                           
                            addElement.___ChildNodeIndex = this.___currentParentElement.___childNodes.Add(addElement);
                            this.___currentParentElement.___setElementCriticalPropertiesChildNode(addElement);
                          
                        }

                        return;
                    case CHtmlElementType.A:
                        if (this.___anchors != null)
                        {
                            if (string.IsNullOrEmpty(addElement.___id) == false)
                            {
                                this.___anchors.Add(addElement.___id, addElement);
                            }
                            else if (string.IsNullOrEmpty(addElement.___name) == false)
                            {
                                this.___anchors.Add(addElement.___name, addElement);
                            }
                            else if (string.IsNullOrEmpty(addElement.___href) == false)
                            {
                                this.___anchors.Add(addElement.___href, addElement);

                            }
                            this.CreateLinksInfo(addElement);
                        }
                        break;
                    case CHtmlElementType.FORM:
                        if (this.___forms != null)
                        {
                            if (string.IsNullOrEmpty(addElement.___name) == false)
                            {
                                this.___forms.Add(addElement.___name, addElement);
                            }
                            else
                            {
                                // We want to polulate the item even though there is no name
                                this.___forms.Add(commonData.GenerateRandomString(10), addElement);
                            }
                        }
                        break;
                    case CHtmlElementType.AREA:
                        this.CreateLinksInfo(addElement);
                        break;
                    case CHtmlElementType.EMBED:
                        if (this.___embeds != null)
                        {
                            if (string.IsNullOrEmpty(addElement.___name) == false)
                            {
                                this.___embeds.Add(addElement.___name, addElement);
                            }
                        }
                        break;
                    case CHtmlElementType.LAYER:
                    case CHtmlElementType.ILAYER:
                        if (this.___layers != null)
                        {
                            if (string.IsNullOrEmpty(addElement.___id) == false)
                            {
                                if (this.___layers != null)
                                {
                                    this.___layers.Add(addElement.___id, addElement);
                                }
                            }
                            if (string.IsNullOrEmpty(addElement.___name) == false)
                            {
                                if (this.___layers != null)
                                {
                                    this.___layers.Add(addElement.___name, addElement);
                                }
                            }
                        }
                        break;
                    case CHtmlElementType.SCRIPT:
                        addElement.___IsElementVisible = false;
                        addElement.___isApplyElemenetStyleSheetCalled = true;
                        addElement.___isCalculateElementBoundsCalled = true;
                        addElement.___offsetWidth = 0;
                        addElement.___offsetTop = 0;
                        if (this.___scripts != null)
                        {
                            this.___scripts.Add(addElement);
                        }
                        if (addElement.___documentWeakRef != null && object.ReferenceEquals(addElement.___documentWeakRef.Target, this) == false)
                        {
                            addElement.___documentWeakRef = new WeakReference(this, false);
                        }

                        if (this.___currentParentElement != null)
                        {
                            addElement.___parentWeakRef = new WeakReference(this.___currentParentElement, false);
                            
                            addElement.___ChildNodeIndex = this.___currentParentElement.___childNodes.Add(addElement);
                            this.___currentParentElement.___setElementCriticalPropertiesChildNode(addElement);
                            this.___currentParentElement = addElement;
                        }
                        else
                        {

                            try
                            {
                                if (this.___documentElement != null)
                                {
                                    addElement.___parentWeakRef = new WeakReference(this.___documentElement, false);
                                   
                                    addElement.___ChildNodeIndex = this.___documentElement.___childNodes.Add(addElement);
                                    this.___documentElement.___setElementCriticalPropertiesChildNode(addElement);
                                    ___AddCurrentParentNodeIntoStack(this.___currentParentElement);
                                    this.___currentParentElement = addElement;
                                }
                                else
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                    {
                                        commonLog.LogEntry("No parent not found script. Ignoring");
                                    }
                                }
                            }
                            catch { }
                        }

                        // script block can not have any children. Then, no parent Element shift.
                        return;
                    case CHtmlElementType.FRAME:
                        if (this.___IsMultiversalDocument == true)
                        {
                            if (string.IsNullOrEmpty(addElement.___name) == false)
                            {
                                this.___framesAsMultiversalWindow.Add(addElement.___name, addElement.___iframeMultiversalWindow);
                            }
                            else if (string.IsNullOrEmpty(addElement.___id) == false)
                            {
                                this.___framesAsMultiversalWindow.Add(addElement.___id, addElement.___iframeMultiversalWindow);
                            }
                            else
                            {
                                this.___framesAsMultiversalWindow.Add("FRAME-" + addElement.___elementOID.ToString(), addElement.___iframeMultiversalWindow);
                            }
                        }
                        break;

                    case CHtmlElementType.IFRAME:
                        if (this.___IsMultiversalDocument == true)
                        {
                            if (string.IsNullOrEmpty(addElement.___name) == false)
                            {
                                this.___framesAsMultiversalWindow.Add(addElement.___name, addElement.___iframeMultiversalWindow);
                                if (addElement.___iframeMultiversalWindow.___name == null)
                                {
                                    addElement.___iframeMultiversalWindow.___name = string.Copy(addElement.___name);
                                }
                            }
                            else if (string.IsNullOrEmpty(addElement.___id) == false)
                            {
                                this.___framesAsMultiversalWindow.Add(addElement.___id, addElement.___iframeMultiversalWindow);
                                if (addElement.___iframeMultiversalWindow.___id == null)
                                {
                                    addElement.___iframeMultiversalWindow.___id = string.Copy(addElement.___id);
                                }
                            }
                            else
                            {
                                this.___framesAsMultiversalWindow.Add("IFRAME-" + addElement.___elementOID.ToString(), addElement.___iframeMultiversalWindow);
                            }
                        }
               
                        if (this.___currentParentElement != null)
                        {
                            addElement.___parentWeakRef = new WeakReference(this.___currentParentElement, false);
                            
                            addElement.___ChildNodeIndex = this.___currentParentElement.___childNodes.Add(addElement);
                            this.___currentParentElement.___setElementCriticalPropertiesChildNode(addElement);
                            ___AddCurrentParentNodeIntoStack(this.___currentParentElement);
                            this.___currentParentElement = null;
                            this.___currentParentElement = addElement;
                        }
                        else
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                            {
                                commonLog.LogEntry("No parent not found iframe add to top child");
                            }
                            try
                            {
                                addElement.___parentWeakRef = new WeakReference(this.___documentElement, false);
                                addElement.___ChildNodeIndex = this.___documentElement.___childNodes.Add(addElement);
                                this.___documentElement.___setElementCriticalPropertiesChildNode(addElement);
                            }
                            catch { }
                        }
                        return;
                    case CHtmlElementType.IMG:
                        if (this.___imageElements != null)
                        {
                            if (Monitor.TryEnter(this.___imageElements.SyncRoot, 3000))
                            {
                                try
                                {
                                    this.___imageElements.Add(addElement);
                                }
                                finally
                                {
                                    Monitor.Exit(this.___imageElements.SyncRoot);
                                }
                            }
                        }
                        break;
                    case CHtmlElementType.LINK:
                        //rel="stylesheet" type="text/css" href="style.css" />

                        if (addElement.___sheet != null && this.___styleSheets != null)
                        {
                            this.___styleSheets.Add(addElement.___sheet);
                        }

                        break;


                    default:
                        break;
                }
                AddToDocumentCollectionDonePhase:
	
				if(this.___IsHtmlBodyTagPassed == true)
				{
					if(commonHTML.elementTagTypesDisallowChildrenAndInnerTextSortedList.ContainsKey(addElement.___elementTagType) == true)
					{
                        int pos = -1;
                        if (this.___currentParentElement != null)
                        {
                            addElement.___parentWeakRef = new WeakReference(this.___currentParentElement, false);
                            pos = this.___currentParentElement.___childNodes.Add(addElement);
                            this.___currentParentElement.___setElementCriticalPropertiesChildNode(addElement);

                        }
                        else
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                            {
                                commonLog.LogEntry("___AddToParentElement could not find parent to append. use body");
                            }
                            CHtmlElement __appendParent = this.___body;
                            if (__appendParent == null)
                            {
                                __appendParent = this.___documentElement;
                            }
                            if (__appendParent != null)
                            {
                                addElement.___parentWeakRef = new WeakReference(__appendParent, false);
                                pos = __appendParent.___childNodes.Add(addElement);
                                __appendParent.___setElementCriticalPropertiesChildNode(addElement);

                            }
                            else 
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                                {
                                    commonLog.LogEntry("___AddToParentElement fails due to no html or body for {0}", addElement);
                                }
                            }

                        }
						addElement.___ChildNodeIndex = pos;
                        if (this.___IsElementCreationNeedsToBeDynamic == false)
                        {
                            if (pos > 0 && this.___currentParentElement != null)
                            {
                                CHtmlElement priorElement = this.___currentParentElement.___childNodes[pos - 1] as CHtmlElement;

                                if (priorElement.___ClosedReson == CHtmlTagClosedReasonType.Open)
                                {
                                    this.___calculateElementBounds(this.___currentParentElement.___childNodes[pos - 1] as CHtmlElement);
                                }
                            }
                        }
					
		


						//addElement.IsTagImmediateClosed = true;
						addElement.___TagCloseEndPosition = addElement.___TagOpenEndPosition;
						addElement.___TagCloseStartPosition = addElement.___TagOpenEndPosition;
						addElement.___ClosedReson = CHtmlTagClosedReasonType.Direct;
						/*
						if(addElement.___isCalculateElementBoundsCalled == false)
						{
							if(commonHTML.___elementTagTypesNoStylesheetLookupSortedList.ContainsKey(addElement.___elementTagType) == false)
							{
								this.___calculateElementBounds(addElement);
							}
						}
						*/

						return;
					}
					/*
							if(this.___currentParentElement.tagName =="option")
							{
								this.___currentParentElement.ClosedReson = CHtmlTagClosedReasonType.ForceCleanup;
								this.___currentParentElement.TagCloseStartPosition = addElement.TagOpenStartPosition -1;
								this.___currentParentElement.TagCloseEndPosition = addElement.TagOpenStartPosition -1;
								this.___calculateElementBounds(this.___currentParentElement);
								this.___currentParentElement= this.___currentParentElement.parent;

							}
							*/
                    if (___isPossibleCurrentParentElementIsInactiveElement == false && (addElement.___elementTagType == CHtmlElementType.TD || addElement.___elementTagType == CHtmlElementType.TH))
					{
						if(this.___currentParentElement.___elementTagType == CHtmlElementType.TD  || this.___currentParentElement.___elementTagType == CHtmlElementType.TH)
						{
							if(this.___currentParentElement.___ClosedReson ==  CHtmlTagClosedReasonType.Open)
							{
								this.___currentParentElement.___ClosedReson = CHtmlTagClosedReasonType.ForceCleanup;
								this.___currentParentElement.___TagCloseStartPosition = addElement.___TagOpenStartPosition -1;
								this.___currentParentElement.___TagCloseEndPosition = addElement.___TagOpenStartPosition -1;
							}
							/*
							if(this.___currentClosedElement.___isCalculateElementBoundsCalled == false)
							{
								this.___calculateElementBounds(this.___currentParentElement);
							}
							*/
                            ___AddCurrentParentNodeIntoStack(this.___currentParentElement);
                            this.___currentParentElement = this.___currentParentElement.___parent as CHtmlElement;
						}
						else
						{
						
							if(commonHTML.elementTagTypesValidTDTHParentTagNameTypesSortedList.ContainsKey(this.___currentParentElement.___elementTagType) == false)
							{
								if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
								{
									commonLog.LogEntry("Cell {0}'s Parent looks like invalid parent {1}", addElement, this.___currentParentElement);
								}
							}
						}

					}
					if(addElement.___elementTagType == CHtmlElementType.TR)
					{
						if(this.___currentParentElement.___elementTagType == CHtmlElementType.TD || this.___currentParentElement.___elementTagType == CHtmlElementType.TH )
						{
							if(this.___currentParentElement.___ClosedReson ==  CHtmlTagClosedReasonType.Open)
							{
								this.___currentParentElement.___ClosedReson = CHtmlTagClosedReasonType.ForceCleanup;
								this.___currentParentElement.___TagCloseStartPosition = addElement.___TagOpenStartPosition -1;
								this.___currentParentElement.___TagCloseEndPosition = addElement.___TagOpenStartPosition -1;
							}
                            if (this.___IsElementCreationNeedsToBeDynamic == false)
                            {
                                if (this.___currentClosedElement != null)
                                {
                                    try
                                    {
                                        if (this.___currentClosedElement.___isCalculateElementBoundsCalled == false)
                                        {
                                            this.___calculateElementBounds(this.___currentClosedElement);
                                        }
                                    }
                                    catch (Exception exCloseElement)
                                    {
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                        {
                                            commonLog.LogEntry("__addToCurrentParentElement to closeElement Exception", exCloseElement);
                                        }
                                    }
                                }
                            }
                            this.___currentParentElement = this.___currentParentElement.___getParentElement();
							// <TR><TD><TR> �̃P�[�X����邽�߁A���ɂÂ�
						}
						if(this.___currentParentElement.___elementTagType  == CHtmlElementType.TR) 
						{
							if(this.___currentParentElement.___ClosedReson ==  CHtmlTagClosedReasonType.Open)
							{
								this.___currentParentElement.___ClosedReson = CHtmlTagClosedReasonType.ForceCleanup;
								this.___currentParentElement.___TagCloseStartPosition = addElement.___TagOpenStartPosition -1;
								this.___currentParentElement.___TagCloseEndPosition = addElement.___TagOpenStartPosition -1;
							}
							/*
							if(this.___currentClosedElement.___isCalculateElementBoundsCalled == false)
							{
								this.___calculateElementBounds(this.___currentParentElement);
							}
							*/
                            ___AddCurrentParentNodeIntoStack(this.___currentParentElement);
                            this.___currentParentElement = this.___currentParentElement.___parent as CHtmlElement;
							
						}

					}
                    if (___isPossibleCurrentParentElementIsInactiveElement == false)
                    {
                        switch (addElement.___elementTagType)
                        {
                            case CHtmlElementType.FORM:
                                break;
                            case CHtmlElementType.TD:
                            case CHtmlElementType.TH:
                            case CHtmlElementType.TBODY:
                            case CHtmlElementType.THEAD:
                            case CHtmlElementType.CAPTION:
                            case CHtmlElementType.TFOOT:
                            case CHtmlElementType.COLGROUP:
                            case CHtmlElementType.TR:
                                if (this.___currentParentElement.___ownerTableElement != null)
                                {
                                    // We can't use childIndex to lookup, reuse currentParent.ownerTableElement
                                    addElement.___ownerTableElement = this.___currentParentElement.___ownerTableElement;
                                }
                                if (this.___currentParentElement.___ownerTableElement == null)
                                {
                                    addElement.___ownerTableElement = ___getParentElementByTagType(this.___currentParentElement, CHtmlElementType.TABLE, 4);
                                }
                                if (addElement.___ownerTableElement != null)
                                {
                                    if (commonHTML.elementTagTypesTableRowSortedList.ContainsKey(addElement.___elementTagType) == true)
                                    {
                                        addElement.___ownerTableElement.___TableRowCount++;
                                    }
                                }
                                else
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                    {
                                        commonLog.LogEntry("Parent Table Element is not found : {0} -> {1} [{2}]", addElement, this.___currentParentElement, this.GeRawHTMLStringClean(addElement.___TagOpenStartPosition, 50));
                                    }
                                }
                                break;
                            default:

                                break;
                        }
                    }


					addElement.___IsLayoutTag = addElement.___IsElementBlock;
					
					CHtmlElementType[] _possibleParentTagTypes = commonHTML.GetPossibleParentTagName(addElement.___elementTagType);
					if(_possibleParentTagTypes == null || (_possibleParentTagTypes != null  && _possibleParentTagTypes.Length == 0))
					{  
						// Normal Addition
						if(this.___currentParentElement != null)
						{
                            addElement.___parentWeakRef = new WeakReference(this.___currentParentElement, false);
							if(addElement.___isSvgElement)
                            {
                                ___assignParentSVGRootElement(addElement, this.___currentParentElement);
                            }
							int ___addPos1 = this.___currentParentElement.___childNodes.Add(addElement);
                            this.___currentParentElement.___setElementCriticalPropertiesChildNode(addElement);
							addElement.___ChildNodeIndex = ___addPos1;
                            ___AddCurrentParentNodeIntoStack(this.___currentParentElement);
                            this.___currentParentElement = addElement;
                            return;
						}
						else
						{
							if(this.___body !=null)
							{
								if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
								{
									commonLog.LogEntry("___AddToParentElement {0} could not find parentElement, use body...", addElement.tagName);
								}
                                addElement.___parentWeakRef = new WeakReference(this.___body, false);
								
								int ___addPos2 = this.___body.___childNodes.Add(addElement);
                                this.___body.___setElementCriticalPropertiesChildNode(addElement);
								addElement.___ChildNodeIndex = ___addPos2;
							}
							else
							{
								if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
								{
									commonLog.LogEntry("___AddToParentElement {0} failed. body and parent is null", addElement.tagName);
								}
								return;
							}
						}
						this.___currentParentElement = addElement;

					}
					else
					{   // May be "li" , "option" , "input"
						CHtmlElement __LookUpElement = this.___currentParentElement;
						bool __IsParentContainsPossibleTagName = false;

						int ___parentLookupMax = 5;
						int ___currentLookUp   = 0;
                        while (__LookUpElement != null)
                        {
                            int ___cCount = _possibleParentTagTypes.Length;
                            for (int i = 0; i < ___cCount; i++)
                            {
                                CHtmlElementType _pType = _possibleParentTagTypes[i];

                                if (__LookUpElement.___elementTagType == _pType && __LookUpElement.___ClosedReson == CHtmlTagClosedReasonType.Open)
                                {
                                    __IsParentContainsPossibleTagName = true;
                                    //this.___currentParentElement = __LookUpElement;
                                    if (__LookUpElement != null && __LookUpElement.___childNodes.Count > 0)
                                    {
                                        CHtmlElement priorElement = __LookUpElement.___childNodes[__LookUpElement.___childNodes.Count - 1] as CHtmlElement;
                                        if (priorElement != null
                                            && priorElement != addElement
                                            && priorElement.___ClosedReson == CHtmlTagClosedReasonType.Open
                                            && priorElement.___elementTagType == addElement.___elementTagType)
                                        {
                                            /*
#if DEBUG
                                                    commonLog.LogEntry("Prior Element '{0}' remainds open, force  Same Level Cleanup", priorElement.tagName);
#endif
                                                    */
                                            if (priorElement.___childNodes.Count > 0)
                                            {
                                                int ___levelCount = 0;
                                                this.CloseElementChildren(priorElement, addElement.___TagOpenStartPosition - 1, ref  ___levelCount, 3);
                                            }
                                            priorElement.___TagCloseStartPosition = addElement.___TagOpenStartPosition - 1;
                                            priorElement.___TagCloseEndPosition = addElement.___TagOpenStartPosition - 1;
                                            priorElement.___ClosedReson = CHtmlTagClosedReasonType.SameLevelCleanUp;
                                            if (this.___IsElementCreationNeedsToBeDynamic == false)
                                            {
                                                ___calculateElementBounds(priorElement);
                                            }


                                        }
                                    }
                                    this.___currentParentElement = __LookUpElement;
                                    goto ExitParentLoop;
                                }
                            }
                            __LookUpElement = __LookUpElement.___parent as CHtmlElement;
                            if (___currentLookUp >= ___parentLookupMax)
                            {
                                break;
                            }
                            ___currentLookUp++;
                        }
						if(__IsParentContainsPossibleTagName == false)
						{
							if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 30)
							{
								StringBuilder __sb = new StringBuilder(commonHTML.StringBuilder_BUFFER_Size_For_CSS_Tag);
								if(_possibleParentTagTypes != null)
								{
                                    
									foreach(CHtmlElementType s in  _possibleParentTagTypes)
									{
										__sb.Append(s);
										__sb.Append(",");
									}
								}
								string _strParentsTagName = GetParentTagNameListForElement(this.___currentParentElement);

							
								commonLog.LogEntry("___AddToParentElement '{0}' no parent candidates open '{1}' ({2}) \"{3}\", but cont.", addElement.tagName, __sb,  _strParentsTagName, this.GeRawHTMLStringDirty(addElement.___TagOpenStartPosition));
							
								
							}
						}
                    ExitParentLoop:
                        addElement.___parentWeakRef = new WeakReference(this.___currentParentElement, false);
						
						int ___addPos = this.___currentParentElement.___childNodes.Add(addElement);
                        this.___currentParentElement.___setElementCriticalPropertiesChildNode(addElement);
						addElement.___ChildNodeIndex = ___addPos;
                        ___AddCurrentParentNodeIntoStack(this.___currentParentElement);
						this.___currentParentElement = addElement;
							
					}
				}
				else
				{ 
					if(addElement.___elementTagType != CHtmlElementType.HTML)
					{
						// BEFORE BODY TAG
						if(this.___currentParentElement != null)
						{
                            addElement.___parentWeakRef = new WeakReference(this.___currentParentElement, false);
							
							addElement.___ChildNodeIndex = this.___currentParentElement.___childNodes.Add(addElement);
                            this.___currentParentElement.___setElementCriticalPropertiesChildNode(addElement);
						}
						if(addElement.___elementTagType != CHtmlElementType.LINK && addElement.___elementTagType != CHtmlElementType.META && addElement.___elementTagType != CHtmlElementType.STYLE)
						{
                            ___AddCurrentParentNodeIntoStack(this.___currentParentElement);
							this.___currentParentElement = addElement;
						}
						addElement.___IsElementVisible =false;
						addElement.___offsetWidth = 0;
						addElement.___offsetHeight = 0;
						addElement.___IsElementBlock = true;
                       
					}
                    return;
				}
                /*
                if (___currentParentElement == null && addElement.___elementTagType == CHtmlElementType.HTML)
                {
                    addElement.___parentWeakRef = new WeakReference(this, false);
                    ___AddCurrentParentNodeIntoStack(this.___currentParentElement);
                    this.___currentParentElement = addElement;
                    this.___documentElement = addElement;
                    addElement.___IsElementVisible = false;
                    addElement.___offsetWidth = 0;
                    addElement.___offsetHeight = 0;
                    addElement.___IsElementBlock = true;
                }
                 */
			} 
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled)
				{
					commonLog.LogEntry("___AddToParentElement Exception {0} :{1} : Parent[{2}] {3}", ex.Message,  addElement, this.___currentParentElement,  commonData.GetExceptionAsString(ex));
				}
			}
            if (addElement.___parentWeakRef == null)
			{
				if(addElement.___elementTagType != CHtmlElementType.HTML)
				{
					if(commonLog.LoggingEnabled)
					{
						commonLog.LogEntry("___AddToParentElement seems failed for {0} parent is empty", addElement);
					}
				}
			}
		


		}
        internal static void ___assignParentSVGRootElement(CHtmlElement addElement, CHtmlElement ___curParent)
        {
            CHtmlSVGElement ___svgElement = addElement as CHtmlSVGElement;
            if (___svgElement != null)
            {
                if(___curParent == null || ___curParent.___isSvgElement == false)
                {
                    return;
                }
                if (___curParent.___elementTagType == CHtmlElementType.SVG)
                {
                    ___svgElement.___parentSVGElementWeakReference = new WeakReference(___curParent, false);
                }
                else
                {
                    CHtmlElement ___lookupSVGElement = ___getParentElementByTagType(___curParent, CHtmlElementType.SVG, 16);
                    if (___lookupSVGElement != null)
                    {
                        ___svgElement.___parentSVGElementWeakReference = new WeakReference(___lookupSVGElement, false);
                    }else
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                        {
                            commonLog.LogEntry("strange... ___assignParentSVGRootElement('{0}') could not find any parent SVG Element", ___svgElement.toLogString());
                        }
                    }
                }
            }
        }
        internal int ___findParticularStringFromHTMLBuilder(string ___str)
        {
            string strHtmlBuilder = this.___HtmlBuilder.ToString();
            int pos = strHtmlBuilder.IndexOf(___str, 0, StringComparison.OrdinalIgnoreCase);
            if (pos == -1)
            {
                if (this.___IsHtmlResponseCompleted == true)
                {
                    return -10;
                }
                else
                {
                    return -1;
                }
            }
            return pos;
        }
		
		internal void ___CheckDynamicallyCreatedHeadBodyElementValidForDocument(CHtmlElement __element)
		{
            if (__element == null || this.___Disposing)
			{
				return;
			}
			if(this.___IsDomModeFullParseMode())
			{
				if(__element.___elementTagType == CHtmlElementType.HEAD)
				{

					if(this.___head == null)
					{
                        if (___findParticularStringFromHTMLBuilder("<head") < 0)
                        {
                            this.___head = __element;
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                            {
                                commonLog.LogEntry("newly created node has become head element {0}", __element);
                            }
                        }
					}
					else
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
						{
							commonLog.LogEntry("newly created head. but document already contains head. just cont...{0}", __element);
						}

					}
				}
				if(__element.___elementTagType == CHtmlElementType.BODY)
				{
             
					if(this.___head == null)
					{
                        if (___findParticularStringFromHTMLBuilder("<head") < 0)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                            {
                                commonLog.LogEntry("newly created body. but head is no exists. create dummy {0}", __element);
                            }
                            this.___CreateAdHocHeadElement();
                            this.___head = this.___headDummyElement;
                        }
                        else
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                            {
                                commonLog.LogEntry("newly created HeadElement will not become document.body becase there is static Head found in HTMLBuilder", __element);
                            }
                        }
					}
					if(this.___body == null)
					{
                        if (___findParticularStringFromHTMLBuilder("<body") < 0)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                            {
                                commonLog.LogEntry("newly created body bocome document.body {0}", __element);
                            }
                            this.___body = __element;
                            this.___IsHtmlBodyTagPassed = true;
                        }
                        else
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                            {
                                commonLog.LogEntry("newly created BodyElement will not become document.body becase there is static body found in HTMLBuilder", __element);
                            }
                            if (this.___IsHtmlBodyTagPassed == true)
                            {
                                this.___IsHtmlBodyTagPassed = false;
                            }
                        }
					}
					else
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
						{
							commonLog.LogEntry("newly created body element. but body already exists. {0}", __element);
						}

					}
				}
			}
		}
        internal void ___AddCurrentParentNodeIntoStack(CHtmlElement ___CurrentParentNode)
        {

            if (___CurrentParentNode != null && this.___CurrentParentNodeStackList != null)
            {
                this.___CurrentParentNodeStackList.Add(new WeakReference(___CurrentParentNode, false));
                if (this.___CurrentParentNodeStackList.Count > 16)
                {
                    this.___CurrentParentNodeStackList.RemoveAt(0);
                }
            }
        }
		public static CHtmlElement ___getParentElementByTagType(CHtmlElement ___currentElement, CHtmlElementType __tagType, int LookupLimit)
		{
			CHtmlElement ___currentParent = ___currentElement;
			int ___CurrentLookup = 0;
			while(___currentParent != null)
			{
				if(___CurrentLookup >= LookupLimit)
				{
					return null;
				}
				if(___currentParent.___elementTagType == __tagType)
				{
					return ___currentParent;
				}
				___currentParent  = ___currentParent.___parent as CHtmlElement;
				___CurrentLookup++;
			}
			return null;
		}
        /*
		private void ___closeElementWithTagString(string __sTag,int __CloseStartPosition,  int __CloseEndPostion)
		{
			this.___closeElementWithTagString(__sTag, __CloseStartPosition, __CloseEndPostion, false);

		}
		*/
        private void ___createBaseHtmlElement(bool createHTML, bool createHead, bool createBody)
        {
            CHtmlElement __elemHTML = null;
            CHtmlElement __elemHEAD = null;
            CHtmlElement __elemBODY = null;
            if (createHTML)
            {
                __elemHTML = CHtmlDocument.createCHtmlElementWithDomType("HTML", this.___documentDomType, null);
                __elemHTML.___IsDynamicElement = true;
                __elemHTML.___documentWeakRef = new WeakReference(this, false);


                this.___documentElement = __elemHTML;
                if(this.___head != null)
                {
                    this.___head.___parentWeakRef = new WeakReference(this.___documentElement, false);
                    this.___head.___documentWeakRef = new WeakReference(this, false);
                    this.___head.___ChildNodeIndex = this.___documentElement.___childNodes.Add(this.___head);
                }
                if(this.___body != null)
                {
                    this.___body.___parentWeakRef = new WeakReference(this.___documentElement, false);
                    this.___body.___documentWeakRef = new WeakReference(this, false);
                    this.___body.___ChildNodeIndex = this.___documentElement.___childNodes.Add(this.___body);
                }

            }
            if (createHead && this.___head == null)
            {
                __elemHEAD = CHtmlDocument.createCHtmlElementWithDomType("HEAD", this.___documentDomType, null);
                __elemHEAD.___documentWeakRef = new WeakReference(this, false);
                __elemHEAD.___IsDynamicElement = true;
                this.___head = __elemHEAD;
                if (this.___documentElement != null)
                {
                    __elemHEAD.___parentWeakRef = new WeakReference(this.___documentElement, false);
                    int pos = this.___documentElement.___childNodes.Add(__elemHTML);
                    this.___documentElement.___setElementCriticalPropertiesChildNode(__elemHEAD);
                    __elemHEAD.___ChildNodeIndex = pos;
                }
            }
            if (createBody && this.___body == null)
            {
                __elemBODY = CHtmlDocument.createCHtmlElementWithDomType("BODY", this.___documentDomType, null);
                __elemBODY.___IsDynamicElement = true;
                __elemBODY.___documentWeakRef = new WeakReference(this, false);
                this.___body = __elemBODY;
                if (this.___documentElement != null)
                {

                    int pos = this.___documentElement.___childNodes.Add(__elemBODY);

                    __elemBODY.___ChildNodeIndex = pos;
                    this.___documentElement.___setElementCriticalPropertiesChildNode(__elemBODY);
                    __elemBODY.___parentWeakRef = new WeakReference(this.___documentElement, false);
                }
            }
        }
		private void CloseElementChildren(CHtmlElement tagElement,  int __CloseStartPosition ,ref int depth, int _LimitDepth)
		{
			try
			{
				if(_LimitDepth <= 0)
				{
					_LimitDepth = 3;
				}
				int ___ChildrenCount = tagElement.___childNodes.Count;
				for(int bc =  0; bc < ___ChildrenCount ; bc ++)
				{
					CHtmlElement elementchild = tagElement.___childNodes[bc] as CHtmlElement;
					if(elementchild != null)
					{
						if(commonHTML.IsElemeneITextOrIDrawOrComment(elementchild) == true)
							continue;
						if(elementchild.___ClosedReson == CHtmlTagClosedReasonType.Open)
						{
							depth++;
							if(depth <= _LimitDepth)
							{
								CloseElementChildren(elementchild, __CloseStartPosition, ref depth, _LimitDepth);
							}
							depth--;
							if(elementchild.___elementTagType == CHtmlElementType.SCRIPT  || elementchild.___elementTagType  == CHtmlElementType.STYLE)
							{
								elementchild.___ClosedReson = CHtmlTagClosedReasonType.BodyCleanUp;
								if(elementchild.___IsElementVisible == true)
								{
									elementchild.___IsElementVisible = false;
								}

								continue;
							}

							if(bc == ___ChildrenCount -1)
							{
								// this is very last children of body
								// set closing postion just prior to body start
								elementchild.___TagCloseStartPosition = __CloseStartPosition - 2;
								elementchild.___TagCloseEndPosition = __CloseStartPosition - 1;
							}
							elementchild.___ClosedReson = CHtmlTagClosedReasonType.BodyCleanUp;
							if(elementchild.___isCalculateElementBoundsCalled == false)
							{
								___calculateElementBounds(elementchild);
							}
						}
					}
				}
			} 
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
				{
					commonLog.LogEntry("CloseElementChildren", ex);
				}
			}
		}
		private void ___closeElementWithTagStringForXML(string __sTag,int __CloseStartPosition,  int __CloseEndPostion, bool CloseOtherTagIfOpen, CHtmlElement ___targetClosingElement)
		{
			if(this.___currentParentElement == null)
			{
				return;
			}
			CHtmlElement __LookUpElement = null;
			if( ___targetClosingElement != null)
			{
				__LookUpElement =  ___targetClosingElement;
				goto PerformClose;
			}

			if(string.Equals(this.___currentParentElement.tagName,__sTag, StringComparison.Ordinal) == true)
			{
				__LookUpElement = this.___currentParentElement;

				goto PerformClose;
			}
			if(__LookUpElement == null)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
				{
					commonLog.LogEntry("XML Node Close Failed TAG:{0} {1} {2} {3} {4}", __sTag, __CloseStartPosition, __CloseEndPostion,  CloseOtherTagIfOpen,  ___targetClosingElement);
				}
				return;
			}
			PerformClose:
				if(__LookUpElement != null)
				{
					__LookUpElement.___ClosedReson = CHtmlTagClosedReasonType.EndSimple;
					__LookUpElement.___TagCloseStartPosition = __CloseStartPosition;
					__LookUpElement.___TagCloseEndPosition   = __CloseEndPostion;
					__LookUpElement.___ClosedReson = CHtmlTagClosedReasonType.ParentCleanup;
					this.___currentParentElement = null;
                    this.___currentParentElement = __LookUpElement.___parent as CHtmlElement;
					return;
				}
		}
		private void ___closeElementWithTagString(string __sTag,int __CloseStartPosition,  int __CloseEndPostion, bool CloseOtherTagIfOpen, CHtmlElement ___targetClosingElement)
		{
			if(this.___IsDomModeXMLLikeStyleMode() == true)
			{
				this.___closeElementWithTagStringForXML(commonHTML.FasterToUpper(__sTag), __CloseStartPosition, __CloseEndPostion,  CloseOtherTagIfOpen,  ___targetClosingElement);
				return;
			}
			bool __IsParentFound = false;
			bool __IsStrongTag  = false;
			CHtmlElement __ClosingElement = null;
			CHtmlElement __LookUpElement = null;
			CHtmlElement __LookUpElementOriginal = null;
			int __LookupCount= 0;

			CHtmlElementType ClosingTagType = CHtmlElementType.UNKNOWN;
			if( ___targetClosingElement == null)
			{
				ClosingTagType = commonHTML.GetTagNameType(__sTag);
			}
			else
			{
				ClosingTagType  =  ___targetClosingElement.___elementTagType;
			}

			if(commonHTML.elementTagTypesAppearsOnlyHeaderSortedList.ContainsKey(ClosingTagType) == true)
			{
				try
				{
					switch(__sTag)
					{
						case "HEAD":
                            if (this.___currentParentElement != null && this.___currentParentElement.___elementTagType == CHtmlElementType.HEAD)
							{
								this.___currentParentElement.___TagCloseStartPosition =  __CloseStartPosition;
								this.___currentParentElement.___TagCloseEndPosition = __CloseEndPostion;
								this.___currentParentElement.___ClosedReson = CHtmlTagClosedReasonType.EndSimple;
								this.___currentParentElement.___isCalculateElementBoundsCalled = true;
                                this.___currentParentElement = this.___currentParentElement.___getParentElement();
							}
							break;
						case "HTML":
							if(this.___documentElement != null &&  this.___documentElement.___elementTagType  == CHtmlElementType.HTML)
							{
								// assuming all[0] is html tag
								CHtmlElement htmlElement = this.___documentElement;
								htmlElement.___TagCloseStartPosition =  __CloseStartPosition;
								htmlElement.___TagCloseEndPosition = __CloseEndPostion;
								htmlElement.___ClosedReson = CHtmlTagClosedReasonType.EndBackward;
                                if (this.___IsElementCreationNeedsToBeDynamic == false)
                                {
                                    this.___calculateElementBounds(htmlElement);
                                }
								if(this.___currentParentElement  != null)
								{
									this.___currentParentElement = null;
								}
								this.___currentClosedElement = null;
							}
							else
							{
								if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
								{
									commonLog.LogEntry("Stange documentElement is not html or emptry...");
								}
								CHtmlCollection htmlList = this.getElementsByTagName("HTML");
								if(htmlList.length > 0)
								{
									if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
									{
										commonLog.LogEntry("HTML Tag Found make it close...");
									}
									try
									{
										CHtmlElement htmlElement = htmlList[0] as CHtmlElement;
										htmlElement.___TagCloseStartPosition =  __CloseStartPosition;
										htmlElement.___TagCloseEndPosition = __CloseEndPostion;
										htmlElement.___ClosedReson = CHtmlTagClosedReasonType.EndBackward;
                                        if (this.___IsElementCreationNeedsToBeDynamic == false)
                                        {
                                            this.___calculateElementBounds(htmlElement);
                                        }
										if(this.___currentParentElement  != null)
										{
											this.___currentParentElement = null;
										}
										this.___currentClosedElement = null;
									}
                                    catch { }

								}
							}
							break;
						case "TITLE":
							if(this.___currentParentElement.___elementTagType == CHtmlElementType.TITLE)
							{
								this.___currentParentElement.___ClosedReson = CHtmlTagClosedReasonType.EndSimple;
								this.___currentParentElement.___TagCloseStartPosition =  __CloseStartPosition;
								this.___currentParentElement.___TagCloseEndPosition = __CloseEndPostion;
								//this.___currentParentElement.ComposeInnnerText();
								this.___currentParentElement.___isCalculateElementBoundsCalled = true;
                                string ___strTitleValue = ___currentParentElement.innerText;
                                if (string.IsNullOrEmpty(___strTitleValue) == false)
                                {
                                    if (commonHTML.FasterIsWhiteSpaceLimited(___strTitleValue[0]) == true || commonHTML.FasterIsWhiteSpaceLimited(___strTitleValue[___strTitleValue.Length - 1]) == true)
                                    {
                                        ___strTitleValue = ___strTitleValue.Trim();
                                    }
                                }
                                this.___title = ___strTitleValue;
                                this.___currentParentElement = this.___currentParentElement.___getParentElement();
							}
							else
							{
								
								CHtmlElement elemTitle = null;

								if(elemTitle != null)
								{
									elemTitle.___ClosedReson = CHtmlTagClosedReasonType.EndSimple;
									elemTitle.___TagCloseStartPosition = __CloseStartPosition;
									elemTitle.___TagCloseEndPosition = __CloseEndPostion;
                                    string ___strTitleValue = elemTitle.innerText;
                                    if (string.IsNullOrEmpty(___strTitleValue) == false)
                                    {
                                        if (commonHTML.FasterIsWhiteSpaceLimited(___strTitleValue[0]) == true || commonHTML.FasterIsWhiteSpaceLimited(___strTitleValue[___strTitleValue.Length - 1]) == true)
                                        {
                                            ___strTitleValue = ___strTitleValue.Trim();
                                        }
                                    }
                                    this.___title = ___strTitleValue;

								}
								else
								{
									if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
									{
										commonLog.LogEntry("CurrentParent Node is not title, title not found");
									}
								}

							}
							break;
					}
				} 
				catch(Exception ex)
				{
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
					{
						commonLog.LogEntry("___closeElementWithTagString Head", ex);
					}
				}
				return;
			}

			if(___targetClosingElement!= null)
			{
				__IsParentFound = true;
				__ClosingElement = ___targetClosingElement;
				goto 	TargetFoundBlock;
			}
			
			// Only for <img> tag purpose
			if(commonHTML.elementTagTypesForNonCloseTagElementCheckSortedList.ContainsKey(ClosingTagType) == true)
			{
				if(this.___currentClosedElement != null && this.___currentClosedElement.tagName == __sTag)
				{
					if(this.___currentParentElement.tagName != __sTag)
					{
						return;
					}
				}
				if(this.___currentParentElement.tagName != __sTag)
				{

				}

				//	return;
			}
			if(commonHTML.elementTagTypesNoClosingTagsSortedList.ContainsKey(ClosingTagType) == true)
			{
				// Tags should have been closed
				return;
			}
			

			/* Checks Strong Tags or not */
			if(commonHTML.elementTagTypesForStrongLayoutSortedList.ContainsKey(ClosingTagType) == true)
			{
				__IsStrongTag = true;
			}
			else
			{
				__IsStrongTag = false;

			}

			this.___currentClosedElement = null;
#if DEBUG
			/*
			if(__CloseEndPostion == 6748)
			{
				commonLog.LogEntry(__sTag);
			}
			*/
#endif
			if(this.___currentParentElement == null)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
				{
					commonLog.LogEntry("BUGBUG!!! CloseParentElement does not have Current Element for {0} {1}", __sTag, __CloseEndPostion);
				}
				return;
			}
			__LookUpElement = this.___currentParentElement;
			__LookUpElementOriginal = this.___currentParentElement;
			
			
			if(string.Equals(__sTag,"BODY", StringComparison.OrdinalIgnoreCase) == true)
			{
				if(this.___body != null)
				{
					this.___body.___TagCloseStartPosition = __CloseStartPosition;
					this.___body.___TagCloseEndPosition = __CloseEndPostion;
					this.___body.___ClosedReson = CHtmlTagClosedReasonType.BodyCleanUp;
					int ___bodyChildrenCount = this.___body.___childNodes.Count;
					int ___bodyCleanUpTotal = 0;
					int ___bodyCleanUpCaluculateDone = 0;
                    #region bodyChildrenClose
					try
					{
						int ___Depth = 0;
						this.CloseElementChildren(this.___body, __CloseStartPosition, ref ___Depth, 2);
					} 
					catch(Exception ex)
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
						{
							commonLog.LogEntry("BodyTagClose Process", ex);
						}
					}
                    #endregion
					if(___bodyCleanUpTotal > 0)
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
						{
							commonLog.LogEntry("<body> had {0} open tags and {1} calc",___bodyCleanUpTotal, ___bodyCleanUpCaluculateDone);
						}
					}
                    if (this.___IsElementCreationNeedsToBeDynamic == false)
                    {
                        ___calculateElementBounds(___body);
                    }
				}
				else
				{
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
					{
                        commonLog.LogEntry("___closeElementWithTagString Tried to Close [Body] but body is is not found all count : {0} Disposing : {1}", -1, this.___Disposing);
					}
				}
				this.___currentParentElement = this.___documentElement as CHtmlElement;
				this.___currentClosedElement = null;
				return;
			}
			//System.Text.StringBuilder sbParent = new StringBuilder();
			while(__LookUpElement != null)
			{
				if(__LookUpElement.___elementTagType == ClosingTagType && __LookUpElement.___parentWeakRef  != null)
				{
					__IsParentFound = true;
					__ClosingElement = __LookUpElement;


					

					
					break;
				}
				if(__IsStrongTag == false)
				{
					if(commonHTML.elementTagTypesForStrongLayoutSortedList.ContainsKey(__LookUpElement.___elementTagType) == true)
					{
						__IsParentFound = false;
						__ClosingElement = null;
						break;
					}
				}
                __LookUpElement = __LookUpElement.___parent as CHtmlElement;
				__LookupCount++;
			}
			// =========================================================================================
			TargetFoundBlock:
				// =========================================================================================
				if(__IsParentFound == true)
				{
					try
					{
						if(__ClosingElement.___IsElementBlock == false && __ClosingElement.___childNodes.Count == 0)
						{
							/*
							if(__ClosingElement.___parent != null)
							{
								int TextRangeIndex = this.CreateTextRangeForNonText(__ClosingElement.___elementTagType, __ClosingElement);
								if( TextRangeIndex > -1)
								{
									HTML.CHtmlElement textElement = __ClosingElement.childNodes[TextRangeIndex] as CHtmlElement;
									if(textElement != null && textElement.___elementTagType == CHtmlElementType._ITEXT)
									{
										if(textElement.___isCalculateElementBoundsCalled == false)
										{
											this.___calculateTextElementBounds(textElement, null);
										}
									}	
								}
							}
							*/
						}
					}
					catch
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
						{
							commonLog.LogEntry("BUGBUG! Bad Closing");
						}
					}
				}
			if(CloseOtherTagIfOpen && __IsParentFound && __LookupCount > 0)
			{
				__LookUpElement = __LookUpElementOriginal;
				while(__LookUpElement != null)
				{
					if(__ClosingElement == __LookUpElement)
					{
						break;
					}
                    if (__LookUpElement.___elementTagType != ClosingTagType && __LookUpElement.___parentWeakRef != null)
					{
						if(__LookUpElement.___TagCloseEndPosition  == -1 && __ClosingElement != __LookUpElement)
						{
							__LookUpElement.___TagCloseStartPosition = __CloseStartPosition;
							__LookUpElement.___TagCloseEndPosition   = __CloseEndPostion;
							__LookUpElement.___ClosedReson = CHtmlTagClosedReasonType.ParentCleanup;

                            if (this.___IsElementCreationNeedsToBeDynamic == false)
                            {
                                if (commonHTML.elementTagTypesNoStylesheetLookupSortedList.ContainsKey(__LookUpElement.___elementTagType) == false)
                                {
                                    ___calculateElementBounds(__LookUpElement);
                                }
                            }
						}

					}
                    __LookUpElement = __LookUpElement.___parent as CHtmlElement;
				}
			}
			if(__IsParentFound &&  __ClosingElement != null)
			{
                /*
#if DEBUG
                if (string.IsNullOrEmpty(__ClosingElement.___href) == false && __ClosingElement.___href.IndexOf("00-top.jpg") > -1)
                {
                    commonLog.LogEntry("HERE");
                }
#endif
                 */
				int ___c = 0;
                try
                {
                    if (__ClosingElement.___childNodes.Count > 0)
                    {
                        this.CloseElementChildren(__ClosingElement, __CloseStartPosition - 1, ref ___c, 1);
                    }
                }
                catch { }

				__ClosingElement.___TagCloseStartPosition = __CloseStartPosition;
				__ClosingElement.___TagCloseEndPosition   = __CloseEndPostion;
				__ClosingElement.___ClosedReson = CHtmlTagClosedReasonType.EndSimple;

				this.___currentClosedElement = __ClosingElement;

				//commonLog.LogEntry("LookUp {0} found at {1}", __sTag, __LookupCount);
                this.___currentParentElement = __ClosingElement.___parent as CHtmlElement;
                if (this.___IsElementCreationNeedsToBeDynamic == false)
                {
                    if (__ClosingElement.___isCalculateElementBoundsCalled == false)
                    {
                        if (commonHTML.elementTagTypesNoStylesheetLookupSortedList.ContainsKey(__ClosingElement.___elementTagType) == false)
                        {
                            ___calculateElementBounds(__ClosingElement);
                        }
                        else if (commonHTML.IsElemeneITextOrIDraw(__ClosingElement) == true)
                        {
                            ___calculateTextElementBounds(__ClosingElement);
                        }
                    }
                }
				// ================================================================
				//  �^�O���������̑O�㏈��                                                           
				// ================================================================
				// ================================================================
				// <P> �v�f�̒����
				// {"address", "article", "aside", "blockquote",
				// "dir", "div", "fieldset", "footer", "form", "h1", "h2", "h3",
				// "h4", "h5", "h6", "header", "hgroup", "hr", "menu", "nav",
				// "ol", "p", "pre", "section", "table", "ul"};
				//   �����ꂽ�ꍇ�A�I���^�O��I�����邱�Ƃ��\�ł��B
				// �܂��A���̗v�f���A�e�v�f�̍Ō�ɔz�u�����ꍇ��ȗ����邱��
				// ���ł��܂��B
				// ================================================================
                if (__ClosingElement.___parentWeakRef != null && __ClosingElement.___getParentElement().___elementTagType == CHtmlElementType.P && commonHTML.elementTagTypesPTagPossilbeClosingTagSortedList.ContainsKey(__ClosingElement.___elementTagType) == true)
				{
                    CHtmlElement __ClosingElementParent = __ClosingElement.___getParentElement();
					__ClosingElementParent.___TagCloseStartPosition = __ClosingElement.___TagOpenStartPosition -1;
					__ClosingElementParent.___TagCloseEndPosition   = __ClosingElement.___TagOpenStartPosition -1;
					__ClosingElementParent.___ClosedReson =  CHtmlTagClosedReasonType.ContextCleanup;
					/*
					if(__ClosingElement.parent.IsInnerTextComposed == false)
					{
						__ClosingElement.parent.ComposeInnnerText();
					}
					*/
                    if (this.___IsElementCreationNeedsToBeDynamic == false)
                    {
                        ___calculateElementBounds(__ClosingElementParent);
                    }
					this.___currentClosedElement = __ClosingElementParent;
                    this.___currentParentElement = __ClosingElementParent.___getParentElement();

				}
			}

			// ================================================================
			// If the block and non-floting element. Set parent element's Bottom point height 
			// ================================================================
			if(__ClosingElement != null && __ClosingElement.___IsElementVisible == true && __ClosingElement.___IsElementBlock == true && __ClosingElement.___IsElementFloat == false && __ClosingElement.___offsetHeight > 0)
			{
				if( __ClosingElement.___isElementPositionAbsoluteOrStatic == false)
				{
					if(__ClosingElement.___parentWeakRef !=null)
					{
						switch(__ClosingElement.___elementTagType)
						{
							case CHtmlElementType.TR:
							case CHtmlElementType.TD:
							case CHtmlElementType.TBODY:
							case CHtmlElementType.TFOOT:
							case CHtmlElementType.CAPTION:
								goto SkipBottom;
						}
                        __ClosingElement.___getParentElement().___CHtmlElementPreviousBlockElementBottom = __ClosingElement.___getParentElement().___CHtmlElementWorkingBlockElementBottom;
                        __ClosingElement.___getParentElement().___CHtmlElementWorkingBlockElementBottom += __ClosingElement.___offsetHeight;
						//commonLog.LogEntry("Working Bottom has set {0} : {1} -> {2}",__ClosingElement.tagName , __ClosingElement.parent.CHtmlElementPreviousBlockElementBottom, __ClosingElement.parent.CHtmlElementWorkingBlockElementBottom);
					}
				}
			}
			SkipBottom:
				return;

		}

		private string GeRawHTMLStringClean(int __currentPos, int ___len)
		{
			StringBuilder __sb = new StringBuilder();
			if( __currentPos + ___len >= this.___HtmlBuilder.Length)
			{
				___len =  this.___HtmlBuilder.Length - __currentPos - 1;
			}
			for(int i = __currentPos ; i < __currentPos + ___len ; i++)
			{
                try
                {
                    if (i < 0)
                        continue;
                    if (i >= this.___HtmlBuilder.Length)
                        break;
                    __sb.Append(this.___HtmlBuilder[i]);
                }

                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                    }
                }

			}
			__sb.Replace('\r', ' ');
			__sb.Replace('\n', ' ');
			return __sb.ToString();
		}

		private string GeRawHTMLStringDirty(int __currentPos)
		{
			const int __MAX = 200;
			StringBuilder __sb = new StringBuilder();
			for(int i = __currentPos- __MAX; i < __currentPos + __MAX ; i++)
			{
				try
				{
					if(i < 0)
						continue;
                    if (i >= this.___HtmlBuilder.Length)
						break;
                    __sb.Append(this.___HtmlBuilder[i]);
				}
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                    }
                }

			}
			__sb.Replace('\r', ' ');
			__sb.Replace('\n', ' ');
			return __sb.ToString();
																			  
		}
		private void ___composeTableCells(CHtmlElement tableElement)
		{
            System.Collections.Generic.SortedList<int, double> __colWidthMaxList = new System.Collections.Generic.SortedList<int, double>(); // ID is int
            System.Collections.Generic.SortedList<int, double> __rowHeightMaxList =new System.Collections.Generic.SortedList<int, double>();// ID is int
			System.Collections.Hashtable __mappedCellList = new Hashtable();
			// Reget table width from style width value
			if(tableElement.___style != null)
			{
                tableElement.___offsetWidth = commonHTML.GetDoubleValueFromString(tableElement.___style.___Width, tableElement.___availWidth, this.___HTMLTagRemUnitSize);
			}
			
			try
			{
				bool __IsContainsTDCellSecondLevel = false;
				bool __IsMappingState = false;

			StartMapping:
				int __trCount = 0;
				int __tdCountMax = 0;
				int __CellMappedCount = 0;
                int __tableChildCount = tableElement.___childNodes.Count;
                for (int r0 = 0; r0 < __tableChildCount; r0++)
				{
					int __tdCount = 0;
					CHtmlElement r0Element = tableElement.___childNodes[r0] as CHtmlElement;
					if(__IsContainsTDCellSecondLevel == false && (r0Element.___elementTagType  == CHtmlElementType.THEAD || r0Element.___elementTagType  == CHtmlElementType.TBODY || r0Element.___elementTagType  == CHtmlElementType.TFOOT))
					{
						__IsContainsTDCellSecondLevel = true;
					}
					if(commonHTML.elementTagTypesTRTDTHSortedList.ContainsKey(r0Element.___elementTagType) == true)
					{
						___calculateTableElements(tableElement, r0Element, ref __trCount, ref __tdCount,ref __colWidthMaxList, ref __rowHeightMaxList, ref __CellMappedCount,ref __mappedCellList ,  __IsMappingState);
					}
					if(r0Element.___elementTagType  != CHtmlElementType.TABLE)
					{
                        int r0ChildCount = r0Element.___childNodes.Count;
                        for (int c0 = 0; c0 < r0ChildCount; c0++)
						{
							CHtmlElement c0Element = r0Element.___childNodes[c0] as CHtmlElement;
							if(commonHTML.elementTagTypesTRTDTHSortedList.ContainsKey(c0Element.___elementTagType) == true)
							{
								___calculateTableElements(tableElement,c0Element, ref __trCount, ref __tdCount,ref __colWidthMaxList, ref __rowHeightMaxList,ref __CellMappedCount,ref __mappedCellList , __IsMappingState);
							}
							if(c0Element.___elementTagType != CHtmlElementType.TABLE)
							{
                                int c0ChildCount = c0Element.___childNodes.Count;
                                for (int c1 = 0; c1 < c0ChildCount; c1++)
								{
									CHtmlElement c1Element = c0Element.___childNodes[c1] as CHtmlElement;
									if(commonHTML.elementTagTypesTRTDTHSortedList.ContainsKey(c1Element.___elementTagType) == true)
									{
										___calculateTableElements(tableElement, c1Element, ref __trCount, ref __tdCount,ref __colWidthMaxList, ref __rowHeightMaxList, ref __CellMappedCount, ref __mappedCellList ,  __IsMappingState);
									}
	
								}	
								if(c0Element.___elementTagType  == CHtmlElementType.TR && __tdCount > 0)
								{
									if(__tdCountMax < __tdCount)
									{
										__tdCountMax = __tdCount;
									}
									__tdCount = 0;
								}
							}
						}	
						if(r0Element.___elementTagType  == CHtmlElementType.TR && __tdCount > 0)
						{
							if(__tdCountMax < __tdCount)
							{
								__tdCountMax = __tdCount;
							}
							__tdCount = 0;
						}	
					}
				}
				if(!__IsMappingState)
				{								
					tableElement.TableCells = new CHtmlElement[__trCount,__tdCountMax];
					tableElement.TableRows  = new CHtmlElement[__trCount];
					__IsMappingState = true;
					//commonLog.LogEntry("{0} cell has been initialized : {1}x{2}",tableElement.ToString(), __trCount,__tdCountMax);
					goto StartMapping;
				}
				//commonLog.LogEntry("{0} Cells has been Created : ({1}x{2}) Mapped : {3}",tableElement.ToString(), __trCount,__tdCountMax,  __CellMappedCount);
				try
				{
					if(__tdCountMax > 0)
					{
					
						//if( tableElement.cells[tableElement.cells.GetLongLength(0) -1, tableElement.cells.GetLongLength(1) - 1] != null)
						//{
						//tableElement.cells[tableElement.cells.GetLongLength(0) -1, tableElement.cells.GetLongLength(1) - 1].GetScreenPointFromTotalParentOffsetBounds();
						/*
							 * <TD> does not have location for table. 
							 * <TR> -> <TD> always. 
							 * Use parent to get correct position.
							 */
						double rowTotal = 0;
						double colTotal = 0;
                        int ____HeightMaxListCount = __rowHeightMaxList.Count;
						for(int i = 0; i < ____HeightMaxListCount; i ++)
						{
                           
							rowTotal +=  __rowHeightMaxList.Values[i];
						}
                        int ___WidthMaxListCount = __colWidthMaxList.Count;
                        for (int i = 0; i < ___WidthMaxListCount; i++)
                        {
                            colTotal += __colWidthMaxList.Values[i];

						}
						tableElement.___offsetHeight = rowTotal;
						tableElement.___offsetWidth = colTotal;


						// =======================
						//  Original Code 
						// =======================
						/*
							tableElement.offsetHeight  = tableElement.cells[tableElement.cells.GetLongLength(0) -1, tableElement.cells.GetLongLength(1) - 1].parent.offsetTop +  tableElement.cells[tableElement.cells.GetLongLength(0) -1 , tableElement.cells.GetLongLength(1) - 1].parent.offsetHeight;
							tableElement.offsetWidth  = tableElement.cells[tableElement.cells.GetLongLength(0) -1, tableElement.cells.GetLongLength(1) - 1].offsetLeft +  tableElement.cells[tableElement.cells.GetLongLength(0) -1 , tableElement.cells.GetLongLength(1) - 1].offsetWidth;
							*/

						if(__IsContainsTDCellSecondLevel)
						{
							// means childrens are either tbody, tfoolter,theader
                            int tableChildCount = tableElement.___childNodes.Count;
                            for (int l1 = 0; l1 < tableChildCount; l1++)
							{
								CHtmlElement tbodyElement = tableElement.___childNodes[l1] as CHtmlElement;
								if(tbodyElement != null)
								{
									tbodyElement.___offsetWidth = tableElement.___offsetWidth;
									try
									{
										double tbodyHeight = 0;
                                        int ___tBodyElementCount = tbodyElement.___childNodes.Count;
                                        for (int i = 0; i < ___tBodyElementCount; i ++ )
                                        {
                                            CHtmlElement rowElement = tbodyElement.___childNodes[i] as CHtmlElement;
                                            if (rowElement.___IsElementVisible == true)
                                            {
                                                tbodyHeight += rowElement.___offsetHeight;
                                            }
                                        }
										tbodyElement.___offsetHeight = tbodyHeight;
									} 
									catch(Exception ex)
									{
										if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
										{
											commonLog.LogEntry("Table Bounds Final", ex);
										}
									}
								}
								else
								{
									if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
									{
										commonLog.LogEntry("Strange Table Element not found...");
									}
								}
							}
						}
						//}
					}
					else
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
						{
							commonLog.LogEntry("Stange Final Cell is null with TD Max : {0}....",__tdCountMax );
						}
					}
				} 
				catch (Exception exfinal)
				{
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
					{
						commonLog.LogEntry("Final TableElement Bounds Settings", exfinal);
					}
				}
				
			} 
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
				{
					commonLog.LogEntry("ComposeTableCells", ex);
				}
			}
			finally
			{
				if(__colWidthMaxList != null)
				{
					__colWidthMaxList.Clear();
					__colWidthMaxList = null;
				}
				if(__rowHeightMaxList != null)
				{
					__rowHeightMaxList.Clear();
					__rowHeightMaxList = null;

				}
				if(__mappedCellList != null)
				{
					__mappedCellList.Clear();
					__mappedCellList = null;
				}
			}
		}

		
        private void ___calculateTableElements(CHtmlElement tableElement, CHtmlElement cellElement, ref int _tr, ref int _td, ref  System.Collections.Generic.SortedList<int, double> __colWidthMaxList, ref System.Collections.Generic.SortedList<int, double> __rowHeightMaxList, ref int _mapptedCount, ref System.Collections.Hashtable __mappedCellList, bool MappingStage)
		{
			/*
#if DEBUG
			if(cellElement.id == "HOGEHOGE")
			{
				commonLog.LogEntry("HERE");
			}
#endif
			*/
			int ___previousTDCount = _td;
			int ___previousTRCount = _tr;
			int __rowSpanValue = 0;
			int __colSpanValue  = 0;
			bool _IsFirstTR = false;
			if(_tr == 0)
			{
				_IsFirstTR = true;
			}

			switch(cellElement.___elementTagType)
			{
				case CHtmlElementType.TH:
				case CHtmlElementType.TD:
					_td++;
					break;
				case CHtmlElementType.TR:
					_tr++;
					break;
			}
			try
			{
				if(cellElement.___attributes.ContainsKey("rowspan"))
				{
					try
					{
                        string strRowSpan = commonHTML.GetElementAttributeInString(cellElement,"rowspan");
                        if (string.IsNullOrEmpty(strRowSpan) == false)
                        {
                            if (int.TryParse(strRowSpan, out __rowSpanValue))
                            {
                                if (__rowSpanValue > 1)
                                {
                                    _tr = _tr + __rowSpanValue - 1;
                                }
                            }
                        }
					} 
					catch
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
						{
							commonLog.LogEntry("Unable to parse rowSpan");
						}
					}
				}
				if(cellElement.___attributes.ContainsKey("colspan"))
				{
					try
					{
                        string strColSpan = commonHTML.GetElementAttributeInString(cellElement, "colspan");
                        if (string.IsNullOrEmpty(strColSpan) == false)
                        {
                            if (int.TryParse(strColSpan, out  __colSpanValue))
                            {
                                if (__colSpanValue > 1)
                                {
                                    _td = _td + __colSpanValue - 1;
                                }
                            }
                        }

					}
					catch
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
						{
							commonLog.LogEntry("Unable to parse colSpan");
						}
					}
				}
			} 
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
				{
					commonLog.LogEntry("SumUpTableCells Colspan RowSpan", ex);
				}
			}
			try
			{
				if(MappingStage)
				{
                    #region MappingAREA
					try
					{
						if(cellElement.___elementTagType == CHtmlElementType.TR)
						{
							
							cellElement.___offsetTop = 0;
							for(int __rowBefore = 0; __rowBefore < _tr - 1; __rowBefore ++)
							{
								if(__rowHeightMaxList.ContainsKey(__rowBefore) == true)
								{
									cellElement.___offsetTop += __rowHeightMaxList[ __rowBefore];
								}
							}
							if(__rowHeightMaxList.ContainsKey(___previousTRCount - 1) == true)
							{
								cellElement.___offsetHeight = __rowHeightMaxList[___previousTRCount - 1];
							}
							double __rowWidth = 0;
							try
							{
                                if (cellElement.___style.___styleSizeMode != CHtmlSizeModeType.Width && cellElement.___style.___styleSizeMode != CHtmlSizeModeType.Both)
								{
                                    int ___colWidthMaxListCount = __colWidthMaxList.Count;
									for(int i = 0; i <  ___colWidthMaxListCount; i ++)
									{
                                        __rowWidth += __colWidthMaxList.Values[i];
									}	
								}
							} 
							catch
							{
								if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
								{
									commonLog.LogEntry("Eror Row Height Sum up");
								}
							}
							finally
							{
                                if (cellElement.___style.___styleSizeMode != CHtmlSizeModeType.Width && cellElement.___style.___styleSizeMode != CHtmlSizeModeType.Both)
								{
									if(cellElement.___availWidth > __rowWidth)
									{
										cellElement.___offsetWidth  = __rowWidth;
									}
								}
							}

						}
						else if(cellElement.___elementTagType  == CHtmlElementType.TD  || cellElement.___elementTagType   == CHtmlElementType.TH)
						{
							if(__mappedCellList.ContainsKey(cellElement.___elementOID) == true)
							{
								return;
							}
							if(tableElement.TableCells != null  && _tr > 0 && _td > 0)
							{
								try
								{
									try
									{
                                        if (cellElement.___style.___styleSizeMode != CHtmlSizeModeType.Width && cellElement.___style.___styleSizeMode != CHtmlSizeModeType.Both)
										{
											//cellElement.offsetWidth  =  (float) __colWidthMaxList[___previousTDCount];
											double _newOffsetWidth = 0;
                                            if (__colWidthMaxList.TryGetValue(___previousTDCount, out _newOffsetWidth) == true)
                                            {
                                                if (_newOffsetWidth < cellElement.___availWidth)
                                                {
                                                    cellElement.___offsetWidth = _newOffsetWidth;
                                                }
                                            }
										}
									}
									catch
									{
										if(__colWidthMaxList.Count == 1)
										{
                                            if (cellElement.___style.___styleSizeMode != CHtmlSizeModeType.Width && cellElement.___style.___styleSizeMode != CHtmlSizeModeType.Both)
											{
												double _newOffsetWidth =  __colWidthMaxList.Values[0];
												if(_newOffsetWidth < cellElement.___availWidth)
												{
													cellElement.___offsetWidth = _newOffsetWidth;
												}
											}

										}
										else
										{
											if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
											{
												commonLog.LogEntry("SumUpTables Cells Unable to obtain Width Value {0} from list : {1} Fixed : {2}", ___previousTDCount, __colWidthMaxList.Count, tableElement.___IsTableCellWidthFixedOnEachColumn);
											}
										}
									}
									int colSpanCurrent = __colSpanValue - 1;
									try
									{
										while(colSpanCurrent > 0)
										{
											if(__colWidthMaxList.ContainsKey(___previousTDCount + colSpanCurrent))
											{
												double _colSpanTotal = cellElement.___offsetWidth;
												_colSpanTotal   +=   __colWidthMaxList[___previousTDCount + colSpanCurrent];
												if(cellElement.___availWidth > _colSpanTotal)
												{
													cellElement.___offsetWidth = _colSpanTotal;
												}
											}
											colSpanCurrent--;
										}
									} 
									catch
									{
										if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
										{
											commonLog.LogEntry("ColSpan failed");
										}
									}
									if(__rowHeightMaxList.ContainsKey(___previousTRCount - 1))
									{
										cellElement.___offsetHeight =  __rowHeightMaxList[___previousTRCount - 1];
									}
									int rowSpanCurrent = __rowSpanValue -1;
									try
									{
										while(rowSpanCurrent > 0)
										{
											if(__rowHeightMaxList.ContainsKey(___previousTRCount - 1 + rowSpanCurrent))
											{
												cellElement.___offsetHeight  +=  __rowHeightMaxList[___previousTRCount - 1 + rowSpanCurrent];
											}
											rowSpanCurrent--;

										}
									} 
									catch
									{
										if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
										{
											commonLog.LogEntry("RowSpan failed");
										}
									}

									if(_td > 0)
									{
										cellElement.___offsetLeft = 0;
										for(int __colBefore = 0; __colBefore < _td - __colSpanValue - 1; __colBefore ++)
										{
											if(__colWidthMaxList.ContainsKey( __colBefore))
											{
												cellElement.___offsetLeft += __colWidthMaxList[ __colBefore];
											}
										}

									}
									if(_tr > -1)
									{
										cellElement.___offsetTop = 0;


									}
									else if(_tr <= 1)
									{
										cellElement.___offsetTop = 0;
									}
								} 
								catch(Exception ex)
								{
									if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
									{
										commonLog.LogEntry("Cell Layout", ex);
									}
								}
								if( cellElement.___elementTagType == CHtmlElementType.TD ||  cellElement.___elementTagType  == CHtmlElementType.TH)
								{
									tableElement.TableCells[_tr -1, ___previousTDCount] = null;
									tableElement.TableCells[_tr -1, ___previousTDCount] = cellElement;
									if(cellElement.___parentWeakRef != null)
									{
										try
										{
											if(tableElement.TableRows[_tr - 1] == null)
											{
                                                tableElement.TableRows[_tr - 1] = cellElement.___getParentElement();
											}
										}
                                        catch (Exception ex)
                                        {
                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                            {
                                                commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                            }
                                        }
									}
									__mappedCellList[cellElement.___elementOID] =  cellElement;
									_mapptedCount++;
								}
							}
						}
					} 
					catch(Exception ex)
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
						{
							commonLog.LogEntry("SumpTableCells Mapping Stage", ex);
						}
						return;
					}
                    #endregion
				}
				else
				{
                    #region MeasureAREA
					try
					{
						// ===================================================================
						// TR TD Cell Max Width, Height Stage
						// ===================================================================
						if(cellElement.___elementTagType == CHtmlElementType.TR)
						{
							if(_IsFirstTR)
							{


								int ___ColumnCount = 0;
								int ___ColumnWidthDeclaredCount = 0;
								double ___ColumnWidthDeclaredWidthTotal = 0;
								int ___ColumnWidthNonDeclaredCount = 0;
                                System.Collections.Generic.SortedList<int, double> tmpColumnWidthList = new System.Collections.Generic.SortedList<int, double>(); // ID is Int
								try
								{
                                    int ___cellElementCount = cellElement.___childNodes.Count;
									for(int i = 0; i < ___cellElementCount; i ++)
									{
                                        CHtmlElement __firstTDTH = cellElement.___childNodes[i] as CHtmlElement;
										if(__firstTDTH.___elementTagType  == CHtmlElementType.TD  || __firstTDTH.___elementTagType  == CHtmlElementType.TH)
										{
                                            if (string.IsNullOrEmpty(__firstTDTH.___style.___Width) == false)
											{
												___ColumnWidthDeclaredCount++;
												try
												{
													tmpColumnWidthList[___ColumnCount]= __firstTDTH.___offsetWidth;
												}
                                                catch (Exception ex)
                                                {
                                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                    {
                                                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                                    }
                                                }
												___ColumnWidthDeclaredWidthTotal +=__firstTDTH.___offsetWidth;

											}
											else
											{
												___ColumnWidthNonDeclaredCount++;
												try
												{
													tmpColumnWidthList[___ColumnCount] = -1F;
												}
                                                catch (Exception ex)
                                                {
                                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                    {
                                                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                                    }
                                                }
											}
											___ColumnCount++;
										}
									}
									if(___ColumnWidthNonDeclaredCount <= 3 && ___ColumnWidthDeclaredCount > 0)
									{
										
										double TableOriginalWidth = tableElement.___offsetWidth;
										if(TableOriginalWidth  - ___ColumnWidthDeclaredWidthTotal > 0)
										{
											goto StartTableRestWidthSetter;
										} 
										else
										{
											// Table Orignal Width is shorter than measured width
											TableOriginalWidth = tableElement.___availWidth;
										}
										if(TableOriginalWidth - ___ColumnWidthDeclaredWidthTotal < 0)
										{
											if(tableElement.___parentWeakRef != null)
											{
												TableOriginalWidth = tableElement.___getParentElement().___availWidth;
											}
										}
									StartTableRestWidthSetter:
										if(___ColumnWidthDeclaredCount > 0 && ___ColumnWidthNonDeclaredCount == 0)
										{
											tableElement.___IsTableCellWidthFixedOnEachColumn = true;
											__colWidthMaxList.Clear();
                                            int ___tmpColumnWidthListCount = tmpColumnWidthList.Count;
                                            for (int i = 0; i < ___tmpColumnWidthListCount; i ++ )
                                            {
                                                int colPos = tmpColumnWidthList.Keys[i];
                                                double ___ColWidth = tmpColumnWidthList.Values[i];
                                                __colWidthMaxList.Add(colPos, ___ColWidth);
                                            }

										}
										else if(___ColumnWidthNonDeclaredCount > 0 && TableOriginalWidth  - ___ColumnWidthDeclaredWidthTotal > 0)
										{
											tableElement.___IsTableCellWidthFixedOnEachColumn = true;
											double ___RemainingWidth =TableOriginalWidth  - ___ColumnWidthDeclaredWidthTotal;
											double ___RemainingWidthForNonWidthTD = 0;
											if(___ColumnWidthNonDeclaredCount > 0)
											{
												___RemainingWidthForNonWidthTD = ___RemainingWidth / ___ColumnWidthNonDeclaredCount;
											}
											else
											{
												___RemainingWidthForNonWidthTD = ___RemainingWidth;
											}
											__colWidthMaxList.Clear();
                                            int ___tmpColumnWidthListCount = tmpColumnWidthList.Count;
                                            for (int i = 0; i < ___tmpColumnWidthListCount; i ++ )
                                            {
                                                int colPos = tmpColumnWidthList.Keys[i];
                                                double ___ColWidth = tmpColumnWidthList.Values[i];
                                                if (___ColWidth == -1)
                                                {
                                                    ___ColWidth = ___RemainingWidthForNonWidthTD;

                                                }
                                                __colWidthMaxList[colPos] = ___ColWidth;

                                            }
										}
				
									}
								}
								catch(Exception ex)
								{
									if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
									{
										commonLog.LogEntry("SumUpTableCells Measure At First Row", ex);
									}
									tableElement.___IsTableCellWidthFixedOnEachColumn = false;
								}
							}
						}
						if(cellElement.___elementTagType == CHtmlElementType.TD || cellElement.___elementTagType  == CHtmlElementType.TH)
						{							

							if(_tr > 0 && _td > 0)
							{
								if(tableElement.___IsTableCellWidthFixedOnEachColumn == false)
								{
									if(__colWidthMaxList.ContainsKey(___previousTDCount) == false)
									{
										__colWidthMaxList[___previousTDCount] =  cellElement.___offsetWidth;
									}
									else
									{
										if(__colWidthMaxList[___previousTDCount] <  cellElement.___offsetWidth)
										{
											__colWidthMaxList[___previousTDCount] = cellElement.___offsetWidth;
										}
								
									}
								}
								else
								{
                                    if (string.IsNullOrEmpty(cellElement.___style.___Width) == true)
									{
										// ==================================================
										// Means TD TH Element Style is empty Set Now
										// =================================================
                                        double ___ColWidth = 0;
                                        if (__colWidthMaxList.TryGetValue(___previousTDCount, out ___ColWidth) == true)
                                        {
                                            cellElement.___style.___Width = ___ColWidth.ToString();
                                            cellElement.___offsetWidth = ___ColWidth;
                                            cellElement.___availWidth = ___ColWidth;
                                            cellElement.___isCalculateElementBoundsCalled = false;
                                            this.___calculateElementBounds(cellElement);
                                        }
									}

								}
								if(__rowHeightMaxList.ContainsKey(___previousTRCount - 1) == false)
								{
									__rowHeightMaxList.Add(___previousTRCount - 1, cellElement.___offsetHeight);
								}
								else
								{
									if(__rowHeightMaxList[___previousTRCount - 1] < cellElement.___offsetHeight)
									{
										__rowHeightMaxList[___previousTRCount - 1] = cellElement.___offsetHeight;	
									}
								}
							}
						}
					} 
					catch (Exception ex)
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
						{
							commonLog.LogEntry("Col Row Max Height Width Error : ", ex);
						}
					}
                    #endregion
				}
			} 
			catch (Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
				{
					commonLog.LogEntry("SumUpTable Mapping Failed for ({0}:{1}) {2}", _tr, _td, commonData.GetExceptionAsString(ex));
				}
			}

		}
		private string GetParentTagNameListForElement(CHtmlElement element)
		{
			System.Text.StringBuilder sbParent = new StringBuilder(commonHTML.StringBuilder_BUFFER_Size_For_CSS_Tag);
			CHtmlElement __LookUpElement = null;
			__LookUpElement = element;
			while(__LookUpElement != null)
			{
				sbParent.Append(__LookUpElement.tagName);
				sbParent.Append(':');
				sbParent.Append(__LookUpElement.___TagOpenStartPosition);
                __LookUpElement = __LookUpElement.___parent as CHtmlElement;
				if(__LookUpElement != null)
				{
					sbParent.Append(" -> ");
				}
			}

			return sbParent.ToString();
		}






		private string ___getElementTagName(int pos)
		{
			int HitPos = -1;
			int HitLimit = 100;
			int HTMLBuilderLen = this.___HtmlBuilder.Length;
            for (int i = pos; i < HTMLBuilderLen; i++)
			{
                int r = Array.IndexOf(commonHTML.EndChars, this.___HtmlBuilder[i]);
				if(r > -1)
				{
					HitPos = i;
					break;
				}
                if ((i - pos > HitLimit) || i == this.___HtmlBuilder.Length)
					break;
			}
			string strTagF = "";
			System.Text.StringBuilder sb = new System.Text.StringBuilder();
			if(HitPos > -1)
			{
				for(int i = pos ; i < HitPos ; i ++)
				{
                    sb.Append(this.___HtmlBuilder[i]);
				}
				strTagF = sb.ToString();
				if(string.Equals(strTagF ,"scr", StringComparison.OrdinalIgnoreCase) == true)
				{
                    strTagF = this.___substringHTMLBuilder(pos, 8);
					if(string.Equals(strTagF, "scr'+'ip", StringComparison.OrdinalIgnoreCase) == true)
					{ // MAC ENCODING SCHEME
						strTagF = "script";
					}
				}
					
				return strTagF;
			}
			else
			{
				return "";
			}
		}

		internal string ___substringHTMLBuilder(int start, int len)
		{
			System.Text.StringBuilder sb = new System.Text.StringBuilder();
			for(int i = start ; i <= len + start ; i ++)
			{
                sb.Append(this.___HtmlBuilder[i]);
			}
			return sb.ToString();
		}
        /// <summary>
        /// Compile Script Body in JIT
        /// </summary>
        /// <param name="cscriptElement"></param>
        /// <param name="__startPos"></param>
        /// <param name="__EndPos"></param>
        
        internal void ___processScriptElementScript(CHtmlElement cscriptElement, int __startPos, int __EndPos, string __language, ref System.Text.StringBuilder sbText)
        {

            if (cscriptElement.___isInactivativeElementNodeChild == true)
            {
                cscriptElement.value = sbText.ToString();
                return;
            }
            DateTime ___dtStart = DateTime.Now;
            TimeSpan ___tpSpan;
            System.Text.StringBuilder sbScript = null;
            try
            {
                if (cscriptElement != null)
                {
                    if (cscriptElement.___IsScriptExecuted == true)
                    {
                        return;
                    }
                }
                if (sbText == null)
                {
                    sbScript = new StringBuilder();
                    for (int i = __startPos; i < __EndPos; i++)
                    {
                        sbScript.Append(this.___HtmlBuilder[i]);
                    }
                }
                else
                {
                    sbScript = sbText;
                }
                //commonHTML.ProcessScriptStringBuilderBeginEndPart(ref sbScript);
                if (sbScript == null || sbScript.Length == 0)
                {
                    return;
                }

                string ___scriptType = commonHTML.GetElementScriptLanguageLowerName(cscriptElement);
                if (string.IsNullOrEmpty(___scriptType) == true || string.Equals(___scriptType, "javascript", StringComparison.OrdinalIgnoreCase) == true)
                {
                    commonHTML.___precheckScriptComment(ref sbScript, false);
                }
                /*
#if DEBUG
                if (sbScript != null)
                {
                    if (sbScript.ToString().IndexOf("var ytplayer = ytplayer", StringComparison.Ordinal) != -1)
                    {
                        commonLog.LogEntry("HERE");

                    }
                }
#endif
                */
                CHtmlScriptResultElement _scriptElement = new CHtmlScriptResultElement();
                _scriptElement.href = string.Concat("cpos: ", cscriptElement.___TagOpenStartPosition + ')');
                _scriptElement.text = sbScript.ToString();
                _scriptElement.IsCompiled = false;

                int ___scriptPos = -1;
                if (___scriptEventList != null)
                {
                    if (Monitor.TryEnter(___scriptEventList.SyncRoot, 1000))
                    {
                        try
                        {
                            ___scriptPos = ___scriptEventList.Add(_scriptElement);
                        }
                        finally
                        {
                            Monitor.Exit(___scriptEventList.SyncRoot);
                        }
                    }
                }

                if (___scriptPos == -1)
                {
                    return;
                }
                if (commonHTML.EnableBrowserClientScript == true)
                {

                    if (this.___MultiversalWindow != null)
                    {
                        try
                        {
                            CHtmlMultiversalWindow ___currentWindow = this.___getMultiversalWindow();
                            if (___currentWindow != null)
                            {
                     
                                ___currentWindow.execute(sbScript.ToString(), ___scriptType);
                                _scriptElement.result = 200;
                            }
                            else
                            {
                                _scriptElement.result = -100;
                            }

                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("___executeScriptElementScript(\'{0}\')  completed successfully by multiversal processor", cscriptElement);
                            }
                            ___tpSpan = DateTime.Now.Subtract(___dtStart);
                            _scriptElement.resultText = "Success " + ___tpSpan.TotalMilliseconds.ToString() + " ms.";
                            _scriptElement.IsCompiled = true;
                        }
                        catch (Exception ex)
                        {
                            bool ___SkipLog = false;
                            ___tpSpan = DateTime.Now.Subtract(___dtStart);
                            System.Text.StringBuilder sbError = new StringBuilder();
                            sbError.Append("[Script Segment Compile Error]");
                            sbError.Append(_scriptElement.href);
                            sbError.Append(" ");
                            sbError.Append(___tpSpan.TotalMilliseconds);
                            sbError.Append(" ms");


                            _scriptElement.resultText = sbError.ToString();
                            _scriptElement.errorDetail = commonData.GetExceptionAsString(ex);
                            _scriptElement.IsCompiled = true;
                            _scriptElement.result = 500;

                            if (___SkipLog == false && commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                            {
                                commonLog.LogEntry(sbError.ToString());
                                commonLog.LogEntry(_scriptElement.errorDetail);
                            }
                        }
                    }
                }
                else
                {
                    _scriptElement.resultText = "Script Engine Not Available : " + __language;

                }
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                {
                    commonLog.LogEntry("___executeScriptElementScript", ex);
                }
            }
            if (cscriptElement != null)
            {
                cscriptElement.___IsScriptExecuted = true;
            }
        }
		private void ___processStyleTagSheetString(int __startPos, int __EndPos, CHtmlElement tagElement, ref System.Text.StringBuilder sbText)
		{
            if (tagElement.___isInactivativeElementNodeChild == true)
            {
                tagElement.value = sbText.ToString();
                return;
            }
			System.Text.StringBuilder sbStyle = null;
			if(sbText != null)
			{
				sbStyle = sbText;
				goto StyleTextComposed;
			}
			else
			{
				sbStyle = new StringBuilder();
			}

			
			bool _IsHeaderPassed = false;
			for(int i = __startPos ; i < __EndPos ; i ++)
			{
				if(_IsHeaderPassed == false)
				{
                    if (this.___HtmlBuilder[i] == '<')
					{
                        if (this.___HtmlBuilder.Length > i + 3)
						{
                            if (this.___HtmlBuilder[i + 1] == '!' && this.___HtmlBuilder[i + 2] == '-' && this.___HtmlBuilder[i + 3] == '-')
							{
								i = i + 3;
								_IsHeaderPassed =true;
								continue;
							}
						}
					}
                    else if (char.IsLetter(this.___HtmlBuilder[i]) || Array.IndexOf(commonHTML.CharsSplittingStyleString, this.___HtmlBuilder[i]) > -1)
					{
						_IsHeaderPassed= true;
					}

				}
				if(_IsHeaderPassed)
				{
                    sbStyle.Append(this.___HtmlBuilder[i]);
				}
			}
			StyleTextComposed:
			
				if(sbStyle.Length > 0)
				{
					//Scripting.commonScripting.PreprocessScriptComment(ref sbStyle, true);
                    CHtmlCollection ___ruleList = null;
                    if (tagElement != null && tagElement.___sheet != null && tagElement.___sheet.___cssRules != null)
                    {
                        ___ruleList = tagElement.___sheet.___cssRules;
                    }
                    if(___ruleList == null)
                    {
                        if (commonLog.LoggingEnabled)
                        {
                            commonLog.LogEntry("Strange Target Css Rule Not found!");
                        }
                    }
                    bool ___DoNotMeargeList = false;
                    if (___ruleList != null && this.___StyleQueue != null)
                    {
                        ___DoNotMeargeList = true;
                    }
                    CHtmlCollection arStyles = commonHTML.CreateCSSRuleCollectionFromStyleSheetString(sbStyle.ToString(), this.___URL, tagElement.media, null, ___ruleList, this.___StyleQueue, this.___cssRuleBlackList, tagElement);
					/*
					if(tagElement != null && tagElement.attributes.ContainsKey("media") == true)
					{
						tagElement.value = sbStyle.ToString();
						if(commonHTML.IsMediaValueValid(commonHTML.GetElementAttributeInString(tagElement, "media")) == false)
						{
							if(commonLog.LoggingEnabled && commonLog.CommonLogLevel > 5)
							{
								commonLog.LogEntry("{0} has ignoring media {1}. Skip.", tagElement, tagElement.media);
							}
							return;

						}
					}
					*/
                    if (___DoNotMeargeList == false)
                    {
                    	int arStylesCount = arStyles.Count;
                        for (int i = 0; i < arStylesCount; i++)
                        {
                            CHtmlCSSRule sPart = arStyles[i] as CHtmlCSSRule;
                            if (sPart.___ruleType   == CHtmlCSSRule.CSSRuleType.Import_Rule)
                            {
                                if (string.IsNullOrEmpty(sPart.___baseUrl) == false)
                                {
                                    string __srcFullUrl = commonHTML.GetAbsoluteUri(this.___URL, this.___baseUrl, sPart.___baseUrl);
                                    if (this.___IsHtmlBodyTagPassed == true)
                                    {
                                        ___downloaddirectly(__srcFullUrl, tagElement.tagName, null, null, this.___URL, this.___charset, CHtmlThreadPoolQueueObjectType.UrlStyleSheet, this.___URL, tagElement, 0, CHtmlUrlSourceType.Unknown, false);
                                    }
                                    else
                                    {
                                        bool enqueReslt = this.___downloadviaQueue(__srcFullUrl, tagElement.tagName, null, null, this.___URL, this.___charset, CHtmlThreadPoolQueueObjectType.UrlStyleSheet, this.___URL, tagElement, 0, CHtmlUrlSourceType.Unknown, false);
                                        if (enqueReslt == true)
                                        {
                                            this.___setEnqueuedCounter(enqueReslt, CHtmlThreadPoolQueueObjectType.UrlStyleSheet);
                                        }
                                    }
                                }
                                else
                                {

                                }
                                continue;
                            }
                            this.___mergeCHtmlStyleElementIntoDocumentStyleSheet(sPart);
                        }
                    }
					/*
					bool __FinaySortMonitor = false;
					try
					{
						if(Monitor.TryEnter(this._styleElementLists.SyncRoot))
						{
							__FinaySortMonitor = true;
							this._styleElementLists.SortAll();
						}
					} 
					finally
					{
						if(__FinaySortMonitor)
						{
							Monitor.Exit(this._styleElementLists.SyncRoot);
						}
						tagElement.IsStyleTagElementInnserStyleSheetProcessed = true;
					}
					*/
				
				}
			sbStyle = null;
		}
		public void TestFetch(int Count)
		{
			DateTime dtStart = DateTime.Now;
			for(int i = this.___curHTMLParsePosition; i < Count; i++)
			{
                char c = this.___HtmlBuilder[this.___curHTMLParsePosition];
			}
			TimeSpan tp = DateTime.Now.Subtract(dtStart);
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
			{
				commonLog.LogEntry("TestFetch took {0} ms...", tp.TotalMilliseconds);
			}
		}
        
        internal void ___writeBytesIntoDocumentStream(byte[] buffer, int offset, int read, bool ___finalWrite)
        {
            bool ___isCharsetSelectedOnThisFuction = this.___IsHtmlCharSetDetectionCompleted;
            this.___documentMemStream.Write(buffer, offset, read);

            if (this.___IsHtmlCharSetDetectionCompleted == false)
            {
                if (this.___IsHtmlCharSetDetectionCompleted == false && this.___documentMemStream.Length > 0)
                {
                    if (this.___IsHtm1stHttpResponseCompleted == false && buffer.Length > 3)
                    {
                        if (commonHTML.isUTF8BytesExistsInFirst3Bytes(buffer[0], buffer[1], buffer[2]))
                        {
                            this.___charset = "utf-8";
                            this.___encText = System.Text.UTF8Encoding.UTF8;


                            this.___IsHtmlCharSetDetectionCompleted = true;
                        }
                    }
                    if (this.___IsHtmlCharSetDetectionCompleted == false)
                    {

                        //commonLog.LogEntry("CharSet Detection at {0} bytes ", this._memoryStream.Length);
                        if (this.___getHtmlCharsetInMemorySteam(this.___documentMemStream, out this.___charset) == true)
                        {
                            try
                            {
                                this.___encText = System.Text.Encoding.GetEncoding(commonData.GetCharsetFromHTMLCharset(this.___charset));
                                this.___defaultCharset = this.___charset;

                                this.___IsHtmlCharSetDetectionCompleted = true;
                            }
                            catch 
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                                {
                                    commonLog.LogEntry("stange...  commonData.GetCharsetFromHTMLCharset({0}) failed", this.___charset);
                                }
                            }
                        }
                        if(___encText == null)
                        {
                            this.___charset = "utf-8";
                            this.___encText = System.Text.Encoding.GetEncoding(commonData.GetCharsetFromHTMLCharset(this.___charset));
                            this.___defaultCharset = this.___charset;

                            this.___IsHtmlCharSetDetectionCompleted = true;
                        }

                    }
                    else if (___finalWrite == true)
                    {
                        if (this.___getHtmlCharsetInMemorySteam(this.___documentMemStream, out this.___charset) == true)
                        {
                            this.___encText = System.Text.Encoding.GetEncoding(commonData.GetCharsetFromHTMLCharset(this.___charset));
                            this.___IsHtmlCharSetDetectionCompleted = true;
                        }
                        else
                        {
                            this.___defaultCharset = this.___charset;
                            this.___charset = "utf-8";
                            this.___encText = System.Text.Encoding.GetEncoding(commonData.GetCharsetFromHTMLCharset(this.___charset));
                            this.___encText = System.Text.UTF8Encoding.Default;
                        }
                        this.___IsHtmlCharSetDetectionCompleted = true;
                        //ThreadParseCharSetDetectCompleteEvent.Set();
                        return;
                    }
                    else if (___ContentLength > 0 && ___ContentLength == this.___documentMemStream.Length)
                    {
                        this.___IsHtmlCharSetDetectionCompleted = true;
                        if (this.___encText == null)
                        {
                            this.___encText = Encoding.UTF8;
                        }
                    }
                }






            }
            else
            {
                if (read == 0)
                {

                }
                else
                {
                    if (this.___encText == null)
                    {
                        if (string.IsNullOrEmpty(this.___charset) == false)
                        {
                            try
                            {

                                this.___encText = System.Text.Encoding.GetEncoding(commonData.GetCharsetFromHTMLCharset(this.___charset));
                                this.___IsHtmlCharSetDetectionCompleted = true;
                            }
                            catch { }
                        }
                        if (this.___encText == null)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                            {
                                commonLog.LogEntry("Stange, null Encoding..");
                            }
                        }
                        if (this.___encText == null)
                        {
                            this.___encText = Encoding.UTF8;
                            this.___IsHtmlCharSetDetectionCompleted = true;

                        }
                    }
                }
            }
            if (this.___encText != null)
            {

                bool __Locked = false;
                try
                {
                    __Locked = Monitor.TryEnter(this.___HtmlBuilderLockObject, 1000);
                    if (__Locked)
                    {
                        try
                        {
                            string strDecoded = GetStringExtend(ref buffer, 0, read);
                            this.___HtmlBuilder.Append(strDecoded);
                            this.___HtmlBuilderLength = this.___HtmlBuilder.Length;
                        }
                        catch (Exception ex)
                        {
                            this.___HtmlBuilder.Append(this.___encText.GetString(buffer));
                            this.___HtmlBuilderLength = this.___HtmlBuilder.Length;
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                            {
                                commonLog.LogEntry("___writeBytesIntoDocumentStream {0} : {1} {2}", ex.Message, 0, read);
                            }
                        }
                    }
                }
                finally
                {
                    if (__Locked)
                    {
                        Monitor.Exit(this.___HtmlBuilderLockObject);
                    }
                }


            }
        }
		private bool ___IsLastEncodingEndByteExists = false;
		private byte[] ___LastEncodingEndBytes = null;
		private string GetStringExtend(ref byte[] buffer, int offset,int ___len)
		{
			if(___len > 0)
			{
				try
				{
                    if (___IsLastEncodingEndByteExists == false)
					{
						Int64 ___rem = GetDBCSCharReminder(ref buffer, ___len);
						if(___len > 0 && ___rem > 0)
						{
							//commonLog.LogEntry("{0} : {1}", this._charset,  ___rem);
                            this.___LastEncodingEndBytes = null;
                            ___IsLastEncodingEndByteExists = true;
							switch(___rem)
							{
								case 1:
                                    this.___LastEncodingEndBytes = new byte[] { buffer[___len - 1] };
									break;
								case 2:
                                    this.___LastEncodingEndBytes = new byte[] { buffer[___len - 2], buffer[___len - 1] };
									break;
								case 3:
                                    this.___LastEncodingEndBytes = new byte[] { buffer[___len - 3], buffer[___len - 2], buffer[___len - 1] };
									break;
							}
						}
						else
						{
							___IsLastEncodingEndByteExists = false;
						}
						return this.___encText.GetString(buffer,0, ___len - (int)___rem);		
					}
					else
					{
						byte[] nbuffer =new byte[___len + ___LastEncodingEndBytes.Length];
						try
						{
                            System.Buffer.BlockCopy(___LastEncodingEndBytes, 0, nbuffer, 0, ___LastEncodingEndBytes.Length);
                            System.Buffer.BlockCopy(buffer, 0, nbuffer, ___LastEncodingEndBytes.Length, ___len);
							Int64 ___rem = GetDBCSCharReminder(ref nbuffer, ___len);
							if(___rem == 0)
							{
                                ___IsLastEncodingEndByteExists = false;
                                ___LastEncodingEndBytes = null;
							}
							else
							{
                                ___IsLastEncodingEndByteExists = true;
								switch(___rem)
								{
									case 1:
                                        this.___LastEncodingEndBytes = new byte[] { buffer[___len - 1] };
										break;
									case 2:
                                        this.___LastEncodingEndBytes = new byte[] { buffer[___len - 2], buffer[___len - 1] };
										break;
									case 3:
                                        this.___LastEncodingEndBytes = new byte[] { buffer[___len - 3], buffer[___len - 2], buffer[___len - 1] };
										break;
								}
							}
							return this.___encText.GetString(nbuffer, 0, nbuffer.Length - (int)___rem);
						} 
						catch (Exception ex)
						{
							if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
							{
								commonLog.LogEntry("BUGBUG!!! DBCS Opertion Failed", ex);
							}
							return this.___encText.GetString(buffer,0, ___len);
						}
					}
				}
				catch(Exception ex)
				{
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
					{
						commonLog.LogEntry("GetStringExtend",ex);
					}
				}
				
			}
			return this.___encText.GetString(buffer,0, ___len);
		}
		public Int64 GetDBCSCharReminder(ref byte[] buffer, int ___len)
		{
			int SBCSLastPos = buffer.Length;
			int DBCSLastStartPos = 0;
			int DBCSEndPos = ___len;
			int p = 0;
			for(p = ___len -1 ; p >=0; p --)
			{
				if(buffer[p] <= 0x7f)
				{
					SBCSLastPos = p;
					break;
				}
			}
			if(SBCSLastPos < ___len - 1)
			{
				DBCSLastStartPos = SBCSLastPos + 1;
				Int64 LastDBCSRangeLen = ___len - DBCSLastStartPos;
				System.Int64 _rem = 0;
				Math.DivRem(LastDBCSRangeLen, this.___DBCSCharLength,out _rem);
				return _rem;

			}
			return 0;
		}




       

        internal void ___PerformDocumentOrWindowEventFunction(object objFunction, string ___eventName,object ___eventSource, object ___eventObject,bool DoNotResetEvent,  string EventRecodTitle)
        {
            
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {

                commonLog.LogEntry("calling ___PerformDocumentOrWindowEventFunction({0}, {1}, {2}, {3})", objFunction, ___eventName, ___eventSource, ___eventObject);
            }

            CHtmlScriptResultElement script = new CHtmlScriptResultElement();
            script.IsCompiled = true;
            script.text = EventRecodTitle;
            if (___eventSource != null)
            {
                if (DoNotResetEvent == false)
                {
                    this.___ResetWindowEvent();
                }


            }
            else
            {
                if (DoNotResetEvent == false)
                {
                    this.___event.___resetToDefaults();
                }
            }
            try
            {
                this.___event.___set_event_type(___eventName);
                if (this.___IsMultiversalDocument == true )
                {

                    if (objFunction is string)
                    {
                        this.___MultiversalWindow.execute(commonHTML.GetStringValue(objFunction), "");
                        script.result = 200;
                        script.resultText = "success";
                    }
     
                }
            }
            catch (Exception ex)
            {
                script.result = 500;
                script.resultText = "Script Onload Segment Compile Exception : " +  ___eventName;
                script.errorDetail = commonData.GetExceptionAsString(ex);
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                {

                    commonLog.LogEntry(script.resultText);
                    commonLog.LogEntry(script.errorDetail);
                }
            }

            this.___scriptEventList.Add(script);

            
        }


        /// <summary>
        /// This method is called via StackQueue Only. Do not change
        /// </summary>
        internal void ___IncrementDocumentDownloadCounter()
        {
            System.Threading.Interlocked.Increment(ref this.___StyleSheetOnlyFileDownloadPendingCount);
            System.Threading.Interlocked.Increment(ref this.___StyleScriptFileDownloadPendingCount);
            System.Threading.Interlocked.Increment(ref this.___StyleScriptFileDownloadRequestedTotalCount);
        }
		private CHtmlFileType GetScriptTypeFromAttributes(CHtmlElement __element)
		{
			string sType = "" ;
			if(__element == null)
				return CHtmlFileType.JavaScript;


			CHtmlAttribute typeAttr = null;
            __element.___attributes.TryGetValue("type", out typeAttr);
			if(typeAttr != null)
			{
				sType = commonHTML.GetStringValue(typeAttr.value);
			}
			
			switch( sType)
			{
				case "":
				case "javascript":
				case "jscript":
				case "text/javascript":
				case "text/jscript":
					return  CHtmlFileType.JavaScript;
				case "text/json":
					return CHtmlFileType.Json;
				case "text/vbscript":
				case "vbscript":
					return  CHtmlFileType.VBScript;
				case "test/css":
					return  CHtmlFileType.Css;

			}
			return CHtmlFileType.JavaScript;
		}
        
        internal void ___prefetch_element_src_with_prefetch_thread()
        {
            CHtmlStopWatch ___stopWatch = new CHtmlStopWatch();
            int ___CurrentReadPoint = 0;
            bool ____IsResponseCompletedAtStart = false;
            int ___DocumentReadLimit = 10;
            int ___ReadCharCount = 0;
            int ___TagMatchCount = 0;
            int ___TagNeedsToDownloadCount = 0;
            int ___ImgTagNeedsToDownloadCount = 0;
            int ___ScriptTagNeedsToDownloadCount = 0;
            int ___ScriptTagWithSrcFoundCount = 0;
            int while_loop_maximum_count = 100;
            //int ___WaitMillisecondsForBody = 175;
            object _lockObj = new object();
            bool ___isInsideCommentBlock = false;
            try
            {
                char _c0 = '\0';
                char _ca1 = '\0';
                char _tagc = '\0';
                string ___tName = "";
                bool __WaitForTagEnd = false;
                System.Text.StringBuilder __sbAttributes = null;

                int ActualWaitedTime = 0;
                if (ActualWaitedTime < -1) { ;}




                if (this.___IsThreadAbortOccurred == true || this.___Disposing == true || this.___IsHtmlParseCompleted == true)
                {
                    goto FinalStage;
                }
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
                {
                    commonLog.LogEntry("PrefechThread  Begin Prosess Main Stage...");
                }


                string __fullUrl = "";
                int currentWhileCount = 0;
                while (true)
                {
                    currentWhileCount++;
                    if (currentWhileCount > while_loop_maximum_count)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
                        {
                            commonLog.LogEntry("PrefechThread loops so many times exit now...");
                        }
                        goto FinalStage;
                    }

                    if (___IsPrefetchThreadNeedsToAbort())
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
                        {
                            commonLog.LogEntry("PrefechThread will exit loop...");
                        }
                        goto FinalStage;
                    }
                    ____IsResponseCompletedAtStart = this.___IsHtmlResponseCompleted;
                    int ___StartHTMLBuilderLength = this.___HtmlBuilder.Length;
                    for (___CurrentReadPoint = this.___curHTMLParsePosition; ___CurrentReadPoint < this.___HtmlBuilder.Length - ___DocumentReadLimit; ___CurrentReadPoint++)
                    {

                        if (___IsPrefetchThreadNeedsToAbort())
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
                            {
                                commonLog.LogEntry("PrefechThread will exit loop...");
                            }
                            goto FinalStage;
                        }


                        _c0 = this.___HtmlBuilder[___CurrentReadPoint];
                        switch (_c0)
                        {
                            case '<':
                                _ca1 = this.___HtmlBuilder[___CurrentReadPoint + 1];
                                if (_ca1 >= 'a' && _ca1 <= 'z')
                                {
                                    _ca1 = commonHTML.FasterToUpper(_ca1);
                                }
                                if (_ca1 == '/' || _ca1 == '?' || _ca1 == ' ')
                                {
                                    __WaitForTagEnd = false;
                                    goto NextChar;
                                }else if(_ca1 == '!')
                                {
                                    try
                                    {
                                        if (this.___HtmlBuilder[___CurrentReadPoint + 2] == '-' &&
                                           this.___HtmlBuilder[___CurrentReadPoint + 3] == '-')
                                        {
                                            int endQuoteSearchPoint = ___CurrentReadPoint + 4;
                                            for (; endQuoteSearchPoint + 2 < this.___HtmlBuilderLength; endQuoteSearchPoint++)
                                            {
                                                if (this.___HtmlBuilder[endQuoteSearchPoint] == '-'
                                                    && this.___HtmlBuilder[endQuoteSearchPoint + 1] == '-'
                                                    && this.___HtmlBuilder[endQuoteSearchPoint + 2] == '>')
                                                {
                                                    ___CurrentReadPoint = endQuoteSearchPoint + 2;
                                                    goto NextChar;
                                                }

                                            }
                                        }
                                    }catch (Exception exPrefechComment)
                                    {
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                        {
                                            commonLog.LogEntry("___prefetch_element_src_with_prefetch_thread() comment block exception. ", exPrefechComment );
                                        }
                                    }

                                
                                }
                                if (___isInsideCommentBlock == false && commonHTML.CharsFirstCharacterToBePrefechDictionary.ContainsKey(_ca1) == true)
                                {
                                    System.Text.StringBuilder sbTagName = new StringBuilder();
                                    int tagp = -1;
                                    for (tagp = ___CurrentReadPoint + 1; tagp < ___StartHTMLBuilderLength; tagp++)
                                    {
                                        _tagc = this.___HtmlBuilder[tagp];
                                        if (_tagc == ' ' || _tagc == '/' || _tagc == '>' || commonHTML.FasterIsWhiteSpaceLimited(_tagc) == true || _tagc == '[')
                                        {
                                            __WaitForTagEnd = false;
                                            break;
                                        }
                                        if (_tagc >= 'a' && _tagc <= 'z')
                                        {
                                            sbTagName.Append(commonHTML.FasterToUpper(_tagc));
                                        }
                                        else
                                        {
                                            sbTagName.Append(_tagc);
                                        }
                                    }
                                    if (sbTagName.Length > 0)
                                    {
                                        ___tName = sbTagName.ToString();
                                        switch (___tName)
                                        {
                                            case "IMG":
                                            case "SCRIPT":
                                            case "LINK":
                                                __WaitForTagEnd = true;
                                                __sbAttributes = new StringBuilder();
                                                continue;
                                            case "!--":
                                                ___isInsideCommentBlock = true;
                                                int commentEnd =-1;
                                                try
                                                {
                                                    string strHTML = this.___HtmlBuilder.ToString();
                                                    commentEnd = strHTML.IndexOf("-->", ___CurrentReadPoint, StringComparison.Ordinal);
                                                    if (commentEnd > -1)
                                                    {
                                                        // We found ending comment block, exit comment mode
                                                        ___CurrentReadPoint = commentEnd + 2;
                                                        ___isInsideCommentBlock = false;
                                                    }
                                                }
                                                catch (Exception exComment)
                                                {
                                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >=3)
                                                    {
                                                        commonLog.LogEntry("Prefetch Comment End SerchException. ", exComment );
                                                    }
                                                }
                                                goto NextChar;
                                        }
                                    }
                                    else
                                    {
                                        __WaitForTagEnd = false;
                                        goto NextChar;
                                    }

                                }
                                break;
                            case '>':
                                if (___isInsideCommentBlock == true)
                                {
                                    if (this.___HtmlBuilder[___CurrentReadPoint - 1] == '-' && this.___HtmlBuilder[___CurrentReadPoint - 2] == '-')
                                    {
                                        ___isInsideCommentBlock = false;
                                        goto NextChar;
                                    }
                                }
                                if (__WaitForTagEnd == true)
                                {
                                    if (__sbAttributes != null)
                                    {
                                        if (__sbAttributes.Length > 0)
                                        {
                                            if (__sbAttributes[__sbAttributes.Length - 1] == '/')
                                            {
                                                __sbAttributes.Remove(__sbAttributes.Length - 1, 1);
                                            }
                                        }

                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1000)
                                        {
                                            commonLog.LogEntry("Prefetch <" + ___tName + "> has " + __sbAttributes.ToString());
                                        }

                                        CHtmlElement __dummyElement = new CHtmlElement();
                                        __dummyElement.___IsElementPrefetchDummy = true;
                                        __dummyElement.tagName = ___tName;

                                        // __dummyElement.___Document = this; // Do not Assign Document Here
                                        __dummyElement.___createElementAttributesFromString(ref __sbAttributes);
                                        if (__dummyElement.___elementTagType == CHtmlElementType.IMG || __dummyElement.___elementTagType == CHtmlElementType.SCRIPT || __dummyElement.___elementTagType == CHtmlElementType.LINK)
                                        {
                                            if (__dummyElement.___elementTagType == CHtmlElementType.IMG || __dummyElement.___elementTagType == CHtmlElementType.SCRIPT)
                                            {
                                                if (string.IsNullOrEmpty(__dummyElement.___src) == true)
                                                {
                                                    goto ClearElelemtPart;
                                                }
                                                else
                                                {
                                                    __fullUrl = __dummyElement.___src;
                                                }
                                            }
                                            else if (__dummyElement.___elementTagType == CHtmlElementType.LINK)
                                            {
                                                if (string.IsNullOrEmpty(__dummyElement.___href) == true)
                                                {
                                                    goto ClearElelemtPart;
                                                }
                                                else
                                                {
                                                    __fullUrl = __dummyElement.___href;
                                                }
                                            }
                                        }
                                        if (string.IsNullOrEmpty(__fullUrl) == true)
                                        {
                                            goto ClearElelemtPart;
                                        }
                                        else
                                        {
                                            if (__fullUrl.StartsWith("http:", StringComparison.Ordinal) == true || __fullUrl.StartsWith("https:", StringComparison.Ordinal) == true)
                                            {
                                            }
                                            else
                                            {

                                                __fullUrl = commonHTML.GetAbsoluteUri(this.___URL, this.___baseUrl, __fullUrl);
                                            }
                                        }

                                        int __ElementScore = 0;
                                        switch (___tName)
                                        {
                                            case "IMG":
                                                if (__dummyElement.___attributes.ContainsKey("width"))
                                                {
                                                    __ElementScore++;
                                                    string __strWidthValue = commonHTML.GetElementAttributeInString(__dummyElement, "width");
                                                    if (commonHTML.IsStringAutoOrInheritOrZero(__strWidthValue))
                                                    {
                                                        __ElementScore--;
                                                    }
                                                    else if (__strWidthValue.Length > 0 && (__strWidthValue[0] == '0' || __strWidthValue[0] == '-'))
                                                    {
                                                        __ElementScore--;
                                                    }
                                                }
                                                if (__dummyElement.___attributes.ContainsKey("height"))
                                                {
                                                    __ElementScore++;
                                                    string __strHeightValue = commonHTML.GetElementAttributeInString(__dummyElement, "height");
                                                    if (commonHTML.IsStringAutoOrInheritOrZero(__strHeightValue))
                                                    {
                                                        __ElementScore--;
                                                    }
                                                    else if (__strHeightValue.Length > 0 && (__strHeightValue[0] == '0' || __strHeightValue[0] == '-'))
                                                    {
                                                        __ElementScore--;
                                                    }
                                                }
                                                if (__ElementScore < 2)
                                                {
                                                    if (__dummyElement.___srcBase != null && __dummyElement.___srcBase.href.Length != 0)
                                                    {

                                                        if (__fullUrl.Length > 0 && string.Equals(__fullUrl, this.___URL, StringComparison.Ordinal) == false)
                                                        {
                                                            /*
                                                            MCS.MCSDownloadImage __cachedMCS = commonMCS.MCSImageFdr.MCSDownloadManager.GetBlankMCSImageWithBTreeSearchByUrl(__fullUrl);
                                                            
                                                            if (__cachedMCS != null)
                                                            {
                                                                // Do not check file existance for performance.

                                                                //___TagNeedsToDownloadCount ++;
                                                                //___ImgTagNeedsToDownloadCount ++;
                                                                goto ClearElelemtPart;



                                                            }
                                                            */
                                                            if (this.___PageRequestedUrlList.ContainsKey(__fullUrl))
                                                            {
                                                                goto ClearElelemtPart;
                                                            }
                                                            if (this.___imageSizeQuickLookupSucessList.ContainsKey(__fullUrl))
                                                            {
                                                                goto ClearElelemtPart;
                                                            }

                                                            //EnqueueSection:

                                                            this.___downloadviaQueue(__fullUrl, "image", null, null, this.___URL, null, CHtmlThreadPoolQueueObjectType.UrlImagePrefetch, null, null, 0, CHtmlUrlSourceType.Src, false);
                                                            ___TagNeedsToDownloadCount++;
                                                            ___ImgTagNeedsToDownloadCount++;
                                                        }
                                                    }
                                                }
                                                break;
                                            case "SCRIPT":
                                                if (commonHTML.EnableScriptDownloadOnPrefetchThread == true)
                                                {
                                                    if (string.IsNullOrEmpty(__dummyElement.___src) == false)
                                                    {
                                                        ___ScriptTagWithSrcFoundCount++;
                                                        if (___ScriptTagWithSrcFoundCount > commonHTML.PREFETCH_SCRIPT_SKIP_COUNT)
                                                        {

                                                            if (__fullUrl.Length > 0 && string.Equals(__fullUrl, this.___URL, StringComparison.Ordinal) == false)
                                                            {
                                                                /*
                                                                MCS.MCSDownloadImage __cachedMCS = commonMCS.MCSImageFdr.MCSDownloadManager.GetBlankMCSImageWithBTreeSearchByUrl(__fullUrl);
                                                                */

                                                                if (this.___PageRequestedUrlList.ContainsKey(__fullUrl))
                                                                {
                                                                    goto ClearElelemtPart;
                                                                }
                                                                if (this.___imageSizeQuickLookupSucessList.ContainsKey(__fullUrl))
                                                                {
                                                                    goto ClearElelemtPart;
                                                                }
                                                                // -----------------------------------------------------------------
                                                                // Note) Script is very crital to processed on spot, so
                                                                //       It many cases, pooled jobs may not complete 
                                                                //       at element parse time.
                                                                //       This will results in script error.
                                                                //       By setting NoPageRequestUrlCheck = true
                                                                //       DirectDownload will direcly download jscripts regardleess of
                                                                //       it is on poool or not.
                                                                // -----------------------------------------------------------------
                                                                this.___downloadviaQueue(__fullUrl, "script", null, null, this.___URL, null, CHtmlThreadPoolQueueObjectType.UrlScriptPrefetch, null, null, 0, CHtmlUrlSourceType.Src, true);
                                                                ___ScriptTagNeedsToDownloadCount++;
                                                            }
                                                        }
                                                    }
                                                }
                                                break;
                                            case "LINK":
                                                if (string.IsNullOrEmpty(__dummyElement.___href) == false)
                                                {
                                                    CHtmlAttribute ___attributeRel = null;
                                                    CHtmlAttribute ___attributeMedia = null;
                                                    __dummyElement.___attributes.TryGetValue("rel", out ___attributeRel);
                                                    __dummyElement.___attributes.TryGetValue("media", out ___attributeMedia);
                                                    if (___attributeRel == null)
                                                    {
                                                        goto ClearElelemtPart;
                                                    }
                                                    if (string.Equals(___attributeRel.value as string, "stylesheet", StringComparison.OrdinalIgnoreCase) == false)
                                                    {
                                                        goto ClearElelemtPart;
                                                    }
                                                    if (___attributeMedia != null)
                                                    {
                                                        string ____mediaString = ___attributeMedia.___value as string;
                                                        switch (____mediaString)
                                                        {
                                                            case "":
                                                            case null:
                                                            case "all":
                                                            case "screen":
                                                            case "all, screen":
                                                            case "screen, print":
                                                            case "screen,print":
                                                            case "screen, projection":
                                                            case "screen,projection":
                                                            case "all,screen,projection":
                                                            case "all, screen, projection":
                                                                break;
                                                            default:
                                                                goto DoneImage;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        // if media attribute does not exists. check type
                                                        CHtmlAttribute attrType = null;
                                                        ___attributes.TryGetValue("type", out attrType);
                                                        if (attrType == null)
                                                        {
                                                            goto ClearElelemtPart;
                                                        }
                                                        else
                                                        {
                                                            if (string.Equals(attrType.___value as string, "text/css", StringComparison.Ordinal) == false)
                                                            {
                                                                goto ClearElelemtPart;
                                                            }
                                                        }
                                                    }
                                                    ___ScriptTagWithSrcFoundCount++;
                                                    if (___ScriptTagWithSrcFoundCount > commonHTML.PREFETCH_SCRIPT_SKIP_COUNT)
                                                    {

                                                        if (__fullUrl.Length > 0 && string.Equals(__fullUrl, this.___URL, StringComparison.Ordinal) == false)
                                                        {
                                                            /*
                                                            MCS.MCSDownloadImage __cachedMCS = commonMCS.MCSImageFdr.MCSDownloadManager.GetBlankMCSImageWithBTreeSearchByUrl(__fullUrl);
                                                            if (__cachedMCS != null)
                                                            {
                                                                // Do not check file existance for performance.

                                                                //___TagNeedsToDownloadCount ++;
                                                                //___ImgTagNeedsToDownloadCount ++;
                                                                goto ClearElelemtPart;



                                                            }
                                                            */
                                                            if (this.___PageRequestedUrlList.ContainsKey(__fullUrl))
                                                            {
                                                                goto ClearElelemtPart;
                                                            }

                                                            // -----------------------------------------------------------------
                                                            // Note) Script is very crital to processed on spot, so
                                                            //       It many cases, pooled jobs may not complete 
                                                            //       at element parse time.
                                                            //       This will results in script error.
                                                            //       By setting NoPageRequestUrlCheck = true
                                                            //       DirectDownload will direcly download jscripts regardleess of
                                                            //       it is on poool or not.
                                                            // -----------------------------------------------------------------
                                                            this.___downloadviaQueue(__fullUrl, "stylesheet", null, null, this.___URL, null, CHtmlThreadPoolQueueObjectType.UrlStyleSheetPrefetch, null, null, 0, CHtmlUrlSourceType.Src, true);
                                                            ___ScriptTagNeedsToDownloadCount++;
                                                        }
                                                    }
                                                }

                                                break;
                                        }
                                    ClearElelemtPart:
                                        if (__dummyElement != null)
                                        {
                                            __dummyElement.Dispose();
                                            __dummyElement = null;
                                        }

                                    }
                                    else
                                    {
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 30)
                                        {
                                            commonLog.LogEntry("TagFound but Attributs is null");
                                        }
                                    }
                                DoneImage:
                                    __sbAttributes = null;
                                    __WaitForTagEnd = false;
                                }
                                break;
                            default:
                                if (__WaitForTagEnd == true)
                                {
                                    if (__sbAttributes != null)
                                    {
                                        __sbAttributes.Append(_c0);
                                    }
                                }
                                break;
                        }
                    NextChar:
                        ___ReadCharCount++;
                        if (___CurrentReadPoint <= ___StartHTMLBuilderLength)
                            continue;
                    }
                    if (___StartHTMLBuilderLength < this.___HtmlBuilder.Length - ___DocumentReadLimit)
                    {
                        continue;
                    }
                    else
                    {
                        if (____IsResponseCompletedAtStart)
                        {
                            break;
                        }
                        else
                        {
                            if (this.___Disposing || this.___IsThreadAbortOccurred)
                            {
                                goto FinalStage;
                            }
                            else
                            {
                                int ___WaitCount = 0;
                            WaitWhile:
                                ___WaitCount++;
                                try
                                {

                                    if (System.Threading.Monitor.TryEnter(_lockObj))
                                    {
                                        try
                                        {
                                            System.Threading.Monitor.Wait(_lockObj, 50);
                                        }
                                        finally
                                        {
                                            System.Threading.Monitor.Exit(_lockObj);
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                    {
                                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                    }
                                }
                                if (this.___HtmlBuilder.Length == ___StartHTMLBuilderLength)
                                {
                                    if (this.___IsHtmlResponseCompleted == true)
                                    {
                                        break;
                                    }
                                    if (___WaitCount >= 10)
                                    {
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                                        {
                                            commonLog.LogEntry("___prefetch_element_src_with_prefetch_thread will stop due to bad response.");
                                        }
                                    }
                                    else
                                    {
                                        goto WaitWhile;
                                    }
                                    break;
                                }
                                else
                                {
                                    continue;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                if (ex is System.Threading.ThreadAbortException)
                {
                    this.___IsThreadAbortOccurred = true;
                    goto FinalStage;
                }
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                {
                    commonLog.LogEntry("___prefetch_element_src_with_prefetch_thread Exception : " + this.___UrlShortName, ex);
                }
            }
            finally
            {
                if (___stopWatch != null)
                {
                    ___stopWatch.Stop();
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                    {
                        commonLog.LogEntry("___prefetch_element_src_with_prefetch_thread(\'{0}\') completed {1} Chars Found {2} Tags ToDownload : {3} ImgToDownload : {4} ScriptToDownload {5} in {6}", this.___UrlShortName, ___ReadCharCount, ___TagMatchCount, ___TagNeedsToDownloadCount, ___ImgTagNeedsToDownloadCount, ___ScriptTagNeedsToDownloadCount, ___stopWatch);
                    }
                }
                this.___PrefetchThreadResultTime = ___stopWatch.TotalMilliseconds;

            }
        FinalStage:
            if (this.___TagPrefetchThread != null)
            {
                this.___TagPrefetchThread = null;
            }
        }
        private bool ___IsPrefetchThreadNeedsToAbort()
        {
            if (this == null || this.___Disposing || this.___IsThreadAbortOccurred || this.___IsHtmlParseCompleted || this.___readyStateType == CHtmlReadytStateType.complete)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

		
		private void ___resetDrawingElementParentBounds(CHtmlElement ___tagElement, ref GraphicCotainer _grCon)
		{
			CHtmlElement ___parentElement = ___tagElement.___parent as CHtmlElement;
			if(___tagElement.___ElementInlineShifted == false)
			{
                int ___drawingObjectListCount = ___tagElement.___drawingObjectList.Count;
				for(int i = 0; i < ___drawingObjectListCount ; i ++)
				{
                    CHtmlDrawingObject drawingElement = ___tagElement.___drawingObjectList[i];

                    drawingElement.___offfsetParentPoint = new PointF((float)(_grCon.TotalOffsetLeft + drawingElement.offsetBounds.Left  + ___tagElement.___offsetLeft),  (float)(_grCon.TotalOffsetTop + drawingElement.offsetBounds.Top  + ___tagElement.___offsetTop));	
                    
				}
			}
			else
			{
				CHtmlElement ___InLineTopElement = null;
                if (commonHTML.IsElemeneITextOrIDraw(___tagElement) == true)
				{
					___InLineTopElement = ___tagElement.___InlineVeryTopTextElement;	
				}
				
				PointF ___parentElementPoint =  PointF.Empty;
				if(___tagElement.___ElementInlineLevel > 1 && ___tagElement.___ElementInlineShifted == true)
				{
					if( ___InLineTopElement != null)
					{

                        ___parentElementPoint = new PointF((float)___InLineTopElement.___offsetLeft, (float)___InLineTopElement.___offsetTop);
                        if (___InLineTopElement.___parentWeakRef != null)
                       {
                           CHtmlElement ___InLineTopElementParent = ___InLineTopElement.___parent as CHtmlElement;
                           if (___InLineTopElementParent != null)
                           {
                               if (___InLineTopElementParent.___ElementInlineLevel == 1)
                               {
                                   ___parentElementPoint = new PointF((float)___InLineTopElementParent.___offsetLeft, (float)___InLineTopElementParent.___offsetTop);
                               }
                           }
                       }

            
					}
					else
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 50)
						{
							commonLog.LogEntry("Element is inline Shifted, but InlineVeryTopTextElement is null. Inline Positioning may fail : " + ___tagElement.ToString());
						}

					}
				}

                int ___drawingObjectListCount = ___tagElement.___drawingObjectList.Count;
                for (int i = 0; i < ___drawingObjectListCount; i++)
                {
                    CHtmlDrawingObject drawingElement = ___tagElement.___drawingObjectList[i];
					drawingElement.___offfsetParentPoint =  new PointF(_grCon.TotalOffsetLeft + ___parentElementPoint.X +  drawingElement.offsetBounds.Left   ,_grCon.TotalOffsetTop + drawingElement.offsetBounds.Top  + ___parentElementPoint.Y);
				}
			}
		}

#if false
        public void ___drawTextElement(CHtmlElement ___textElement, ref GraphicCotainer _grCon, bool __WillPaintBackGround)
		{
			Color fntColor = Color.Black;
			Font fnt = null;
			SolidBrush backBrush = null;
			SolidBrush fntBrush = null;
			Color ___FontBackColor = Color.Empty;
			bool ___IsFontBackSpecified = false;
            if (___IsFontBackSpecified) { ;}
            bool ___FontShouldNotDisposed = false;
            CHtmlCSSStyleSheet targetStyle = null;
 
			CHtmlElement baseElement = null;
            bool ___IsTextUnderLineRequied = false;
            System.Drawing.Pen ___penUnderLine = null;
			try
			{
				if(baseElement == null)
				{
                    baseElement = ___textElement.___parent as CHtmlElement;
				}

				if(___textElement is CHtmlTextElement && baseElement != null)
				{

                    if (_grCon.IsHoverPaintMode == false)
                    {
                        targetStyle = baseElement.___style;
                    }
                    else
                    {
                        if (baseElement.___styleHover.___FontRelatedCount > 0)
                        {
                            targetStyle = baseElement.___styleHover;
                        }
                        else
                        {
                            targetStyle = baseElement.___style;
                        }
                    }
                    if (targetStyle.___StyleFontInfo != null)
					{
                        if (commonHTML.UseFontInstanceCache == true && this.___FontCacheList != null)
                        {
                            if (string.IsNullOrEmpty(targetStyle.___StyleFontInfo.___FontNameSizeStyleString) == false)
                            {
                                if (targetStyle.___StyleFontInfo.Underline == true)
                                {
                                    ___IsTextUnderLineRequied = true;
                                }
                                if (this.___FontCacheList.TryGetValue(targetStyle.___StyleFontInfo.___FontNameSizeStyleString, out fnt) == true)
                                {
                                    if (fnt != null)
                                    {
                                        ___FontShouldNotDisposed = true;
                                        goto FontObtained1st;

                                    }
                                }
                            }
                        }
                        if (targetStyle.___StyleFontInfo != null)
                        {
                            if (targetStyle.___StyleFontInfo.Underline == true)
                            {
                                ___IsTextUnderLineRequied = true;
                            }
                            fnt = targetStyle.___StyleFontInfo.ToHtmlRendererFont();

                        }
					}
                FontObtained1st:
                    if (targetStyle.___IsForegroundSysColorSpecified == true)
                    {
                        fntColor = targetStyle.___ForegroundSysColor;
                    }
                    else
                    {
                        fntColor = Color.Black;
                    }

					if(__WillPaintBackGround == true && baseElement.___BackgroundSysColor != Color.Empty && baseElement.___elementTagType !=HTML.CHtmlElementType.IMG)
					{
                        CHtmlElement ___parentBase = baseElement.___parent as CHtmlElement;
						if(___parentBase != null)
						{
							if(commonHTML.IsEqualColor(ref baseElement.___BackgroundSysColor,ref ___parentBase.___BackgroundSysColor) == true)
							{
								goto FontAndBrushSelected;
							}

						}
						 ___IsFontBackSpecified = true;
						backBrush = new SolidBrush(baseElement.___BackgroundSysColor);
						___FontBackColor = baseElement.___BackgroundSysColor;
					}

				}
				else
				{
                    if (targetStyle == null)
                    {
                        if (_grCon.IsHoverPaintMode == false)
                        {
                            targetStyle = baseElement.___style;
                        }
                        else
                        {
                            if (baseElement.___styleHover != null && baseElement.___styleHover.___FontRelatedCount > 0)
                            {
                                targetStyle = baseElement.___styleHover;
                            }
                            else
                            {
                                targetStyle = baseElement.___style;
                            }
                        }
                    }
                    if (targetStyle != null && targetStyle.___StyleFontInfo != null)
					{
                        if (commonHTML.UseFontInstanceCache == true && this.___FontCacheList != null)
                        {
                            if (targetStyle.___StyleFontInfo.___FontNameSizeStyleString.Length > 0)
                            {
                                if (targetStyle.___StyleFontInfo.Underline == true)
                                {
                                    ___IsTextUnderLineRequied = true;
                                }
                                if (this.___FontCacheList.TryGetValue(targetStyle.___StyleFontInfo.___FontNameSizeStyleString, out fnt) == true)
                                {
                                    if (fnt != null)
                                    {
                                        ___FontShouldNotDisposed = true;
                                        goto FontObtained;

                                    }
                                }
                            }
                        }
                        if (targetStyle.___StyleFontInfo.Underline == true)
                        {
                            ___IsTextUnderLineRequied = true;
                        }
                        fnt = targetStyle.___StyleFontInfo.ToHtmlRendererFont();
                    FontObtained:
                        fntColor = targetStyle.___StyleFontInfo.ForegroundColor;
					}
				}
			FontAndBrushSelected:

				if(baseElement == null)
				{
					if(commonLog.LoggingEnabled && commonLog.LogLevel >= 5)
					{
						commonLog.LogEntry("___drawTextElement Base Element not fnound {0}", ___textElement);
					}
					return;
				}

				if(fnt == null)
				{
					fnt = _grCon.Font.Clone() as Font;
				}
				/* ------------------------------------------------------------------
				 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
				 *  Drawing Background May Erase Cross Text Segment. So Do not do that
				 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
				 * -----------------------------------------------------------------*/
				/*
				if(baseElement != null)
				{
					//baseElement.BaseControlDisplayRectangle = _grCon.PaintRectangle;
					//RectangleF baseBounds = baseElement.GetElementBoundsOnScreen();
					//this.DrawTagElement(baseElement, baseBounds, ref _grCon, true);
				}
				/* -----------------------------------------------------------------*/
				

				fntBrush = new SolidBrush(fntColor);

               int ___drawingObjectListCount = ___textElement.___drawingObjectList.Count;

               if (___IsTextUnderLineRequied == true)
               {
                   ___penUnderLine = new Pen(fntColor, 1f);
               }
				for(int i = 0; i <___drawingObjectListCount ; i ++)
				{
                    CHtmlDrawingObject drawingElement = ___textElement.___drawingObjectList[i];
                    
					drawingElement.BaseControlDisplayRectangle = _grCon.PaintRectangle;
					RectangleF elementBounds = drawingElement.GetElementBoundsOnScreen();
					if(elementBounds.Width == 0 || elementBounds.Height == 0)
						continue;

					
					/*
				
					if(backBrush != null)
					{
						if(elementBounds.Width > 0 && elementBounds.Height > 0)
						{
							_grCon.Graphic.FillRectangle(backBrush,elementBounds);
						}
					}
					*/

					if(baseElement != null && baseElement.___ManagedControlHandle != IntPtr.Zero)
					{
						this.LocateManagedControlForDrawingElement(elementBounds,baseElement.___ManagedControlHandle, baseElement);
						if(baseElement.___ManagedControlShouldOnlyRelocatedByDrawElement == false)
						{
							baseElement.___ManagedControlShouldOnlyRelocatedByDrawElement = true;
						}
						continue;
					}

					if(baseElement.___IsTextRenderSkip == false)
					{
						if(string.IsNullOrEmpty(drawingElement.DrawingText) == false)
						{
					
							if(commonHTML.IsTextRendererDrawTextMethodExists  ==false)
							{
								if(__WillPaintBackGround == true)
								{
									if(backBrush != null)
									{
										_grCon.Graphic.FillRectangle(backBrush, elementBounds);
									}
								}

								_grCon.Graphic.DrawString(drawingElement.DrawingText, fnt, fntBrush, elementBounds, _grCon.StandardStringFormat);
                                if (___IsTextUnderLineRequied == true)
                                {
                                    _grCon.Graphic.DrawLine(___penUnderLine, new Point((int)elementBounds.X, (int)(elementBounds.Y + elementBounds.Height)), new Point((int)(elementBounds.X + elementBounds.Width), (int)(elementBounds.Y + elementBounds.Height)));
                                }
							}
							else
							{

                                System.Windows.Forms.TextRenderer.DrawText(_grCon.Graphic, drawingElement.DrawingText, fnt,new Point((int)elementBounds.X, (int)elementBounds.Y), fntColor, ___FontBackColor, 0);
                                if (___IsTextUnderLineRequied == true)
                                {
                                    _grCon.Graphic.DrawLine(___penUnderLine, new Point((int)elementBounds.X, (int)(elementBounds.Y + elementBounds.Height)), new Point((int)(elementBounds.X + elementBounds.Width), (int)(elementBounds.Y + elementBounds.Height)));
                                }
							}
						}
					}
					else
					{
						//break;
					}

                    /* No longer user Screen Informations */

                    /*
					if(_grCon.WillCreateScreenElementInfomation == true && baseElement !=null && baseElement.___style != null && baseElement.___Document != null)
					{
						if(baseElement.___style.___AHrefData.Length != 0 && string.Compare(baseElement.___style.___AHrefData, "#", StringComparison.OrdinalIgnoreCase) != 0)
						{
							this.CreateScreenElementForTagElement(baseElement,  elementBounds);
						}
						else if(baseElement.___attributes.ContainsKey("onclick") == true || baseElement.___attributes.ContainsKey("click") == true)
						{
							this.CreateScreenElementForTagElement(baseElement, elementBounds);
						}
					}
                     * */
				
				}
			}
			catch(Exception ex)
			{
				if(baseElement != null)
				{
					if(commonLog.LoggingEnabled && commonLog.LogLevel >= 1)
					{
						commonLog.LogEntry("___drawTextElement No More Drawings : " + baseElement.ToString(), ex);
					}
				}
				else
				{
					if(commonLog.LoggingEnabled && commonLog.LogLevel >= 1)
					{
						commonLog.LogEntry("___drawTextElement No More Drawings", ex);
					}
				}
				if(baseElement != null && baseElement.___elementTagType != CHtmlElementType.BODY && baseElement.___elementTagType != CHtmlElementType.HTML)
				{
					baseElement.___IsElementVisible = false;
				}
			}
			finally
			{
				if(backBrush != null)
				{
					backBrush.Dispose();
				}
				if(fntBrush != null)
				{
					fntBrush.Dispose();
				}
                if (___FontShouldNotDisposed == false) // it it is true means for is from FontCache.
                {
                    if (fnt != null)
                    {
                        fnt.Dispose();
                    }
                }
                if (___penUnderLine != null)
                {
                    ___penUnderLine.Dispose();
                    ___penUnderLine = null;
                }
			}
		}
#endif
	 
		
		public bool hasOwnProperty(object _oname)
		{

            return this.___hasPropertyByName(commonHTML.GetStringValue(_oname));
		}




		/// <summary>
		/// Process Script Action ex. onclick onmousemove onmousedown etc
		/// </summary>
		/// <param name="eventElement"></param>
		/// <param name="__actionName"></param>
		internal object PerformCHtmlElementAction(CHtmlElement eventElement, CHtmlAttribute ___targetAttr, CHtmlEventDetail ___eventDetail,bool __NoReport, bool NoWindowEventReset)
		{
			object __resultObject = null;
			try
			{
				if(eventElement != null)
				{
                    if (NoWindowEventReset == false)
                    {

                    }
                        CHtmlAttribute attrAction = ___targetAttr;
						if(attrAction != null && attrAction.value != null)
						{
                            if (NoWindowEventReset == false)
                            {
                                this.___event.___resetToDefaults();
                            }
                            if (this.___event.type.Length == 0)
                            {
                                string strEventTypeName = "";
                                if (___targetAttr != null)
                                {
                                    strEventTypeName = ___targetAttr.name;
                                    if (strEventTypeName.StartsWith("on", StringComparison.OrdinalIgnoreCase) == true)
                                    {
                                        strEventTypeName = strEventTypeName.Substring(2);
                                    }
                                }
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                {
                                    commonLog.LogEntry("Strange... PerformCHtmlElementAction is processing but event.type is empty. use  : {0}", strEventTypeName);
                                }
                                this.___event.___set_event_type(strEventTypeName);
                            }

         

                            if (___eventDetail != null)
                            {
                                this.___event.___set_event_type(___eventDetail.eventname);
                                switch (___eventDetail.buttons)
                                {
                                    case CHtmlEventDetailMouseButtons.Left:
                                        this.___event.button = 0;
                                        break;
                                    case CHtmlEventDetailMouseButtons.Right:
                                        this.___event.button = 2;
                                        break;
                                    case CHtmlEventDetailMouseButtons.Middle:
                                        this.___event.button = 1;
                                        break;
                                }
                            }
                            this.___event.fromElement = eventElement;
                            this.___event.srcElement = eventElement;
                            this.___event.toElement = eventElement;
                            
						
							CHtmlScriptResultElement script =null;

							script = new CHtmlScriptResultElement();

                            script.text = eventElement.toLogString() + ___targetAttr.name;

							script.IsCompiled = true;	
						
							try
							{

                                if (this.___IsMultiversalDocument == true)
                                {
                                    CHtmlMultiversalWindow ___multiversal = this.___MultiversalWindow;
                                    if (___multiversal == null && this.___MultiversalWindowWeakReference != null)
                                    {
                                        ___multiversal = this.___MultiversalWindowWeakReference.Target as CHtmlMultiversalWindow;
                                    }
                                    if (___multiversal != null)
                                    {
                                    IMultiversalScriptProcessor ___processor = ___multiversal.getMultiversalScriptProcessorByScriptType("");
                                        if (___processor != null)
                                        {
                                            if (attrAction.value is string)
                                            {

                                            }

                                        }
                                    }
                                }
							}
							catch(System.Threading.ThreadAbortException thabort)
							{
								if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
								{
									commonLog.LogEntry("PerformCHtmlElementAction Timeout.", thabort);
								}
								if(script == null)
									goto FinalStage;
								script.result = 500;
                                script.resultText = "PerformCHtmlElementAction Error " + eventElement.toLogString() + " " + ___targetAttr.name;
                                script.errorDetail = commonData.GetExceptionAsString(thabort);
								if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
								{
									commonLog.LogEntry(script.resultText);
                                 
								}
							}
							catch(Exception ex)
							{
								if(script == null)
									goto FinalStage;
								script.result = 500;
                                script.resultText = "PerformCHtmlElementAction Error " + eventElement.toLogString() + " " + ___targetAttr.name;
                                script.errorDetail = commonData.GetExceptionAsString(ex);
								if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
								{
									commonLog.LogEntry(script.resultText);
                                    commonLog.LogEntry(script.errorDetail);
								}
							}
	
							this.___scriptEventList.Add(script);

						}
					
				}
			}
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
				{
					commonLog.LogEntry("PerformCHtmlElementAction", ex);
				}
			}
			FinalStage:
			return  __resultObject;
		}
        public bool ___IsDomModeFullParseMode()
        {
            if (this.___IsElementCreationNeedsToBeDynamic == true)
            {
                return false;
            }
            if (this.___documentDomType == CHtmlDomModeType.HTMLDOM || this.___documentDomType == CHtmlDomModeType.HTMLDOM_NoGUI)
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Checks if element needs to apply css mode
        /// </summary>
        /// <returns></returns>
        public bool ___IsDomModeCSSApplyMode()
        {
            if (this.___IsElementCreationNeedsToBeDynamic == true)
            {
                return false;
            }
            if (this.___documentDomType == CHtmlDomModeType.HTMLDOM || this.___documentDomType == CHtmlDomModeType.HTMLDOM_NoGUI || this.___documentDomType == CHtmlDomModeType.SVGDOM)
            {
                return true;
            }
            return false;
        }

        internal bool ___IsDomModeAnyHTML()
        {
            switch (this.___documentDomType)
            {
                case CHtmlDomModeType.HTMLDOM:
                case CHtmlDomModeType.HTMLDOM_NoGUI:
                case CHtmlDomModeType.HTMLSegment:
                case CHtmlDomModeType.HTML_Impl:
                case CHtmlDomModeType.HTMLDocumentFragment:
                    return true;
            }
            return false;
        }
        internal  bool ___IsDomModeXMLLikeStyleMode()
        {
            switch (this.___documentDomType)
            {
                case CHtmlDomModeType.SVGDOM:
                case CHtmlDomModeType.XMLDOM:
             
                    return true;
            }
            return false;
        }
		internal static CHtmlDocument CreateCHtmlDocumentFromHTML(string __HTML, string __charset, string __Url, CHtmlDomModeType __domMode, bool __Async, bool CreateHTMLAndBodyTagAuto, bool IsAllDynamicElement)
		{
			CHtmlDocument doc = new CHtmlDocument(__domMode);
			doc.___charset = "utf-8";
            doc.___encText = System.Text.UTF8Encoding.UTF8;
           
            doc.___URL = string.Copy(__Url);
			if(CreateHTMLAndBodyTagAuto)
			{
				bool IsHTMLFound = false;
				bool IsBodyFound = false;
				bool IsHeadFound = false;
				System.Text.StringBuilder sbFirst = null;
                char[] __HTMLArray = __HTML.ToCharArray();
                int __arrayLength = __HTMLArray.Length;
                for (int i = 0; i < __arrayLength; i++)
				{
                    char c = __HTMLArray[i];
					switch(c)
					{
						case '<':
						{
							sbFirst = new StringBuilder();
							continue;
						}
						case '>':
							if(sbFirst != null && sbFirst.Length > 1)
							{
								string sLine = sbFirst.ToString();
								int pos = sLine.IndexOfAny(commonHTML.CharSpaceCrLfTabZentakuSpace);
								if(pos > 0)
								{
									sLine = sLine.Substring(0, pos);
								}
								switch(commonHTML.FasterToUpper(sLine))
								{
									case "HTML":
										IsHTMLFound = true;
										break;
									case "BODY":
										IsBodyFound = true;
										break;
									case "HEAD":
										IsHeadFound = true;
										break;
									case "META":
									case "LINK":
									case "SCRIPT":
									case "STYLE":
									case "TITLE":
										break;
									default:
										if(commonHTML.TagsForLayoutSortedList.ContainsKey(sLine) == true)
										{
											goto ExitLoop;
										}
										else
										{
											break;
										}
								}
								


							}
							break;
						default:
							if(sbFirst != null)
							{
								sbFirst.Append(c);
								if(sbFirst.Length == 1)
								{
									if(char.IsLetter(sbFirst[0]) == false)
									{
										sbFirst = null;
									}
								}
							}
							break;
					}
				}
			ExitLoop:
				if(IsHTMLFound == false)
				{
                    doc.___HtmlBuilder.Append("<HTML charset='utf-8'>");
				}
				if(IsHeadFound == false)
				{
                    doc.___HtmlBuilder.Append("<HEAD></HEAD>");
				}
				if(IsBodyFound == false)
				{
                    doc.___HtmlBuilder.Append("<BODY>");
				}
                doc.___HtmlBuilder.Append(__HTML);
				if(IsBodyFound == false)
				{
                    doc.___HtmlBuilder.Append("</BODY>");
				}
				if(IsHTMLFound == false)
				{
                    doc.___HtmlBuilder.Append("</HTML>");
				}
			}
			else
			{
                doc.___HtmlBuilder.Append(__HTML);
			}
            doc.___HtmlBuilderLength = doc.___HtmlBuilder.Length;
            doc.___IsElementCreationNeedsToBeDynamic = IsAllDynamicElement;
            doc.___IsHtm1stHttpResponseCompleted = true;
            doc.___IsHtmlResponseCompleted = true;
            doc.___ContentLength = doc.___HtmlBuilder.Length;

			return doc;
		}

        internal void ___loadXMLString(string strXML, string ___charset, string __strURL)
		{
			this.___NoProgressReport = true;
			this.___charset = ___charset;
			this.___IsHtmlCharSetDetectionCompleted = true;
            this.___URL = string.Copy(__strURL);
            if (this.___locationBase == null)
            {
                this.___locationBase = new CHtmlLocationBase();
            }
            this.___locationBase.___setHrefDirect(__strURL);
			
			this.___NoProgressReport = true;
            this.___IsElementCreationNeedsToBeDynamic = true;
            this.___HtmlBuilder.Append(strXML);
            this.___HtmlBuilderLength = this.___HtmlBuilder.Length;
            this.___IsHtmlResponseCompleted = true;



			
			if(this.___ThreadParseCompleteEvent !=null)
			{
				try
				{
					this.___ThreadParseCompleteEvent.WaitOne(30000, false);
				}
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                    }
                }
			}
			try
			{
				if(this.___ThreadParseCompleteEvent !=null)
				{
					commonData.DisposeObject(this.___ThreadParseCompleteEvent);
					this.___ThreadParseCompleteEvent =null;
				}
				if(this.___ThreadParseSuspendEvent !=null)
				{
					commonData.DisposeObject(this.___ThreadParseSuspendEvent);
					this.___ThreadParseSuspendEvent =null;
				}
			}
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("CHtmlDocument LoadXML() {0} has error {1}", this, commonData.GetExceptionAsString(ex));
                }
            }
		}
        private void ___testDrawingElementBoundsPosition(CHtmlElement ___tagElement)
        {
            foreach (CHtmlDrawingObject drawElement in ___tagElement.___drawingObjectList)
            {
                if (drawElement.___offfsetParentPoint == commonHTML.MinusPoint)
                {
                    commonLog.LogEntry("BUGUB!!! has bad position : ", drawElement.ToString());
                }
            }
        }
		/// <summary>
		/// DrawElements Recursively
		/// </summary>
		/// <param name="___tagElement"></param>
		/// <param name="_grCon"></param>
		
		public void drawRootElementRecursively(CHtmlElement ___tagElement, ref GraphicCotainer _grCon)
		{
			if(___tagElement == null)
			{
				return;
			}
           /*
#if DEBUG
            if (commonHTML.___startWatching == true)
            {
                if (___tagElement.___class == "lazy")
                {
                    commonLog.LogEntry("HERE");
                }
            }
#endif
            * */
         /*
#if DEBUG

     if (___tagElement.___elementTagType == CHtmlElementType._ITEXT)
     {
         commonLog.LogEntry("HERE");
     }
          
 
#endif
          */
			bool ___DrawTagElementCalled = false;
            bool ___isResetElementBoundsCalled = false;
            bool ___isDrawingObjectResetBoundsCalled = false;
			if(_grCon.IsUIThreadPaint == true)
			{
				try
				{


					if(___tagElement.___isElementPositionAbsoluteOrStatic == false)
					{
                    
						if(___tagElement.___IsElementofffsetParentPointCaluculationRequired == true)
						{
                        

							if(___tagElement.___isCalculateElementBoundsCalled == false)
							{
                               
								if(commonHTML.elementTagTypesNoStylesheetLookupSortedList.ContainsKey( ___tagElement.___elementTagType) == true)
								{
									___tagElement.___IsElementVisible = false;
									___tagElement.___isCalculateElementBoundsCalled = true;
								}
								else
								{
									try
									{
                                        if (this.___IsOnLoadWindowDocumentCompletedCalled == true)
                                        {
                                            this.___calculateElementBounds(___tagElement);
                                        }
                                        else
                                        {
                                            return;
                                        }
									}
                                    catch (Exception ex)
                                    {
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                        {
                                            commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                        }
                                    }
								
								}
							}

                            ___tagElement.___offfsetParentPoint = new PointF((float)(_grCon.TotalOffsetLeft + ___tagElement.___offsetLeft), (float)(_grCon.TotalOffsetTop + ___tagElement.___offsetTop));
                            ___tagElement.___IsElementofffsetParentPointCaluculationRequired = false;
						
							if(___tagElement.___drawingObjectList != null && ___tagElement.___IsElementVisible == true)
							{
								if(___tagElement.___drawingObjectList.Count > 0)
								{
									this.___resetDrawingElementParentBounds(___tagElement,ref _grCon);
                                    ___isResetElementBoundsCalled = true;
                                    ___isDrawingObjectResetBoundsCalled = true;
                                    if (___isDrawingObjectResetBoundsCalled == false) { ;}
                                    ___tagElement.___IsElementofffsetParentPointCaluculationRequired = false;
								}
							}
                            if (___isResetElementBoundsCalled == false)
                            {
                                
                                CHtmlElement __parentElement = ___tagElement.___parent as CHtmlElement;
                                if (__parentElement != null)
                                {
                                    
                                    if (___tagElement.___offfsetParentPoint.Y < __parentElement.___offfsetParentPoint.Y)
                                    {
                                        if (___tagElement.___isElementPositionAbsoluteOrStatic == false)
                                        {
                                            ___tagElement.___offfsetParentPoint.Y = __parentElement.___offfsetParentPoint.Y + (float)___tagElement.___offsetTop;
                                        }
                                    }
                                     
                                }
                                 
                            }
						}

			
					}
					else
					{
						// ================================================
						//   Calculate Absolute Postion. May be wrong ...
						// ================================================
						if(___tagElement.___IsElementofffsetParentPointCaluculationRequired == true)
						{
                            ___tagElement.___offfsetParentPoint = new PointF((float)(_grCon.TotalOffsetLeft + ___tagElement.___offsetLeft), (float)(_grCon.TotalOffsetTop + ___tagElement.___offsetTop));
                            ___tagElement.___IsElementofffsetParentPointCaluculationRequired = false;
							if(___tagElement.___drawingObjectList != null)
							{
								if( ___tagElement.___IsElementVisible == true)
								{
									if(___tagElement.___drawingObjectList.Count > 0)
									{
										this.___resetDrawingElementParentBounds(___tagElement,ref _grCon);
                                        ___isDrawingObjectResetBoundsCalled = true;
                                        ___isResetElementBoundsCalled = true;
                                        ___tagElement.___IsElementofffsetParentPointCaluculationRequired = false;
									}
								}
							}
						}
				
					}
				}
				catch(Exception ex)
				{
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
					{
						commonLog.LogEntry("DrawElementRecursively {0} : {1}", ___tagElement, ex.Message);
					}
				}
			}
			if(_grCon.CurrentElementDepth >= DRAW_ELEMENT_STACK_LIMIT)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
				{
					commonLog.LogEntry("drawRootElementRecursively {0} stack depth is too deep. Abort Drawring : {1}", ___tagElement, DRAW_ELEMENT_STACK_LIMIT);
				}
				___tagElement.___IsElementVisible = false;
				___tagElement.___style.StyleCommentAdd("DrawElement Stack Depth is too Deep");
				return;
			}
            bool IsResetBoundsComplete = false;

			if(___tagElement.___IsElementVisible == true)
			{
				if( ___tagElement.___ManagedControlWeakReference != null ||___tagElement.___ManagedControlHandle != IntPtr.Zero)
				{
					try
					{
					
						return;
					} 
					catch(Exception ex)
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
						{
							commonLog.LogEntry("LocateManagedControlForTagElement", ex);
						}
					}
				
				}
                /*
#if DEBUG
                if (___tagElement.___drawingObjectList.Count > 0)
                {
                    ___testDrawingElementBoundsPosition(___tagElement);
                }
#endif
                */



                //if(_grCon.PaintRectangle.IntersectsWith(___tagElement.offsetScreenBounds) || ___tagElement.___elementTagType == CHtmlElementType._ITEXT)
                //{
                if (___tagElement.___ManagedControlHandle == IntPtr.Zero)
                {
                    if (___tagElement.___offsetWidth > 0 && ___tagElement.___offsetHeight > 0)
                    {

                        if (___tagElement.___IsElementBlock == true || ___tagElement.___elementTagType == CHtmlElementType.IMG)
                        {
                            RectangleF targetBounds = ___tagElement.___ScreenRectangle;
                            if (_grCon.PaintRectangle != ___tagElement.___BaseControlDisplayRectangle)
                            {
                                ___tagElement.___BaseControlDisplayRectangle = _grCon.PaintRectangle;
                                targetBounds = ___tagElement.GetElementBoundsOnScreen();
                            }
                            if (___IsCalucuateScreenMaximunBoundsRequired == true)
                            {
                                _grCon.ScreenMaximunBounds = RectangleF.Union(_grCon.ScreenMaximunBounds, targetBounds);
                            }
                            IsResetBoundsComplete = true;
                            if (___tagElement.___elementTagType != CHtmlElementType.SVG)
                            {
                                if (_grCon.IsHoverPaintMode == false)
                                {

                                    this.___drawElement(___tagElement, ___tagElement.___style, targetBounds,  _grCon, true, false);

                                }
                                else
                                {
                                    this.___drawElement(___tagElement, ___tagElement.___styleHover, targetBounds,  _grCon, true, false);
                                }
                            }
                            else
                            {
                                if (_grCon.IsHoverPaintMode == false)
                                {

                                    CHtmlSVGElement.___drawSVGElement(___tagElement, ___tagElement.___style, targetBounds,  _grCon, true, false);

                                }
                                else
                                {
                                    CHtmlSVGElement.___drawSVGElement(___tagElement, ___tagElement.___styleHover, targetBounds,  _grCon, true, false);
                                }

                            }
                            ___DrawTagElementCalled = true;
                        }

                    }
                }
					if( ___DrawTagElementCalled== false)
					{
						if(___tagElement.___ElementInlineLevel <= 1)
						{
                            RectangleF targetBounds = ___tagElement.___ScreenRectangle;
                            if (_grCon.PaintRectangle != ___tagElement.___BaseControlDisplayRectangle)
                            {
                                ___tagElement.___BaseControlDisplayRectangle = _grCon.PaintRectangle;
                                targetBounds = ___tagElement.GetElementBoundsOnScreen();
                            }
                            if (this.___IsCalucuateScreenMaximunBoundsRequired == true)
                            {
                                _grCon.ScreenMaximunBounds = RectangleF.Union(_grCon.ScreenMaximunBounds, targetBounds);
                            }
                            IsResetBoundsComplete = true;
                        if (___tagElement.___elementTagType != CHtmlElementType.SVG)
                        {
                            if (_grCon.IsHoverPaintMode == false)
                            {
                                this.___drawElement(___tagElement, ___tagElement.___style, targetBounds,  _grCon, true, false);

                            }
                            else
                            {
                                this.___drawElement(___tagElement, ___tagElement.___styleHover, targetBounds,  _grCon, true, false);
                            }
                        }else
                        {
                            if (_grCon.IsHoverPaintMode == false)
                            {
                                CHtmlSVGElement.___drawSVGElement(___tagElement, ___tagElement.___style, targetBounds,  _grCon, true, false);

                            }
                            else
                            {
                                CHtmlSVGElement.___drawSVGElement(___tagElement, ___tagElement.___styleHover, targetBounds, _grCon, true, false);
                            }
                        }
							___DrawTagElementCalled = true;
						}
					}
					if(___tagElement.___drawingObjectList  != null && ___tagElement.___drawingObjectList.Count > 0)
					{
                        if (IsResetBoundsComplete == false)
                        {
                            RectangleF targetBounds = ___tagElement.___ScreenRectangle;
                            if (_grCon.PaintRectangle != ___tagElement.___BaseControlDisplayRectangle)
                            {
                                ___tagElement.___BaseControlDisplayRectangle = _grCon.PaintRectangle;
                                targetBounds = ___tagElement.GetElementBoundsOnScreen();
                            }
                            if (this.___IsCalucuateScreenMaximunBoundsRequired == true)
                            {
                                _grCon.ScreenMaximunBounds = RectangleF.Union(_grCon.ScreenMaximunBounds, targetBounds);
                            }
                        }

						//this.___drawTextElement(___tagElement,ref _grCon, false);
						___DrawTagElementCalled = true;
					}

				//}
			}
            
			short ShiftMethod = 0;
			System.Drawing.Drawing2D.GraphicsState graphicState = null;
			//if(___tagElement.___IsElementBlock == true &&  ___tagElement.___elementTagType != CHtmlElementType._ITEXT)
			if(___tagElement.___ElementInlineShifted == false)
			{
				// If Block Element (regardless vibile or non-visile) increment the location
				// for layout

                _grCon.TotalOffsetLeft += (float)(___tagElement.___offsetLeft + ___tagElement.___paddingLeft);
                _grCon.TotalOffsetTop += (float)(___tagElement.___offsetTop + ___tagElement.___paddingTop);
				
				if(___tagElement.___HasOverflowHidden == true && ___tagElement.___StyleOverFlowSize != SizeF.Empty)
				{
					graphicState = _grCon.Graphic.Save();
					RectangleF clipRect = ___tagElement.GetElementBoundsOnScreen();
					clipRect.Size = ___tagElement.___StyleOverFlowSize;
					_grCon.Graphic.SetClip(clipRect, System.Drawing.Drawing2D.CombineMode.Replace);
				}
				
				ShiftMethod = 1;
			}


			try
			{
                if (___tagElement.___isSvgElement == false)
                {
                   
                    
                    if (___tagElement.___childNodes.Count > 0)
                    {
                        // Draw z-index == 0 Elements first
                        int __childCount = ___tagElement.___childNodes.Count;
                        for (int i = 0; i < __childCount; i++)
                        {
                            CHtmlElement cElement = ___tagElement.___childNodes[i] as CHtmlElement;
                            if (cElement != null && cElement.___IsElementVisible == true)
                            {
                                if (cElement.___style != null && cElement.___style.___zIndexValue <= 0)
                                {

                                    if (this.___IsRenderingFirstCompleted == false && (cElement.___IsElementBlock == true && cElement.offsetScreenBounds.Top > _grCon.PaintRectangle.Top + _grCon.PaintRectangle.Height + 3600) == false)
                                    {
                                        _grCon.CurrentElementDepth++;
                                        drawRootElementRecursively(cElement, ref _grCon);
                                        _grCon.CurrentElementDepth--;
                                    }
                                }
                            }
                        }
                        if (___tagElement.___ZIndexedChildElementList != null)
                        {
                            int zItemCount = ___tagElement.___ZIndexedChildElementList.Count;
                            if (zItemCount > 0)
                            {
                                for (int zPos = 0; zPos < zItemCount; zPos++)
                                {
                                    CHtmlElement zIndexedElement = ___tagElement.___ZIndexedChildElementList[zPos];
                                    //HTML.CHtmlElement zIndexedElement = ___tagElement.ZIndexedChildElementSortedList[____zIndexKey] as CHtmlElement;
                                    if (zIndexedElement != null)
                                    {
                                        if (zIndexedElement.___IsElementVisible == true && object.ReferenceEquals(___tagElement, zIndexedElement) == false)
                                        {

                                            if (this.___IsRenderingFirstCompleted == false && (zIndexedElement.___IsElementBlock == true && zIndexedElement.offsetScreenBounds.Top > _grCon.PaintRectangle.Top + _grCon.PaintRectangle.Height + 3600) == false)
                                            {
                                                _grCon.CurrentElementDepth++;
                                                drawRootElementRecursively(zIndexedElement, ref _grCon);
                                                _grCon.CurrentElementDepth--;
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }
                }
				
			}
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
				{
					commonLog.LogEntry("drawRootElementRecursively Draw Error" + ___tagElement.toLogString(), ex);
				}
                /*
				if(___tagElement.___elementTagType != CHtmlElementType.HTML && ___tagElement.___elementTagType != CHtmlElementType.BODY)
				{
					___tagElement.___IsElementVisible = false;
				}
                */
				//return;
			}
			finally
			{
				switch(ShiftMethod)
				{
					case 1:
                        _grCon.TotalOffsetLeft -= (float)(___tagElement.___offsetLeft + ___tagElement.___paddingLeft);
                        _grCon.TotalOffsetTop -= (float)(___tagElement.___offsetTop + ___tagElement.___paddingTop);
					
						if( graphicState != null)
						{
							_grCon.Graphic.Restore(graphicState);
						}
						break;
					case 2:
                        _grCon.TotalOffsetLeft -= (float)___tagElement.___offsetLeft;
                        _grCon.TotalOffsetTop -= (float)___tagElement.___offsetTop;
						break;
				}
			}
		}

        
        
        
        /// <summary>
        /// Draw CHtmlElements() Class
        /// </summary>
        /// <param name="tagElement"></param>
        /// <param name="___rectScreen"></param>
        /// <param name="_gr"></param>
        
		public void ___drawElement(CHtmlElement ___tagElement, CHtmlCSSStyleSheet __targetStyle, RectangleF elementBounds,  GraphicCotainer _grCon, bool SkipText, bool IsCursorWithinBounds)
		{
			if(___tagElement == null || ___tagElement.___IsSystemHidden == true)
			{
				return;
			}
			if(___tagElement.___style == null)
			{
				//commonLog.LogEntry("DrawTagElement does now allow {0}", ___tagElement.ToString());
				return;
			}
			if(elementBounds.Width <= 0 || elementBounds.Height <= 0)
				return;
			CHtmlCSSStyleSheet styleSelected = null;
			if(_grCon.IsHoverPaintMode == false)
			{
                styleSelected = __targetStyle;
			}
			else
			{
				styleSelected =  __targetStyle;
			}
			if(styleSelected == null)
			{
                if (IsCursorWithinBounds == true)
                {
                    if (___tagElement.___styleHover != null && ___tagElement.___styleHover.___PropertyMeargedCount > 0)
                    {
                        styleSelected = ___tagElement.___styleHover;
                    }
                    else
                    {
                        styleSelected = ___tagElement.___style;
                    }
                }
                else
                {
                    styleSelected = ___tagElement.___style;
                }
			}
     
            switch (___tagElement.___elementTagType)
            {
                case CHtmlElementType.CANVAS:
                    {
                        if (___tagElement.___ElementCanvasContextType  == CanvasContextModeType.Canvas2D)
                        {
                            if (___tagElement.___C2DImage != null)
                            {
                                try
                                {
                                    if (___tagElement.___canvasContextCurrent  != null)
                                    {

                                            _grCon.Graphic.DrawImageUnscaled(___tagElement.___C2DImage, Rectangle.Round(elementBounds));
                                        
                                    }
                                }
                                catch (Exception ex)
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 50)
                                    {
                                        commonLog.LogEntry("DrawTagElement Canvas Paint Has Exception : {0}", ex.Message );
                                    }

                                }
                                return;
                            }

                            return;


                        }
                        return;
                    }
                //___tagElement.BaseControlDisplayRectangle = _grCon.PaintRectangle;
                //RectangleF elementBounds = ___tagElement.GetElementBoundsOnScreen();

                case CHtmlElementType.IFRAME:
                    {
                        if (___tagElement.___ManagedControlHandle != IntPtr.Zero)
                        {
                            ___tagElement.___IsDrawDone = true;
                        }
                        return;
                    }
                    
            }
            /*
#if DEBUG
            if (___tagElement.id == "main")
            {
                commonLog.LogEntry("HERE");
            }
#endif
             */
            /*
			if(commonMCS.MCSGeneralFdr.DrawHTMLLayoutPanel && ___tagElement.___IsElementVisible == false)
			{
				System.Drawing.Drawing2D.HatchBrush invisibleBrush  = new System.Drawing.Drawing2D.HatchBrush(System.Drawing.Drawing2D.HatchStyle.LightVertical, Color.DimGray, Color.White);
				_grCon.Graphic.FillRectangle(invisibleBrush,elementBounds);
				invisibleBrush.Dispose();
				invisibleBrush = null;
			}
            */

			if(___tagElement.___WillCreateMangedControl == true && this.___IsRenderingFirstCompleted)
			{
				if(___tagElement.___ManagedControlHandle == IntPtr.Zero)
				{
					//System.Drawing.Drawing2D.LinearGradienBrush pluginBrush = new System.Drawing.Drawing2D.LinearGradientBrush(new Rectangle(0,0, 30, 30), Color.Gray, Color.Gainsboro, System.Drawing.Drawing2D.LinearGradientMode.BackwardDiagonal);
					//pluginBrush.WrapMode = System.Drawing.Drawing2D.WrapMode.TileFlipXY;
					System.Drawing.Drawing2D.HatchBrush pluginBrush = new System.Drawing.Drawing2D.HatchBrush(System.Drawing.Drawing2D.HatchStyle.Trellis, Color.Gainsboro, Color.White);
					_grCon.Graphic.FillRectangle(pluginBrush, elementBounds);
					if(elementBounds.X > 16 && elementBounds.Y > 16)
					{
						if(_grCon.ImageNA != null)
						{
							_grCon.Graphic.DrawImageUnscaled(_grCon.ImageNA, (int)elementBounds.X, (int)elementBounds.Y);
						}
					}
					pluginBrush.Dispose();
					pluginBrush = null;
				}
			}
			if(___tagElement.___elementTagType  == CHtmlElementType.HR)
			{
				goto PriorToHR;
			}

			if(styleSelected != null && styleSelected.___BorderLeftWidthComputedValue > 0)
			{
                Color colorBorderLeft = Color.Transparent;
                if (styleSelected.___BorderLeftColorComputedValueSpecified == true)
                {
                    colorBorderLeft = styleSelected.___BorderLeftColorComputedValue;
                }
                else
                {
                    colorBorderLeft = Color.Silver;
                }

                try
                {
                    /*
                    _grCon.Graphic.DrawLine(penBorderLeft, elementBounds.X, elementBounds.Y, elementBounds.X, elementBounds.Y + elementBounds.Height);
                    */
                }
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("___drawElement drawLine Exception. ", ex);
                    }
                }

			}
            if (styleSelected != null && styleSelected.___BorderRightWidthComputedValue > 0)
            {
                Color colorBorderRight = Color.Transparent;
                if (styleSelected.___BorderRightColorComputedValueSpecified == true)
                {
                    colorBorderRight = styleSelected.___BorderRightColorComputedValue;
                }
                else
                {
                    colorBorderRight = Color.Silver;
                }


 

			}
            if (styleSelected != null && styleSelected.___BorderBottomWidthComputedValue > 0)
            {
                Color colorBorderBottom = Color.Transparent;
                if (styleSelected.___BorderBottomColorComputedValueSpecified == true)
                {
                    colorBorderBottom = styleSelected.___BorderBottomColorComputedValue;
                }
                else
                {
                    colorBorderBottom = Color.Silver;
                }
                /*
				_grCon.Graphic.DrawLine(penBorderBottom, elementBounds.X , elementBounds.Y + elementBounds.Height ,elementBounds.X + elementBounds.Width, elementBounds.Y  + elementBounds.Height);
                */
			}
            if (styleSelected != null && styleSelected.___BorderTopWidthComputedValue > 0)
            {
                Color colorBorderTop = Color.Transparent;
                if (styleSelected.___BorderTopColorComputedValueSpecified == true)
                {
                    colorBorderTop = styleSelected.___BorderTopColorComputedValue;
                }
                else
                {
                    colorBorderTop = Color.Silver;
                }


	

			}
			PriorToHR:
				if(___tagElement.___elementTagType  == CHtmlElementType.HR)
				{
					Pen penHR  = null;
					System.Drawing.Drawing2D.LinearGradientBrush hrBrush = null;
					int _sizeHR = 3;
					if(string.IsNullOrEmpty(___tagElement.___style.___BackgroundImage) == true)
					{

						if(styleSelected.___BorderTopWidthComputedValue > 0)
						{
                            _sizeHR = (int)styleSelected.___BorderTopWidthComputedValue;
						}
						if(_sizeHR > 0)
						{
							Color _hrColor = Color.DimGray;
							if(styleSelected.___IsForegroundSysColorSpecified == true)
							{
                                _hrColor = styleSelected.___ForegroundSysColor;
							}
							RectangleF rectHR = elementBounds;
							rectHR.Height = _sizeHR;
							if(rectHR.Width <= 0 || rectHR.Height <= 0)
							{
								goto ExitHR;
							}
							//rectHR.Inflate(-10,0);
							hrBrush = new System.Drawing.Drawing2D.LinearGradientBrush(rectHR, _hrColor ,Color.White, System.Drawing.Drawing2D.LinearGradientMode.Vertical);
							hrBrush.SetSigmaBellShape(0.5f,0.8f);
							penHR = new Pen(hrBrush, _sizeHR);
							penHR.StartCap = System.Drawing.Drawing2D.LineCap.Round;
							penHR.EndCap   = System.Drawing.Drawing2D.LineCap.Round;
							try
							{
								_grCon.Graphic.DrawLine(penHR,elementBounds.X + 10 , elementBounds.Y + (elementBounds.Height / 2), elementBounds.Width + elementBounds.X  - 20,  elementBounds.Y + (elementBounds.Height/ 2));
							}
                            catch (Exception ex)
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                {
                                    commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                }
                            }
						}
					
					
					}
				ExitHR:
					if(penHR != null)
					{
						penHR.Dispose();
						penHR = null;
					}
					if(hrBrush != null)
					{
						hrBrush.Dispose();
						hrBrush = null;
					}
				}
			
            /*
			if(styleSelected != null && styleSelected.___WebGradation != null)
			{
				bool __IsColorInformationFound = false;
				Color gradColor1 = Color.Empty;
				Color gradColor2 = Color.Empty;
				if(styleSelected.___WebGradation.ColorList.Count > 0)
				{
					__IsColorInformationFound = true;
					gradColor1 = ((HTML.CHtmlWebGradationColor)styleSelected.___WebGradation.ColorList[0]).GradationColor;
					if(styleSelected.___WebGradation.ColorList.Count == 1)
					{
						gradColor2 = gradColor1;
					}
					else
					{
						gradColor2 = ((HTML.CHtmlWebGradationColor)styleSelected.___WebGradation.ColorList[styleSelected.___WebGradation.ColorList.Count -1]).GradationColor;

					}
				}
				if(__IsColorInformationFound)
				{
					System.Drawing.Drawing2D.LinearGradientBrush _gradientBrush = new System.Drawing.Drawing2D.LinearGradientBrush(elementBounds, gradColor1, gradColor2, styleSelected.___WebGradation.Degree,false);
					_grCon.Graphic.FillRectangle(_gradientBrush, elementBounds);
					_gradientBrush.Dispose();
					_gradientBrush = null;
				}
			}
             */


			if( _grCon.IsDrawLayoutPanel == true)
			{

				try
				{

					Pen __penGray  = new Pen(Color.DimGray, 0.5F);
					_grCon.Graphic.DrawRectangle(__penGray, Rectangle.Round(elementBounds));
					__penGray .Dispose();
					__penGray  = null;

                    string _Text = ___tagElement.ToString() + " " + elementBounds.ToString();
					System.Drawing.StringFormat sfRight = new StringFormat();
					sfRight.Alignment = System.Drawing.StringAlignment.Far;
					Font fntTagInfo = new Font(FontFamily.GenericSansSerif, 7f);
                    System.Drawing.SolidBrush brushGray = new SolidBrush(Color.Gray);
					_grCon.Graphic.DrawString(_Text,  fntTagInfo ,brushGray ,elementBounds.X + elementBounds.Width,elementBounds.Y , sfRight);
                    brushGray.Dispose();
					fntTagInfo.Dispose();
					//_grCon.Graphic.DrawRectangle(penBorder, elementBounds);
					sfRight.Dispose();
				} 
				catch(Exception ex)
				{
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
					{
						commonLog.LogEntry("DrawHTMLLaytoutPanel", ex);
					}
				}
				//}
            }
#region Draw CHtmlStyleElementMultipleImage Section To Draw BackgroundImage or Gradation
            if (__targetStyle.___multipleBackgroundImageDataSet != null && __targetStyle.___multipleBackgroundImageDataSet.Count != 0)
            {
                try
                {

                    /*
#if DEBUG
                    if (string.Equals(___tagElement.___id, "hogehoge") == true)
                    {
                        commonLog.LogEntry("HERE");
                    }
#endif
                     */

                    if (__targetStyle.___multipleBackgroundImageDataSet.Count > 0)
                    {
                        int multiImageDataCount = __targetStyle.___multipleBackgroundImageDataSet.Count;
                        for (int mIndex = 0; mIndex < multiImageDataCount; mIndex++)
                        {
                            CHtmlStyleElementMultpleImageData ___multiData = __targetStyle.___multipleBackgroundImageDataSet[mIndex];
                            System.Drawing.SizeF ___imageCSSBackgroundSize = System.Drawing.SizeF.Empty;
                            System.Drawing.PointF ___imageCSSBackgroundPosition = System.Drawing.PointF.Empty;
                            if (___multiData != null)
                            {
                                System.Drawing.Image ___multiImage = null;
                                System.Drawing.Brush ___multiBrush = null;
                                // 0) Draw Background Color if any (First Color Only normally)
                                // 1) Draw Gradation if any
                                // 2) Draw BackgroundImage  if any
                                if ((mIndex == 0 || ___multiData.EnableDrawBackgroundColorAlways  == true ) && (string.IsNullOrEmpty(___multiData.backgroundColorString) == false && ___multiData.backgroundColorComputedValue != System.Drawing.Color.Transparent) )
                                {
                                    if (___tagElement.___elementTagType != CHtmlElementType.HTML)
                                    {
                                        if (styleSelected.___BorderRadiusOneOfValuePositive == false)
                                        {
                                            ___multiBrush = new System.Drawing.SolidBrush(___multiData.backgroundColorComputedValue);
                                            _grCon.Graphic.FillRectangle(___multiBrush, elementBounds);
                                           
                                        }
                                        else
                                        {
                                            // Border-Radius one of values is positive. Use Graphic Path
                                            System.Drawing.Drawing2D.GraphicsPath gfxPath = null;
                                            try
                                            {

                                                //RectangleF radiusBounds = RectangleF.Inflate(elementBounds, -strokeOffset, -strokeOffset);
                                                RectangleF radiusBounds = elementBounds;
                                                int CornerRadius = (int)styleSelected.___BorderTopLeftRadiusHorizontalComputedValue;
                                                //DrawPen.EndCap = DrawPen.StartCap = LineCap.Round;

                                                gfxPath = new System.Drawing.Drawing2D.GraphicsPath();
                                                if (styleSelected.___BorderTopLeftRadiusHorizontalComputedValue > 0 && styleSelected.___BorderTopLeftRadiusVerticalComputedValue > 0)
                                                {
                                                    gfxPath.AddArc(radiusBounds.X, radiusBounds.Y, (float)styleSelected.___BorderTopLeftRadiusHorizontalComputedValue, (float)styleSelected.___BorderTopLeftRadiusHorizontalComputedValue, 180, 90);
                                                }
                                                else
                                                {
                                                    gfxPath.AddLine(radiusBounds.X, radiusBounds.Y, radiusBounds.X + radiusBounds.Width, radiusBounds.Y);
                                                }
                                                if (styleSelected.___BorderTopRightRadiusHorizontalComputedValue > 0 && styleSelected.___BorderTopRightRadiusVerticalComputedValue > 0)
                                                {
                                                    gfxPath.AddArc(radiusBounds.X + radiusBounds.Width - (float)styleSelected.___BorderTopRightRadiusHorizontalComputedValue, radiusBounds.Y, (float)styleSelected.___BorderTopRightRadiusHorizontalComputedValue, (float)styleSelected.___BorderTopRightRadiusHorizontalComputedValue, 270, 90);
                                                }
                                                else
                                                {
                                                    gfxPath.AddLine(radiusBounds.X + radiusBounds.Width, radiusBounds.Y, radiusBounds.X + radiusBounds.Width, radiusBounds.Y + radiusBounds.Height);
                                                }
                                                if (styleSelected.___BorderBottomRightRadiusHorizontalComputedValue > 0 && styleSelected.___BorderBottomRightRadiusVerticalComputedValue > 0)
                                                {
                                                    gfxPath.AddArc(radiusBounds.X + radiusBounds.Width - (float)styleSelected.___BorderBottomRightRadiusHorizontalComputedValue, radiusBounds.Y + radiusBounds.Height - (float)styleSelected.___BorderBottomRightRadiusVerticalComputedValue, (float)styleSelected.___BorderBottomRightRadiusHorizontalComputedValue, (float)styleSelected.___BorderBottomRightRadiusVerticalComputedValue, 0, 90);
                                                }
                                                else
                                                {
                                                    gfxPath.AddLine(radiusBounds.X + radiusBounds.Width, radiusBounds.Y + radiusBounds.Height, radiusBounds.X, radiusBounds.Y + radiusBounds.Height);
                                                }
                                                if (styleSelected.___BorderBottomLeftRadiusHorizontalComputedValue > 0 && styleSelected.___BorderBottomLeftRadiusVerticalComputedValue > 0)
                                                {
                                                    gfxPath.AddArc(radiusBounds.X, radiusBounds.Y + radiusBounds.Height - (float)styleSelected.___BorderBottomLeftRadiusVerticalComputedValue, (float)styleSelected.___BorderBottomLeftRadiusHorizontalComputedValue, (float)styleSelected.___BorderBottomLeftRadiusVerticalComputedValue, 90, 90);
                                                }
                                                else
                                                {
                                                    gfxPath.AddLine(radiusBounds.X, radiusBounds.Y + radiusBounds.Height, radiusBounds.X, +radiusBounds.Y);
                                                }
                                                gfxPath.CloseAllFigures();
                                                ___multiBrush = new SolidBrush(___multiData.backgroundColorComputedValue);
                                                _grCon.Graphic.FillPath(___multiBrush, gfxPath);
                                                gfxPath.Dispose();
                                                gfxPath = null;
                                            }
                                            catch (Exception ex)
                                            {
                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                {
                                                    commonLog.LogEntry("___DrawCHtmlElement Radius Error", this, commonData.GetExceptionAsString(ex));
                                                }
                                                if (gfxPath != null)
                                                {
                                                    gfxPath.Dispose();
                                                    gfxPath = null;
                                                }
                                            }

                                        }
                                    }

                                    if (___multiBrush != null)
                                    {
                                        ___multiBrush.Dispose();
                                        ___multiBrush = null;
                                    }
                                }
                                switch (___multiData.backgroundSizeWidthComputedType)
                                {
                                    case CSSBackgroundSizeType.NumericValue:
                                        ___imageCSSBackgroundSize.Width = (float)___multiData.backgroundSize_X_ComputedValue;
                                        break;
                                    case CSSBackgroundSizeType.Cover:
                                    case CSSBackgroundSizeType.Auto:
                                    default:
                                        switch (___multiData.ImageRepeatType)
                                        {
                                            case CSSImageRepeatType.repeat:
                                            case CSSImageRepeatType.unkown:
                                            case CSSImageRepeatType.repeatX:
                                                ___imageCSSBackgroundSize.Width = elementBounds.Width;
                                                break;
                                            case CSSImageRepeatType.repeatY:
                                                break;

                                        }

                                        break;
                                }
                                switch (___multiData.backgroundSizeHeightComputedType)
                                {
                                    case CSSBackgroundSizeType.NumericValue:
                                        ___imageCSSBackgroundSize.Height = (float)___multiData.backgroundSize_Y_ComputedValue;
                                        break;
                                    case CSSBackgroundSizeType.Cover:
                                    case CSSBackgroundSizeType.Auto:
                                    default:
                                        switch (___multiData.ImageRepeatType)
                                        {
                                            case CSSImageRepeatType.repeat:
                                            case CSSImageRepeatType.unkown:
                                            case CSSImageRepeatType.repeatX:
                                                ___imageCSSBackgroundSize.Height = elementBounds.Height;
                                                break;
                                            case CSSImageRepeatType.repeatY:
                                                if (___imageCSSBackgroundSize.Width == 0)
                                                {
                                                    if (___multiImage != null)
                                                    {
                                                        ___imageCSSBackgroundSize.Width = ___multiImage.Width;
                                                    }
                                                    else
                                                    {
                                                        ___imageCSSBackgroundSize.Width = elementBounds.Width;
                                                    }
                                                }
                                                ___imageCSSBackgroundSize.Height = elementBounds.Height;
                                                break;

                                        }
                                        break;

                                }
                                if (___multiData.backgroundPosition_X_ComputedValue != 0)
                                {
                                    if (___multiData.isBackgroundPosition_X_ValuePerentage == false)
                                    {
                                        ___imageCSSBackgroundPosition.X = (float)___multiData.backgroundPosition_X_ComputedValue;
                                    }
                                    else
                                    {
                                        ___imageCSSBackgroundPosition.X = (float)___multiData.backgroundPosition_X_ComputedValue * elementBounds.Width;
                                    }
                                }
                                if (___multiData.backgroundPosition_Y_ComputedValue != 0)
                                {
                                    if (___multiData.isBackgroundSize_Y_ValuePercentage == false)
                                    {
                                        ___imageCSSBackgroundPosition.Y = (float)___multiData.backgroundPosition_Y_ComputedValue;
                                    }
                                    else
                                    {
                                        ___imageCSSBackgroundPosition.Y = (float)___multiData.backgroundPosition_Y_ComputedValue * elementBounds.Height;
                                    }
                                }
                                switch (___multiData.ImageType)
                                {
                                    case CSSMultipleImageDataType.Gradation:
                                        if (___multiData.Gradation != null)
                                        {
                                            bool __IsColorInformationFound = false;
                                            Color gradColor1 = Color.Empty;
                                            Color gradColor2 = Color.Empty;
                                            if (___multiData.Gradation.ColorList.Count > 0)
                                            {
                                                __IsColorInformationFound = true;
                                                gradColor1 = ((CHtmlWebGradationColor)___multiData.Gradation.ColorList[0]).GradationColor;
                                                if (___multiData.Gradation.ColorList.Count == 1)
                                                {
                                                    gradColor2 = gradColor1;
                                                }
                                                else
                                                {
                                                    gradColor2 = ((CHtmlWebGradationColor)___multiData.Gradation.ColorList[___multiData.Gradation.ColorList.Count - 1]).GradationColor;

                                                }
                                            }
                                            if (__IsColorInformationFound)
                                            {
                                                if (___imageCSSBackgroundSize == System.Drawing.SizeF.Empty)
                                                {
                                                    ___multiBrush = new System.Drawing.Drawing2D.LinearGradientBrush(elementBounds, gradColor1, gradColor2, ___multiData.Gradation.Degree, false);
                                                }
                                                else
                                                {
                                                    ___multiBrush = new System.Drawing.Drawing2D.LinearGradientBrush(new RectangleF(0, 0, ___imageCSSBackgroundSize.Width, ___imageCSSBackgroundSize.Height), gradColor1, gradColor2, ___multiData.Gradation.Degree, false);
                                                }
                                            }

                                        }
                                        break;
                                    case CSSMultipleImageDataType.Image:
                                        {

                                            if (___multiData.backgroundImage_WeakReference != null)
                                            {
                                                ___multiImage = ___multiData.backgroundImage_WeakReference.Target as System.Drawing.Image;
                                            }

                                            if (___multiImage == null && string.IsNullOrEmpty(___multiData.background_image_fullUrl) == false)
                                            {
                                                /*

                                                 */
                                                if (this.___ImageArrivalLatestTime > this.___documentPaintedLatestTime)
                                                {

                                                    if (this.___images.TryGetValue(___multiData.background_image_fullUrl, out ___multiImage) == true)
                                                    {
                                                        if (___multiImage != null)
                                                        {
                                                            ___multiData.backgroundImage_WeakReference = new WeakReference(___multiImage, false);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        break;
                                }

#region Draw Multi

                                switch (___multiData.ImageRepeatType)
                                {
                                    case CSSImageRepeatType.unkown:
                                    case CSSImageRepeatType.repeat:
                                        if (___multiData.ImageType == CSSMultipleImageDataType.Image)
                                        {

                                        }
                                        else
                                        {
                                            if (___multiBrush != null)
                                            {
                                                _grCon.Graphic.FillRectangle(___multiBrush, new Rectangle((int)elementBounds.X - (int)___imageCSSBackgroundPosition.X, (int)elementBounds.Y - (int)___imageCSSBackgroundPosition.Y, (int)___imageCSSBackgroundSize.Width, (int)___imageCSSBackgroundSize.Height));
                                            }
                                        }
                                        break;

                                    case CSSImageRepeatType.norepeat:
                                        if (___multiData.ImageType == CSSMultipleImageDataType.Image)
                                        {
                                            if (___multiImage != null)
                                            {
                                                if (___multiImage.Width == elementBounds.Width && ___multiImage.Height == elementBounds.Height)
                                                {
                                                    _grCon.Graphic.DrawImage(___multiImage, elementBounds, new RectangleF(0 - (int)___imageCSSBackgroundPosition.X, 0 - (int)___imageCSSBackgroundPosition.Y, elementBounds.Width, elementBounds.Height), GraphicsUnit.Pixel);
                                                }
                                                else
                                                {
                                                    _grCon.Graphic.DrawImage(___multiImage, elementBounds, new RectangleF(0 - (int)___imageCSSBackgroundPosition.X, 0 - (int)___imageCSSBackgroundPosition.Y, elementBounds.Width, elementBounds.Height), GraphicsUnit.Pixel);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (___multiBrush != null)
                                            {
                                                _grCon.Graphic.FillRectangle(___multiBrush, new Rectangle((int)elementBounds.X - (int)___imageCSSBackgroundPosition.X, (int)elementBounds.Y - (int)___imageCSSBackgroundPosition.Y, (int)___imageCSSBackgroundSize.Width, (int)___imageCSSBackgroundSize.Height));
                                            }
                                        }
                                        break;
                                    case CSSImageRepeatType.repeatX:
                                        if (___multiData.ImageType == CSSMultipleImageDataType.Image)
                                        {
                                            if (___multiImage != null)
                                            {
                                                if (___multiImage.Height < ___imageCSSBackgroundSize.Height)
                                                {
                                                    ___imageCSSBackgroundSize.Height = ___multiImage.Height;
                                                }

                                            }
                                        }
                                        else
                                        {
                                            if (___multiBrush != null)
                                            {
                                                _grCon.Graphic.FillRectangle(___multiBrush, new Rectangle((int)elementBounds.X - (int)___imageCSSBackgroundPosition.X, (int)elementBounds.Y - (int)___imageCSSBackgroundPosition.Y, (int)___imageCSSBackgroundSize.Width, (int)___imageCSSBackgroundSize.Height));
                                            }
                                        }


                                        break;

                                    case CSSImageRepeatType.repeatY:

                                        if (___multiData.ImageType == CSSMultipleImageDataType.Image)
                                        {
                                            if (___multiImage != null)
                                            {
                                                if (___multiImage.Width < ___imageCSSBackgroundSize.Width)
                                                {
                                                    ___imageCSSBackgroundSize.Width = ___multiImage.Width;
                                                }

                                            }
                                        }
                                        else
                                        {
                                            if (___multiBrush != null)
                                            {
                                                _grCon.Graphic.FillRectangle(___multiBrush, new Rectangle((int)elementBounds.X - (int)___imageCSSBackgroundPosition.X, (int)elementBounds.Y - (int)___imageCSSBackgroundPosition.Y, (int)___imageCSSBackgroundSize.Width, (int)___imageCSSBackgroundSize.Height));
                                            }
                                        }


                                        break;
                                }



#endregion
                                if (___multiBrush != null)
                                {
                                    ___multiBrush.Dispose();
                                    ___multiBrush = null;
                                }

                            }
                        }
                    }

                }
                catch (Exception exMulti)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                    {
                        commonLog.LogEntry("___drawElement drawMultiImageData Exception", exMulti);
                    }
                }
            }
#endregion
#region ImageSection
            if (((___tagElement.___elementTagType == CHtmlElementType.IMG) || (___tagElement.___elementTagType == CHtmlElementType.INPUT)) && ((___tagElement.___IsElementVisible == true && ( string.IsNullOrEmpty(styleSelected.___IMG_FullURL) == false))))
			{
				string imgUrl = null;
                /*
#if DEBUG
                if (styleSelected.___IMG_FullURL.IndexOf("s=140") > -1)
                {

                        commonLog.LogEntry("HERE");
                    
                }
#endif
                */
				bool ___IsImageFromImgTag = false;
                bool ___IsImageFromInputTag = false;
				bool ___IsImageFromBackgroundImage = false;
				if(___IsImageFromBackgroundImage){};
				bool __HasImageDrawn = false;
				if(___tagElement.___elementTagType  == CHtmlElementType.IMG)
				{
					imgUrl = styleSelected.___IMG_FullURL;
					___IsImageFromImgTag = true;
                }
                else if (___tagElement.___elementTagType == CHtmlElementType.INPUT)
                {
                    // Check if the image is 1 frame 
                    if (___tagElement.___ElementImageFrameModeType == 1)
                    {
                        imgUrl = styleSelected.___IMG_FullURL;
                        ___IsImageFromInputTag = true;
                    }
                }

			
				if(string.IsNullOrEmpty(imgUrl) == false)
				{
					Image __img = null;
                    if (___IsImageFromImgTag == true &&  styleSelected.___IMG_ImageWeakReference  != null)
					{
						__img = styleSelected.___IMG_ImageWeakReference.Target as Image;
					}



                    if (__img == null)
                    {

                        if (this.___ImageArrivalLatestTime > this.___documentPaintedLatestTime || this.___documentPaintedCount <= 1)
                        {
                            if (System.Threading.Monitor.TryEnter(this.___ImageRawListLockingObject) == true)
                            {
                                try
                                {
                                    this.___images.TryGetValue(imgUrl, out __img);
                                }
                                finally
                                {
                                    System.Threading.Monitor.Exit(this.___ImageRawListLockingObject);
                                }
                            }
                        }
                        if (__img != null)
                        {
                            if (___IsImageFromImgTag == true)
                            {
                                styleSelected.___IMG_ImageWeakReference = null;
                                styleSelected.___IMG_ImageWeakReference = new System.WeakReference(__img, false);
                            }
                        }
                        //}
                    }

					if(__img != null)
					{
                     
						/*
#if DEBUG
						if(___tagElement.id == "HOGEHOGE")
						{
							commonLog.LogEntry("HERE");
						}
#endif
						*/
                        if (styleSelected.___OpacityPasedValue > 0 && styleSelected.___OpacityPasedValue < 1)
                        {
                            Image __originalImageClone = null;
                            try
                            {
                                if (this.___OpacityChangeFailedUrlSortedList != null && this.___OpacityChangeFailedUrlSortedList.ContainsKey(imgUrl) == false)
                                {
                                    Image __imgOpacity = null;

                                    CHtmlOpacityImageInfo __curOpacityInfo = new CHtmlOpacityImageInfo(imgUrl, (float)styleSelected.___OpacityPasedValue);
                                    if (this.___DocumentOpacityChangedImageStrongReferenceList != null)
                                    {
                                        if (this.___DocumentOpacityChangedImageStrongReferenceList.TryGetValue(__curOpacityInfo, out __imgOpacity) == true)
                                        {
                                            if (__imgOpacity != null)
                                            {
                                                // Release current __img
                                                __img = null;
                                                //  Reset to OpacityChanggedImage
                                                __img = __imgOpacity;

                                                goto OpacityImageSectionDonePhage;
                                            }
                                        }
                                    }
                                    // =================================================================
                                    // [Original Code]
                                    // __originalImageClone = commonHTML.CloneBitmap(__img as Bitmap);
                                    // [New Code]
                                    __originalImageClone = __img.Clone() as Bitmap;




                                    //__imgOpacity = commonHTML.convertAndCreateImageOpacity(__originalImageClone, styleSelected.___OpacityPasedValue, true);
                                    if (__imgOpacity != null)
                                    {
                                        if (this.___DocumentOpacityChangedImageStrongReferenceList != null)
                                        {
                                            this.___DocumentOpacityChangedImageStrongReferenceList[__curOpacityInfo] = __imgOpacity;
                                        }
                                        // Dispose Working ImageClose now. it just working copy
                                        
                                        if (__originalImageClone != null)
                                        {
                                            __originalImageClone.Dispose();
                                            __originalImageClone = null;
                                        }
                                        
                                        // Release current __img reference to null
                                        __img = null;
                                        //  Reset to OpacityChanggedImage to img which is should be null.
                                        __img = __imgOpacity;
                                    }

                                }
                            }
                            catch(Exception exOpacity)
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                                {
                                    commonLog.LogEntry("convertAndCreateImageOpacity Error", exOpacity);
                                }
                                // Dispose Working ImageClose now
                                if (__originalImageClone != null)
                                {
                                    __originalImageClone.Dispose();
                                    __originalImageClone = null;
                                }

                                if (this.___OpacityChangeFailedUrlSortedList != null)
                                {
                                    this.___OpacityChangeFailedUrlSortedList[imgUrl] = 1;
                                }
                                styleSelected.___OpacityPasedValue = 1;
                            }
                        }
                    OpacityImageSectionDonePhage:

						Rectangle imgRectangle = Rectangle.Empty;
						try
						{
                            if (this.___BadImageSizeLookupList != null)
                            {
                                if (this.___BadImageSizeLookupList.ContainsKey(imgUrl) == true)
                                {
                                    goto ListStyleSection;
                                }
                            }
                            Size imgSize = __img.Size;
							imgRectangle = new Rectangle(0,0, imgSize.Width, imgSize.Height);
						}
						catch
						{

                          
							if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
							{
								commonLog.LogEntry("Uhhh,Bad Image Size For {0} Enter as bad image flag...." ,imgUrl);
							}
                            if (this.___BadImageSizeLookupList != null)
                            {
                                this.___BadImageSizeLookupList[imgUrl] = null;
                            }
                            goto ListStyleSection;
						}
							
						bool ___ImageBoundsReadjusted = false;
						bool ___ImageRepeatHasSpecified = false;

                        try
                        {
                            if (___IsImageFromImgTag || ___IsImageFromInputTag)
                            {
                                // ===================================================================
                                // Image Tag
                                // ===================================================================
                                ___ImageRepeatHasSpecified = false;
                                // Check for 'Clip'


                            }
                            if (___IsImageFromImgTag)
                            {
                                if (styleSelected != null)
                                {
                                    if (string.IsNullOrEmpty(styleSelected.___OverFlowFromParent) == true)
                                    {
                                        if (elementBounds.Size == ___TagMinSize)
                                        {
                                            ___tagElement.___offsetWidth = __img.Width;
                                            ___tagElement.___offsetHeight = __img.Height;
                                            //this.CalculateAfterCHtmlBoundsForCHtmlElement(___tagElement);
                                            elementBounds = ___tagElement.GetElementBoundsOnScreen();
                                            ___ImageBoundsReadjusted = true;
                                        }
                                        else if (elementBounds.Width <= 0 || elementBounds.Height <= 0)
                                        {
                                            ___tagElement.___offsetWidth = __img.Width;
                                            ___tagElement.___offsetHeight = __img.Height;
                                            ___tagElement.ResetScreenBounds();
                                            elementBounds = ___tagElement.GetElementBoundsOnScreen();
                                            ___ImageBoundsReadjusted = true;
                                        }
                                    }
                                    else
                                    {
                                        bool __ReadjustRequired = false;
                                        if (elementBounds.Width == 0 || elementBounds.Height == 0)
                                        {
                                            __ReadjustRequired = true;
                                        }
                                        else if (styleSelected != null && (elementBounds.Width > styleSelected.___OverFlowFromParentWidth || elementBounds.Height > styleSelected.___OverFlowFromParentHeight))
                                        {
                                            __ReadjustRequired = true;
                                        }
                                        if (__ReadjustRequired)
                                        {
                                            if (styleSelected.___OverFlowFromParentWidth > 0)
                                            {
                                                elementBounds.Width = styleSelected.___OverFlowFromParentWidth;
                                                if (imgRectangle.Width > styleSelected.___OverFlowFromParentWidth)
                                                {
                                                    imgRectangle.Width = styleSelected.___OverFlowFromParentWidth;

                                                }
                                                imgRectangle.X = (int)(0 - styleSelected.posleft);

                                            }
                                            if (styleSelected.___OverFlowFromParentHeight > 0)
                                            {
                                                elementBounds.Height = styleSelected.___OverFlowFromParentHeight;
                                                if (imgRectangle.Height > styleSelected.___OverFlowFromParentHeight)
                                                {
                                                    imgRectangle.Height = styleSelected.___OverFlowFromParentHeight;

                                                }
                                                imgRectangle.Y = (int)(0 - styleSelected.postop);
                                            }
                                            // parent has overflow set
                                            //commonLog.LogEntry("Drawing {0} {1}",___tagElement, elementBounds);
                                        }
                                    }
                                }
                            }
                            // ===================================================================================			         						// ImageNA image might have drawn, so erase the region
                            // ====================================================================================
                            if (___tagElement.___elementTagType == CHtmlElementType.IMG || ___tagElement.___elementTagType == CHtmlElementType.INPUT)
                            {
                                if (_grCon.ImageNA != null && styleSelected.___IsBackgroundColorSpecified == true)
                                {
                                    SolidBrush eraseBrush = new SolidBrush(styleSelected.___BackgroundSysColor);
                                    _grCon.Graphic.FillRectangle(eraseBrush, elementBounds.X, elementBounds.Y, _grCon.ImageNA.Width, _grCon.ImageNA.Height);

                                    eraseBrush.Dispose();
                                    eraseBrush = null;
                                }
                            }
                            // ======================================================================================


                            if (___ImageRepeatHasSpecified)
                            {


                            }
                            else
                            {

                                if (___IsImageFromImgTag)
                                {
                                    if (this.___NoMoreManagedControlCreation == false && _grCon.IsUIThreadPaint == true && ___IsImageFromImgTag && ___tagElement.___ImageFrameCount > 0 && ___tagElement.___ManagedControlHandle == IntPtr.Zero)
                                    {
          

                                    }
                                    else if (___tagElement.___ManagedControlHandle != IntPtr.Zero)
                                    {
                                        goto DrawImageDone;
                                    }
                                    if (__img != null)
                                    {
                                        Rectangle imgRect = Rectangle.Round(elementBounds);
                                        if (imgRect.Size.Equals(__img.Size) == false)
                                        {
                                            _grCon.Graphic.DrawImage(__img, Rectangle.Round(elementBounds), imgRectangle, System.Drawing.GraphicsUnit.Pixel);
                                        }
                                        else
                                        {
                                            _grCon.Graphic.DrawImageUnscaled(__img, imgRect);
                                        }

                                    }
                                    
                                    goto DrawImageDone;
                                }
                                else
                                {

                                    if (___tagElement.___elementTagType != CHtmlElementType.IMG)
                                    {
                                        if (imgRectangle.Width > ___tagElement.___offsetWidth)
                                        {
                                            imgRectangle.Width = (int)___tagElement.___offsetWidth;
                                        }
                                        if (imgRectangle.Height > ___tagElement.___offsetHeight)
                                        {
                                            imgRectangle.Height = (int)___tagElement.___offsetHeight;
                                        }
                                    }


                                    _grCon.Graphic.DrawImage(__img, Rectangle.Round(elementBounds), imgRectangle, System.Drawing.GraphicsUnit.Pixel);
                                    goto DrawImageDone;

                                }
                            }

                        DrawImageDone:

                            if (___ImageBoundsReadjusted)
                            {
                                if (___tagElement.___elementTagType == CHtmlElementType.IMG)
                                {
                                    LookUpParentElementMinimumBounds(___tagElement, elementBounds);
                                }
                            }




                            __HasImageDrawn = true;
                            //commonLog.LogEntry("Img {0} : {1} : {2} : {3}", imgUrl, elementBounds, ___tagElement.offsetScreenBounds, ___tagElement.BaseControlDisplayRectangle );
                        }
                        catch (Exception ex)
                        {
                            if (__img != null)
                            {
                                __img.Dispose();
                                __img = null;
                            }
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                            {
                                commonLog.LogEntry("DrawTagElement DrawImage. may be invalid image. removing from cache", ex);
                            }
                            try
                            {
                                this.___images[imgUrl] = null;
                            }
                            catch (Exception ex2)
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                {
                                    commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex2));
                                }
                            }

                        }
						//CleanUpBushes:
						//	if(true){;}

					}
					
					

				}
				if(___IsImageFromImgTag == true &&  __HasImageDrawn == false)
				{
                    if (___tagElement.___documentWeakRef  != null)
                    {
                        if (___tagElement.___getDocument().___documentPaintedCount <= commonHTML.NA_IMAGE_PAINT_WAIT_COUNT)
                        {
                            goto ListStyleSection;
                        }
                    }
					if(_grCon.ImageNA  != null)
					{
						if(elementBounds.Height > 16 && elementBounds.Width > 16)
						{													  
							Pen penNABorder = new Pen(Color.Silver);
							if(elementBounds.Height > 16 && elementBounds.Width > 50)
							{
                                CHtmlAttribute altAttr = null;
                                ___tagElement.___attributes.TryGetValue("alt", out altAttr);
                                if (altAttr != null)
                                {
                                    string strAlt = altAttr.value as string;
 
                                    if (strAlt != null && strAlt.Length != 0)
                                    {
                                        RectangleF altTextBounds = elementBounds;
                                        altTextBounds.Offset(10, 0);
                                        altTextBounds.Inflate(-10, 0);
                                        System.Drawing.SolidBrush brushGray = new SolidBrush(Color.Gray);
                                        _grCon.Graphic.DrawString(strAlt, _grCon.Font, brushGray, altTextBounds);
                                        brushGray.Dispose();
                                    }
                                }
								
							}
							_grCon.Graphic.DrawRectangle(penNABorder, (int)elementBounds.X, (int)elementBounds.Y, (int)elementBounds.Width, (int)elementBounds.Height);
							penNABorder.Dispose();
							_grCon.Graphic.DrawImageUnscaled(_grCon.ImageNA, (int)elementBounds.X, (int)elementBounds.Y);
							if(penNABorder != null)
							{
								penNABorder.Dispose();
								penNABorder = null;
							}
						}
					}
				}
			}
#endregion
            ListStyleSection:
#region ListStyleImageSection
			try
			{
				if(styleSelected != null &&  styleSelected.___multipleBackgroundImageDataSet.Count > 0)
				{
                    CHtmlStyleElementMultpleImageData ___imageData = styleSelected.___multipleBackgroundImageDataSet[0];

					Image __imgListItem = null;
                    if (___imageData != null && string.IsNullOrEmpty(___imageData.liststyle_image_fullUrl) == false)
                    {
                        bool IsImageSearchedOutofList = false;
                        if (___imageData.liststyleImage_WeakReference  != null)
                        {
                            __imgListItem = ___imageData.liststyleImage_WeakReference.Target as Image;
                        }
                        if (__imgListItem == null)
                        {
                            if (this.___ImageArrivalLatestTime > this.___documentPaintedLatestTime)
                            {
                                if (this.___images.TryGetValue(___imageData.liststyle_image_fullUrl, out __imgListItem) == true)
                                {
                                    if (__imgListItem != null)
                                    {
                                        IsImageSearchedOutofList = true;
                                    }
                                }
                            }
                        }
                        if (__imgListItem != null)
                        {
                            Size itemSize = __imgListItem.Size;
                            if (itemSize.Width > commonHTML.ListImageSizeMaxWidth)
                            {

                                double _ratioW = commonHTML.ListImageSizeMaxWidth / (float)itemSize.Width;
                                itemSize.Width = (int)commonHTML.ListImageSizeMaxWidth;
                                itemSize.Height = (int)((float)itemSize.Height * _ratioW);
                            }
                            if (itemSize.Height > commonHTML.ListImageSizeMaxWidth)
                            {
                                double _ratioH = commonHTML.ListImageSizeMaxWidth / (float)itemSize.Height;
                                itemSize.Height = (int)commonHTML.ListImageSizeMaxWidth;
                                itemSize.Width = (int)((float)itemSize.Width * _ratioH);
                            }

                            if (itemSize.Width > 0 && itemSize.Height > 0)
                            {
                                // NDP 1.1 Has bug do not use unsalled mode
                                //_grCon.Graphic.DrawImageUnscaled(__imgListItem, (int)elementBounds.X, (int)elementBounds.Y, itemSize.Width, itemSize.Height);
                                _grCon.Graphic.DrawImage(__imgListItem, (int)elementBounds.X, (int)elementBounds.Y, itemSize.Width, itemSize.Height);

                            }
                            if (IsImageSearchedOutofList == true)
                            {
                                if (___imageData.liststyleImage_WeakReference  == null && __imgListItem != null)
                                {
                                    ___imageData.liststyleImage_WeakReference = new WeakReference(__imgListItem, false);
                                }
                            }
                        }
                    }
				}
			}
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
				{
					commonLog.LogEntry("ListStyleImageDraw Exception. ", ex);
				}
			}
#endregion

			if(SkipText == false)
			{
				//_grCon.Graphic.DrawString(___tagElement.innerText, _grCon.Font, Brushes.Black, elementBounds);
			}
			//this.MeasureAndDrawChildSentences(___tagElement, 1000, true,ref _grCon);

				
			if(___tagElement.___IsDrawDone == false)
			{
				___tagElement.___IsDrawDone = true;
			}
		}
	



		
		private void LookUpParentElementMinimumBounds(CHtmlElement ___tagElement, RectangleF ___minimumBounds)
		{
            CHtmlElement ___parentElement = ___tagElement.___parent as CHtmlElement;
			int ___LookUpLimit = 5;
			int ___LookUpCurrent = 0;
			while(___parentElement != null)
			{
				___LookUpCurrent ++;
				if(___parentElement.___offsetWidth < ___minimumBounds.Width)
				{
					___parentElement.___offsetWidth = ___minimumBounds.Width;
				}
				if(___parentElement.___offsetHeight < ___minimumBounds.Height)
				{
					___parentElement.___offsetHeight = ___minimumBounds.Height;
				}
				if(___LookUpCurrent >=  ___LookUpLimit)
				{
					break;
				}
                ___parentElement = ___parentElement.___parent as CHtmlElement;
			}
		}
		/// <summary>
		/// Retrieves the value indicating whether the object currently has focus.
		/// </summary>
		/// <returns></returns>
		
		public bool hasFocus()
		{
			return true;
		}
        public bool hasChildNodes()
        {
            if ((this.___documentElement != null )|| (this.___childNodes  != null && this.___childNodes.Count > 0))
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                {
                    commonLog.LogEntry("{0}.hasChildNodes() returns true. ", this);
                }
                return true;
            }
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
            {
                commonLog.LogEntry("{0}.hasChildNodes() returns false. ", this);
            }
            return false;
        }
		/// <summary>
		/// Recalculates all dynamic properties in the current document.
		/// </summary>
		
		public void recalc()
		{
		}
		/// <summary>
		/// Recalculates all dynamic properties in the current document.
		/// </summary>
		
		public void refresh()
		{
		}
		
		public void reload()
		{
			
		}
        
        public void focus()
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
            {
                commonLog.LogEntry("{0}.focus() is called ", this);
            }
        }
        private void ___ClearFontCacheList()
        {

        }

        
		public bool execCommand(object _ocommand, bool _oUserInterface, object _Param)
		{
			return this.___execCommandInner(_ocommand, _oUserInterface,  _Param);
		}
		
		private bool ___execCommandInner(object _ocommand, bool _oUserInterface, object _Param)
		{
			string sCommand = commonHTML.GetStringValue(_ocommand);
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
			{
                commonLog.LogEntry("document.execCommand('{0}',{1}, {2}) is called. but do nothing...return true...", sCommand, _oUserInterface, _Param);

			}

			return true;
		}
		
		public bool execCommand(object _ocommand, bool _oUserInterface)
		{
			return this.___execCommandInner(_ocommand, _oUserInterface, null);
		}
		
		public bool execCommand(object _ocommand, object _Param)
		{
			return this.___execCommandInner(_ocommand, false, _Param);
		}
		
		public bool execCommand(object _ocommand)
		{
			return this.___execCommandInner(_ocommand, false, null);
		}
		
		public ICHtmlElementInterface activeElement
		{
			get
			{
				if(this.___body !=null)
				{
					return this.___body;
				}
				return null;
			}
		}
		public bool designMode
		{
			get
			{
				return false;
			}
		}
		/// <summary>
		/// Retrieves an autogenerated, unique identifier for the object. 
		/// </summary>
		public string uniqueID
		{
			get
			{
				return this.GetHashCode().ToString();
			}
		}
        public string title
        {
            get {return  commonHTML.___convertNullToEmpty(base.___title); }
        }
		/// <summary>
		/// Retrieves an interface pointer that provides access to the parent object's document interface. 
		/// </summary>
		
		public CHtmlDocument parentDocument
		{
			get
			{
				return null;
			}
		}
		/// <summary>
		/// ownerDocument should returns null for document
		/// SEE Rhino getter comment of document.
		/// </summary>
		
		public CHtmlDocument ownerDocument
		{
			get
			{
				return null;
			}
		}
		
		public string protocol
		{
			get
			{
				if(this.location != null)
				{
					return this.location.protocol;
				}
				return "";
			}
		}
		
		public bool fireEvent(string eventName,object _oEvent)
		{
			return true;
		}
		
		public bool fireEvent(string eventName)
		{
			this.fireEvent(eventName, null);
			return true;
		}
		
		public ICHtmlElementInterface  firstChild
		{
			get{
                if (this.___documentElement != null)
                {
                    return this.___documentElement;
                }
                return this.documentElement as ICHtmlElementInterface;
            }
		}

		
		public ICHtmlElementInterface lastChild
		{
			get{
                if (this.___documentElement != null)
                {
                    return this.___documentElement;
                }
                return this.documentElement as ICHtmlElementInterface;
            }
		}

		private void RoundedRectangle(Graphics grfx, Pen pen, Rectangle rect, Size size)
		{
			grfx.DrawLine(pen, rect.Left  + size.Width / 2, rect.Top,
				rect.Right - size.Width / 2, rect.Top);
			grfx.DrawArc(pen, rect.Right - size.Width, rect.Top,
				size.Width, size.Height, 270, 90);
			grfx.DrawLine(pen, rect.Right, rect.Top + size.Height / 2,
				rect.Right, rect.Bottom - size.Height / 2);
			grfx.DrawArc(pen, rect.Right  - size.Width,
				rect.Bottom - size.Height,
				size.Width, size.Height, 0, 90);
			grfx.DrawLine(pen, rect.Right - size.Width / 2, rect.Bottom,
				rect.Left  + size.Width / 2, rect.Bottom);
			grfx.DrawArc(pen, rect.Left, rect.Bottom - size.Height,
				size.Width, size.Height, 90, 90);
			grfx.DrawLine(pen, rect.Left, rect.Bottom - size.Height / 2,
				rect.Left, rect.Top + size.Height / 2);
			grfx.DrawArc(pen, rect.Left, rect.Top,
				size.Width, size.Height, 180, 90);
		}

		public Rectangle GetElementBoundsOnControlFromPaintRectangle(Rectangle __rectScreenBounds, Rectangle __rectPaintRectangle)
		{

			return new Rectangle(__rectScreenBounds.Left   - __rectPaintRectangle.Left,
				__rectScreenBounds.Top  - __rectPaintRectangle.Top,
				__rectScreenBounds.Width,
				__rectScreenBounds.Height); 
		}

		
		private void CloseAndDisposeAutoResetEvent(ref System.Threading.AutoResetEvent ___evt)
		{
			try
			{
				if(___evt != null)
				{
					if(System.Environment.Version.Major >= 2)
					{
						// 
						try
						{
							___evt.Close();
						}
						catch
						{
							/*
							if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
							{
								commonLog.LogEntry("AutoResetEvent Close Failed");
							}
							*/
						}
						//___evt.GetType().InvokeMember("Dispose", BindingFlags.Public |BindingFlags.InvokeMethod | BindingFlags.Instance, null, ___evt, null);
						try
						{

							System.IDisposable _disposableEvent = ___evt as System.IDisposable;
							_disposableEvent.Dispose();
							
						}
						catch
						{
							if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
							{
								commonLog.LogEntry("Dispose AutoReset Failed");
							}
						}
						//commonLog.LogEntry("CloseAndDisposeAutoResetEvent Dispose success...");
					}
					else
					{
						___evt.Close();
					}
					___evt = null;
				}
			} 
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
				{
					commonLog.LogEntry("CloseAndDisposeAutoResetEvent", ex);
				}
			}
			___evt = null;
		}


		public string contentType
		{
			get{return commonHTML.___convertNullToEmpty(this.___contentType);}
			
		}
		/// <summary>
		/// string backgroundColor, user ___backgroundsysColor for true color
		/// </summary>
		public string backgroundcolor
		{
			set{___BGColorString = value;}
			get{return commonHTML.___convertNullToEmpty(___BGColorString);}
		}
		/// <summary>
		/// string backgroundColor, user ___backgroundsysColor for true color
		/// </summary>
		public string backgroundColor
		{
			set{___BGColorString = value;}
			get{return commonHTML.___convertNullToEmpty(___BGColorString);}
		}
		/// <summary>
		/// string foregroundColor, user ___foregroundsysColor for true color
		/// </summary>
		public string foregroundcolor
		{
			set{___FGColorString = value;}
			get{return commonHTML.___convertNullToEmpty(___FGColorString);}
		}
		/// <summary>
		/// string foregroundColor, user ___foregroundsysColor for true color
		/// </summary>
		public string foregroundColor
		{
			set{___FGColorString = value;}
			get{return commonHTML.___convertNullToEmpty(___FGColorString);}
		}


		public CHtmlLocationBase location
		{
			set
			{
				if(value != null)
				{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
						{
							commonLog.LogEntry("CHtmlDocument.location attempted to set value {0}. abort", value);
						}
					
				}
			}
			get{return base.___locationBase;}
		}

		/// <summary>
		/// Rhino has difficulty use string as name
		/// keep both parameter as object
		/// </summary>
		/// <param name="__Name"></param>
		/// <param name="___function"></param>
		
		public void attachEvent(object __Name, object ___function)
		{
            ___attachEventForElement(commonHTML.GetStringValue(__Name), ___function, (int)CHtmlEventOriginatorType.CHTMLDocument);
		}
		
		/// <summary>
		/// some site may access attachEvent with 3 params keep follow
		/// attachEvent(org.mozilla.javascript.ConsString,function,boolean). (<Code>#24)
		/// </summary>
		/// <param name="__Name"></param>
		/// <param name="___function"></param>
		/// <param name="___boolean"></param>
		
		public void attachEvent(object __Name, object ___function, object __boolean)
		{
            ___attachEventForElement(commonHTML.GetStringValue(__Name), ___function, (int)CHtmlEventOriginatorType.CHTMLDocument);
		}

		
		public void addEventListener(string __Name, object ___function, object boolObj)
		{
            ___attachEventForElement(__Name, ___function, (int)CHtmlEventOriginatorType.CHTMLDocument);
		}
		
		public void addEventListener(string __Name, object ___function, bool ___bool)
		{
            ___attachEventForElement(__Name, ___function, (int)CHtmlEventOriginatorType.CHTMLDocument);
		}
        
        public void addEventListener(string __Name, object ___function)
        {
            ___attachEventForElement(__Name, ___function, (int)CHtmlEventOriginatorType.CHTMLDocument);
        }
		
		internal void ___attachEventForElement(string __evtName, object ___function, int ___documentIndex)
		{
            
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 10)
            {
                if(___documentIndex == (int)CHtmlEventOriginatorType.CHTMLDocument)
                 {
                    commonLog.LogEntry("calling attachEventForDocument({0} ,{1}, {2})", __evtName, ___function, ___documentIndex);
                }
                else{
                    commonLog.LogEntry("calling attachEventForWindow({0} ,{1}, {2})", __evtName, ___function, ___documentIndex);
                }
            
            }
            
			try
			{

				// ONLY STORE DOCUMENT EVNT IN attributes
                switch (___documentIndex)
                {
                    case (int)CHtmlEventOriginatorType.CHTMLDocument:
                        {
                            if (___function == null)
                            {
                                CHtmlAttribute attrRemove  = null;
                                if (this.___attributesForWindow.TryGetValue(__evtName, out attrRemove) == true)
                                {
                                    if (attrRemove != null)
                                    {
                                        attrRemove.value = null;
                                        this.___attributesForWindow.Remove(__evtName);
                                    }
                                }
                                
                                return;
                            }
                            else
                            {
                                CHtmlAttribute newAttr = new CHtmlAttribute();
                                newAttr.name = __evtName;
                                newAttr.value = ___function;
                          
         
                                this.___attributes[__evtName] = newAttr;
                            }
                        }
                        break;
                    case (int)CHtmlEventOriginatorType.CHTMLWindow:
                        {
                            if (___function == null)
                            {
                                CHtmlAttribute attrRemove = null;
                                if (this.___attributesForWindow.TryGetValue(__evtName, out attrRemove) == true)
                                {
                                    if (attrRemove != null)
                                    {
                                        attrRemove.value = null;
                                        this.___attributesForWindow.Remove(__evtName);
                                    }
                                }
                                return;
                            }
                            else
                            {

                                CHtmlAttribute newAttr = new CHtmlAttribute();
                                newAttr.name = __evtName;
                                newAttr.value = ___function;
                             
                               
                                this.___attributesForWindow[__evtName] = newAttr;
                            }
                        }
                        break;
                }
			}
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel > 8)
				{
					commonLog.LogEntry("attachEventForElemet({0} ,{1}, {2}) Error : {3}", __evtName, ___function,  ___documentIndex, ex.Message );
				}
			}
		}
        /// <summary>
        /// Assign HTMLCollection Prototype Weak Reference from Multiversal Window
        /// </summary>
        /// <param name="___targetList"></param>
        internal void ___assignHTMLCollectionPrototype(ref CHtmlCollection ___targetList)
        {
            CHtmlMultiversalWindow ___multiWindow = null;
            if (this.___MultiversalWindow != null)
            {
                ___multiWindow = this.___MultiversalWindow;
                goto AssignPhase;
            }
            if (this.___MultiversalWindowWeakReference != null)
            {
                ___multiWindow = this.___MultiversalWindowWeakReference.Target as CHtmlMultiversalWindow;
                goto AssignPhase;
            }
            AssignPhase:
            if (___multiWindow != null && ___MultiversalWindow.___WindowPrototypeRootNode != null)
            {
                ___targetList.___prototypeWeakReference = ___MultiversalWindow.___WindowPrototypeRootNode.___HTMLCollectionPrototypeWeakReference;
            }
        }
        /// <summary>
        /// Assign NodeList Prototype Weak Reference from Multiversal Window
        /// </summary>
        /// <param name="___targetList"></param>
        internal void ___assignHTMLNodeListPrototype(ref CHtmlCollection ___targetList)
        {
            CHtmlMultiversalWindow ___multiWindow = null;
            if (this.___MultiversalWindow != null)
            {
                ___multiWindow = this.___MultiversalWindow;
                goto AssignPhase;
            }
            if (this.___MultiversalWindowWeakReference != null)
            {
                ___multiWindow = this.___MultiversalWindowWeakReference.Target as CHtmlMultiversalWindow;
                goto AssignPhase;
            }
        AssignPhase:
            if (___multiWindow != null)
            {
                ___targetList.___prototypeWeakReference = ___MultiversalWindow.___WindowPrototypeRootNode.___NodeListPrototypeWeakReference;
            }
        }
		internal object ___getEventForElement(string __Name, int ___documentIndex)
		{
            switch (___documentIndex)
            {
                case (int)CHtmlEventOriginatorType.CHTMLWindow:
                    CHtmlAttribute attrWindow = null;
                    if (this.___attributesForWindow.TryGetValue(__Name, out attrWindow) == true)
                    {
                        if (attrWindow != null)
                        {
                            return attrWindow.value;
                        }
                    }
                    
                    break;
                case (int)CHtmlEventOriginatorType.CHTMLDocument:
                    CHtmlAttribute attrDoc = null;
                    if(this.___attributes.TryGetValue(__Name, out attrDoc) == true)
                    {
                        if (attrDoc != null)
                        {
                            return attrDoc.value;
                        }
                    }
                    break;

            }
            return null;
		}
		internal object ___getEventInfo(string _Name)
		{
			if(this.___attributes == null)
				return null;
			CHtmlAttribute attr =  this.___attributes[_Name] as CHtmlAttribute;
			if(attr != null)
			{
				return attr.value;
			}
			return null;
		}
		
		public void removeEventListener(object __Name, object ___function, object boolObj)
		{
			this.removeEventInner(commonHTML.GetStringValue(__Name), ___function, (int)CHtmlEventOriginatorType.CHTMLDocument);
		}
        
        public void removeEventListener(object __Name, object ___function)
        {
            this.removeEventInner(commonHTML.GetStringValue(__Name), ___function, (int)CHtmlEventOriginatorType.CHTMLDocument);
        }
		
		public bool detachEvent(object __Name, object ___function)
		{
			this.removeEventInner(commonHTML.GetStringValue(__Name), ___function, (int)CHtmlEventOriginatorType.CHTMLDocument);
			return true;
		}
		
		private void removeEventInner(string  __Name, object ___function, int __docIndex)
		{
			if(__Name == null)
				return;
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
            {
                if(__docIndex == (int)CHtmlEventOriginatorType.CHTMLDocument)
                {
                    commonLog.LogEntry("calliing removeEventInnerDocument({0}, {1}, {2})", __Name, ___function, __docIndex);
                }
                else {
                    commonLog.LogEntry("calliing removeEventInnerWindow({0}, {1}, {2})", __Name, ___function, __docIndex);
                }
           
            }

			bool __RemoveSuccess = false;


		}
		/// <summary>
		/// Returns Parent Element Height Explicitly Declared
		/// HTML, Body Height will be ignored
		/// if not found or 0, -1  means not found
		/// </summary>
		/// <param name="__baseElement"></param>
		/// <returns></returns>
		
		internal static double GetExplicitFixedHeightFromParentElement(CHtmlElement __parentElement)
		{
			if(__parentElement == null)
			{
				return -1;
			}
			else
			{
				try
				{
					CHtmlElement __LookUpParent = __parentElement;
					while(__LookUpParent != null)
					{
						if(__LookUpParent.___DOM_Level < 2)
						{
								return -1;
							
						}
						if(__LookUpParent.___elementTagType == CHtmlElementType.BODY || __LookUpParent.___elementTagType == CHtmlElementType.HTML)
						{
							break;
						}
                        if (__LookUpParent.___style.___styleSizeMode == CHtmlSizeModeType.Both || __LookUpParent.___style.___styleSizeMode == CHtmlSizeModeType.Height)
						{
							if(__LookUpParent.___offsetHeight > 1)
							{
								return __LookUpParent.___offsetHeight;
							}

						}
                        __LookUpParent = __LookUpParent.___parent as CHtmlElement;
					}
				}
				catch(Exception ex)
				{
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
					{
						commonLog.LogEntry("GetExplicitFixedHeightFromParentElement", ex);
					}
				}
				return -1;
			}
			
		}
        internal void ___CreateHTMLBuilderText()
        {
            return;
            /*
            if (this.___HtmlBuilderText != null)
            {
                if (this.___HtmlBuilderText.Length == this.HtmlBuilder.Length)
                {
                    return;
                }
            }

            string strTmp = this.HtmlBuilder.ToString();
            this.___HtmlBuilderText = strTmp;
             */
        }
        public void fairdllfair_sleep(object ___interval)
        {
            double val = commonHTML.GetDoubleFromObject(___interval, 0);
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
            {
                commonLog.LogEntry("calling \"debug purpose only API\" document.fairdllfia_.sleep({0})", val);
            }
            System.Threading.Thread.Sleep((int)val);
        }
        public  void ___assignElementParentPrototypeInFullParseMode(CHtmlElement ___element, CHtmlDocument ___currentDoc)
        {
            if (___element != null)
            {
                CHtmlMultiversalWindow ___ownerMutltiversal = ___currentDoc.___getMultiversalWindow();
                if( ___ownerMutltiversal== null)
                {
                    return;

                }
                else
                {
                    ___ownerMutltiversal.___assignElementPrototype(___element);

                }
            }
        }
        private void OnCHtmlCSSRuleMergeQueueCompleted(object sendr, EventArgs e)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
            {
                commonLog.LogEntry("OnCHtmlCSSRuleMergeQueueCompleted is called");
            }

        }
        /// <summary>
        /// Call This method after added
        /// </summary>
        /// <param name="child"></param>

        internal void ___postprocessDynamicElementCHtmlElement(CHtmlElement child, ref int __StackDepth)
		{
            if (child == null)
                return;
            child.___IsDynamicPostPorocessEntered = true;

			if(child.___IsDynamicProcessDone == true || child.___IsDynamicElement == false || child.___isInactivativeElementNodeChild == true)
			{
				return;
			}
            
            if (this.___IsDomModeFullParseMode() == false)
			{
				return;
			}
            DateTime ___postProcessStartTime = DateTime.Now;
				
			CHtmlElement ___parentElement = null;
			try
			{
                if (child.___style == null)
                {
                    child.___style = new CHtmlCSSStyleSheet(CHtmlElementStyleType.Element);
                    
                }
				___parentElement = child.___parent as CHtmlElement;

                child.___setElementCriticalPropertiesChildNode(child);
                if (child.___IsPrototype == false)
                {
                    if (this.___IsDomModeFullParseMode() == true && child.___prototypeWeakReference == null && this.___IsMultiversalDocument == true)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
                        {
                            commonLog.LogEntry("element is added to full parsed mode documnet, but  parent prototype is not assigned... assign now! element: {0}",  child);

                        }
                        ___assignElementParentPrototypeInFullParseMode(child, this);
                    }
                }
				this.AddDyamicElementInfoDocumentPropertyList(child);
                if (commonHTML.IsElemeneITextOrIDraw(child) == true)
                {
                    if (child.___parentWeakRef != null)
                    {
                        if (commonHTML.elementTagTypesNoInnerTextSortedList.ContainsKey(child.___parent.___elementTagType) == true)
                        {
                            // Created Node is may be Style inner string or Script inner string
                            // just skip for now.
                            child.___IsElementVisible = false;
                            child.___IsSystemHidden = true;
                            goto CompleteStage;
                        }
                    }
                   
                }
				if(child.___elementTagType == CHtmlElementType.STYLE && child.___style != null)
				{
					if(child.___IsDynamicElement == true || child.___style.___IsDynamicElement == true)
					{
						if(child.___style.___styleCHtmlCollection != null && child.___style.___styleCHtmlCollection.Count > 0)
						{
							if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
							{
								commonLog.LogEntry("CssText element's style not yet mearged to document {0} items for {1}. Merge it now!", child.___style.___styleCHtmlCollection.Count, child);

							}
							try
							{
									child.___style.___MergeCHtmlStyleElementListIntoDocument(child.___style.___styleCHtmlCollection, this);
								
							}
							catch(Exception ex)
							{
								if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
								{
									commonLog.LogEntry("AfterProcessCHtmlElement Meage CSS Failed for {0} Reason : {1}", child, ex.Message);
								}

							}
							finally
							{
								try
								{
									if(child.___style.___styleCHtmlCollection != null)
									{
										child.___style.___styleCHtmlCollection = null;
									}
								}
								finally
								{
								}
								child.___IsStyleTagElementInnserStyleSheetProcessed = true;

							}
						}
					}
				}


				if(string.IsNullOrEmpty(child.___id) == false)
				{

					
					// --------------------------------------------------------------
					// Note ) ID shoud have been created
					// CHtmlElement.___PreProcessNewlyCreateNode(newchild);
					// ---------------------------------------------------------------
					try
					{
						int childpos = child.___ChildNodeIndex;
						//int childpos = this.___allElementList.IndexOf(child);
						if(childpos == -1)
						{
							if(this.___IsDomModeFullParseMode())
							{	
								this.___registerElementDocumentElementID(child);
							}
						}
						else
						{
							//child.DocumentElementIndex = childpos;
						}
					}
                    catch (Exception ex)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                        }
                    }
				}
			


				if(commonHTML.elementTagTypesNeverSeachStyleSheetSortedList.ContainsKey(child.___elementTagType) == false )
				{
					if(child.___isApplyElemenetStyleSheetCalled == false)
					{
	
						if(this.___IsDomModeFullParseMode())
						{
							this.___cssRuleGroundList.CreateCHtmlStyleElementCandidateListIntoElement(child);
						}
					}
				}
				else
				{
					child.___IsElementVisible = false;
				}
				if(child.___stylesheetsForNextNodeList.Count > 1)
				{
					try
					{
						child.___stylesheetsForNextNodeList.Sort(new CHtmlCSSRuleWorkingKeyStringComparer());
					}
					catch (Exception ex)
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel>= 5)
						{
							commonLog.LogEntry("___stylesheetsForNextNodeList.Sortet", ex);
						}
					}
				}

		
                int childchildNodeCount = child.___childNodes.Count;
                for (int c = 0; c < childchildNodeCount; c++)
                {
                    CHtmlElement childchild = child.___childNodes[c] as CHtmlElement;
                    if (childchild == null)
                        continue;
                    if (childchild.___IsDynamicPostPorocessEntered == true)
                        continue;
                    if (childchild.___parentWeakRef == null || object.ReferenceEquals(childchild.___parentWeakRef.Target , child) == false)
                    {
                        childchild.___parentWeakRef = new WeakReference(child, false);
                    }
                    if (object.ReferenceEquals(childchild, child) == true)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("strange parent is same as child " + childchild.toLogString() + " : " + __StackDepth.ToString());
                        }
                        child.___childNodes.RemoveAt(c);
                        c--;
                        continue;
                    }
                    if (childchild != null && childchild.___IsDynamicElement == true && childchild.___IsDynamicProcessDone == false && commonHTML.IsElemeneITextOrIDrawOrComment(childchild) == false)
                    {

                        if (__StackDepth <= 36)
                        {
                            __StackDepth++;
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("calling child  ___postprocessDynamicElementCHtmlElement() " + childchild.toLogString() + " Hash :" + childchild.GetHashCode() + " : " + __StackDepth.ToString());
                            }
                            if (string.IsNullOrEmpty(childchild.___id) == false)
                            {
                                this.___registerElementDocumentElementID(childchild);
                            }
                            if (string.IsNullOrEmpty(childchild.___id) == false && this.___DocumentElementIDList.ContainsKey(childchild.___id) == false)
                            {
                                if (System.Threading.Monitor.TryEnter(this.___DocumentElementIDLockingObject, 1000) == true)
                                {
                                    try
                                    {
                                        this.___DocumentElementIDList[childchild.___id] = childchild;
                                    }
                                    finally
                                    {
                                        System.Threading.Monitor.Exit(this.___DocumentElementIDLockingObject);
                                    }
                                }
                            }
                            ___postprocessDynamicElementCHtmlElement(childchild, ref __StackDepth);
                            __StackDepth--;
                        }
                        else
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("AfterProcessChtmlElement Child Lookup Stack Overflow");
                            }
                        }
                    }
                }
                if (commonHTML.elementTagTypesDynamicElement1stProcessRequiredSortedList.ContainsKey(child.___elementTagType) == true)
                {
                    CHtmlUri __srcUri = null;
                    string ___srcCharSet = "";
                    string strREL = "";
                    if (child.___hrefBase != null && child.___hrefBase.href.Length != 0)
                    {
                        __srcUri = child.___hrefBase;
                        goto SrcObtained;
                    }
                    else if (child.___attributes.ContainsKey("src") == true)
                    {
                        string __srcOrHref = commonHTML.GetAbsoluteUri(this.___URL, this.___baseUrl, commonHTML.GetElementAttributeInString(child, "src"));
                        child.___srcBase.href = __srcOrHref;
                        __srcUri = child.___srcBase;
                        goto SrcObtained;
                    }
       
                    if (child.___attributes.ContainsKey("charset") == true)
                    {
                        ___srcCharSet = commonHTML.GetElementAttributeInString(child, "charset");
                    }
                    if (___srcCharSet.Length != 0)
                    {
                        ___srcCharSet = commonHTML.FasterToLower(___srcCharSet);
                    }

                    if (child.___attributes.ContainsKey("rel") == true)
                    {
                        strREL = commonHTML.GetElementAttributeInString(child, "rel");
                    }
                    if (strREL.Length != 0)
                    {
                        strREL = commonHTML.FasterToLower(strREL);
                    }


                SrcObtained:
                    if (child.___IsDynamicProcessDone == false && this.___IsDomModeFullParseMode())
                    {
                        switch (child.___elementTagType)
                        {
                            case CHtmlElementType.IMG:
                                if (__srcUri != null && __srcUri.href.Length != 0)
                                {
                                    if (__srcUri.___IsProtocolTypeHTTPorHTTPS() == true)
                                    {

                                        //commonLog.LogEntry("Image DirectDownload : {0}", __fullUrl );
                                        this.___downloadviaQueue(__srcUri.href, "image", null, null, this.___URL, ___srcCharSet, CHtmlThreadPoolQueueObjectType.UrlImage, null, child, 0, CHtmlUrlSourceType.Src, false);
                                        child.___style.___IMG_FullURL = __srcUri.href;
                                    }
                                    else if (__srcUri.ProtocolType == CHtmlUriProtocolType.data)
                                    {
                                        try
                                        {
                                            Image imageFrom64 = commonHTML.ConvertIBase64ImageToImage(__srcUri.href) as Image;
                                            if (imageFrom64 != null)
                                            {
                                                if (System.Threading.Monitor.TryEnter(this.___ImageRawListLockingObject, 100))
                                                {
                                                    try
                                                    {
                                                        this.___images[__srcUri.href] = imageFrom64;
                                                        child.___style.___IMG_FullURL = string.Copy(__srcUri.href);
                                                    }
                                                    finally
                                                    {
                                                        System.Threading.Monitor.Exit(this.___ImageRawListLockingObject);
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        {
                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                            {
                                                commonLog.LogEntry("Base64ImageConversion Failed : " + __srcUri.href);
                                            }
                                        }

                                    }

                                    goto SwithDone;

                                }
                                else
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                    {
                                        commonLog.LogEntry("Stanange Dynamic <img> has empty src");
                                    }
                                }
                                break;
                            case CHtmlElementType.SCRIPT:
                                child.___IsElementVisible = false;
                                commonHTML.checkHTMLScriptElementAsycAndDefer(child);
                                if (child.___elementTagType == CHtmlElementType.SCRIPT && __srcUri != null && __srcUri.href.Length != 0 && __srcUri.___IsProtocolTypeHTTPorHTTPS() == true)
                                {
                                    string __fullUrl = __srcUri.href;
                                    if (this.___PageRequestedUrlList.ContainsKey(__srcUri.href) == false)
                                    {
                                        //commonLog.LogEntry("Script DirectDownload : {0}", __fullUrl );
                                        try
                                        {
                                            CHtmlDownloadInfomation downInfo = new CHtmlDownloadInfomation();

                                            downInfo.Stop();
                                            downInfo.Action = "UrlScript";
                                            if (System.Threading.Monitor.TryEnter(this.___PageRequestedUrlList_LockingObject, 1000))
                                            {
                                                this.___PageRequestedUrlList[__srcUri.href] = downInfo;
                                                System.Threading.Monitor.Exit(this.___PageRequestedUrlList_LockingObject);
                                            }
                                            if (child.type.Length != 0 && commonHTML.isTemplateScriptBlock(child.type))
                                            {
                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                {
                                                    commonLog.LogEntry("TODO: AfterProcessCHTMLElement is about to downloading template scripts!", child);
                                                }
                                            }
                                            string ___elementCharSet = null;
                                            CHtmlAttribute ___attrCharset = null;
                                            child.___attributes.TryGetValue("charset", out ___attrCharset);
                                            if (___attrCharset != null)
                                            {
                                                ___elementCharSet = commonHTML.GetStringValue(___attrCharset.value);
                                            }
                                            if (commonHTML.isDynamicHtmlScriptElementWillBeExecutedSyncForNonDeferAttribute == false)
                                            {
                                                if (child.___async == true || child.___defer == true)
                                                {
                                                    this.___downloadviaQueue(__srcUri.___Href, "script", null, null, this.___URL, ___elementCharSet, CHtmlThreadPoolQueueObjectType.UrlScript, null, child, 0, CHtmlUrlSourceType.Unknown, true);
                                                }
                                                else
                                                {
                                                    this.___downloaddirectly(__srcUri.___Href , "script", null, null, this.___URL, ___elementCharSet, CHtmlThreadPoolQueueObjectType.UrlScript, this.___URL, child, 0, CHtmlUrlSourceType.Unknown, true);
                                                }
                                            }else
                                            {
                                                if (child.___defer == true && child.___async == false)
                                                {
                                                    this.___downloadviaQueue(__srcUri.___Href, "script", null, null, this.___URL, ___elementCharSet, CHtmlThreadPoolQueueObjectType.UrlScript, null, child, 0, CHtmlUrlSourceType.Unknown, true);
                                                }
                                                else
                                                {
                                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                                                    {
                                                        commonLog.LogEntry("___postprocessDynamicElementCHtmlElement() will execute  {0} element in sync : ", child.toLogString(), __srcUri.___Href);
                                                    }
                                                    this.___downloaddirectly(__srcUri.___Href, "script", null, null, this.___URL, ___elementCharSet, CHtmlThreadPoolQueueObjectType.UrlScript, this.___URL, child, 0, CHtmlUrlSourceType.Unknown, true);
                                                }

                                            }
                                        }

                                        catch (Exception ex)
                                        {
                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                            {
                                                commonLog.LogEntry("AfterProcessCHTMLElement ScriptBlock", ex);
                                            }
                                        }

                                    }
                                    else
                                    {
                                        child.X_DOM_ProcessorAdd("SCRIPT seems has processed. skip");
                                    }
                                    break;
                                }
                                else
                                {

                                    System.Text.StringBuilder sbScript = new System.Text.StringBuilder(child.innerText);
                                    string ___scriptType = commonHTML.GetElementScriptLanguageLowerName(child);
                                    if (sbScript.Length > 0)
                                    {

                    
                                    }
                                }
                                break;

                            case CHtmlElementType.LINK:
                                child.___IsElementVisible = false;

                                if (child.___elementTagType == CHtmlElementType.LINK && true && __srcUri != null && __srcUri.href.Length != 0 && __srcUri.___IsProtocolTypeHTTPorHTTPS() == true && (string.Equals(strREL, "stylesheet",StringComparison.OrdinalIgnoreCase) ==  true || (string.IsNullOrEmpty(strREL) == true && commonHTML.IsURLLooksLikeCSSUrl(__srcUri.___Href) == true)))
                                {
                                    string ___mediaValue = "";
                                    if (child.___attributes.ContainsKey("media") == true)
                                    {
                                        // ===============================================================================
                                        child.___MediaQueryNode = new CHtmlMediaQueryNode(CHtmlMediaQueryNodeType.RootNode);
                                        try
                                        {
                                            child.___MediaQueryNode.OwnerElementType = MediaQueryOwnerElementType.LinkElement;
                                            child.___MediaQueryNode.Text = commonHTML.GetElementAttributeInString(child, "media");
                                            ___mediaValue = string.Copy(child.___MediaQueryNode.Text);

                                            if (child.___MediaQueryNode.Result == CHtmlMediaQueryResult.Fail)
                                            {
                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                                {
                                                    commonLog.LogEntry("[MediaQuery] {0} Dynamic Link Element download will be skip MediaQueries", child.___MediaQueryNode.Text);
                                                }
                                                goto SwithDone;
                                            }
                                            else
                                            {
                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                                {
                                                    commonLog.LogEntry("[MediaQuery] {0} Dynamic Link Element will be download", child.___MediaQueryNode.Text);
                                                }


                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                            {
                                                commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                            }
                                        }
                                        // ===============================================================================
                                    }
                                    if (this.___IsHtmlBodyTagPassed == false)
                                    {
                                        this.___downloadviaQueue(__srcUri.href, "stylesheet", ___mediaValue, "stylsheet", this.___URL, this.___charset, CHtmlThreadPoolQueueObjectType.UrlStyleSheet, this.___URL, child, 0, CHtmlUrlSourceType.Unknown, false);
                                        bool __IsEnqueued = false;
                                        this.___setEnqueuedCounter(__IsEnqueued, CHtmlThreadPoolQueueObjectType.UrlStyleSheet);
                                    }
                                    else
                                    {
                                        this.___downloaddirectly(__srcUri.href, "styesheet", ___mediaValue, "", this.___URL, this.___charset, CHtmlThreadPoolQueueObjectType.UrlStyleSheet, this.___URL, child, 0, CHtmlUrlSourceType.Unknown, false);
                                    }
                                    goto SwithDone;
                                }
                                break;
                            case CHtmlElementType.STYLE:
                                if (child.___IsStyleTagElementInnserStyleSheetProcessed == false)
                                {
                                    // ===========================================================
                                    // [Note]
                                    // Dynamically Created Style may not added document.styleSheets Collection yet.
                                    // This is fix for modernizer 2.0.6.js
                                    // ===========================================================
                                    if (this.___styleSheets != null && this.___styleSheets.___containsObjectHash(child.GetHashCode()) == false)
                                    {
                                        if (child.___sheet == null)
                                        {
                                          CHtmlCSSStyleSheet.___createCHtmlCSSStylesheetForElement(child);
                                        }
                                        this.___styleSheets.Add(child.___sheet);
                                    }
                                    string strStyle = child.innerText;
                                    if (this.___IsDomModeFullParseMode())
                                    {
                                        if (strStyle.Length != 0)
                                        {
                                            // ===============================================================================
                                            if (child.___attributes.ContainsKey("media") == true)
                                            {
                                                child.___MediaQueryNode.OwnerElementType = MediaQueryOwnerElementType.StyleElement;
                                                child.___MediaQueryNode = new CHtmlMediaQueryNode(CHtmlMediaQueryNodeType.RootNode);
                                                try
                                                {
                                                    child.___MediaQueryNode.Text = commonHTML.GetElementAttributeInString(child, "media");
                                                    if (child.___MediaQueryNode.Result == CHtmlMediaQueryResult.Fail)
                                                    {
                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                                        {
                                                            commonLog.LogEntry("[MediaQuery] {0} Dynamic Style Element download will be skip MediaQueries", child.___MediaQueryNode.Text);
                                                        }
                                                        goto SwithDone;
                                                    }
                                                    else
                                                    {
                                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                                                        {
                                                            commonLog.LogEntry("[MediaQuery] {0} Dynamic Style Element will be processed", child.___MediaQueryNode.Text);
                                                        }

                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                    {
                                                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                                    }
                                                }
                                                // ===============================================================================
                                            }
                                            CHtmlCollection ___ruleList = null;
                                            if (child.___sheet != null && child.___sheet.___cssRules != null)
                                            {
                                                ___ruleList = child.___sheet.___cssRules;
                                            }
                                            CHtmlCollection arStyle = commonHTML.CreateCSSRuleCollectionFromStyleSheetString(strStyle, this.___URL, child.media, child.___MediaQueryNode, ___ruleList, this.___StyleQueue, this.___cssRuleBlackList, child);
                                            int ___mergedCount = 0;
                                            int arStyleCount = 0;
                                            if(arStyle != null)
                                            {
                                            arStyleCount = arStyle.Count;
                                            }
                                            if (arStyleCount > 0)
                                            {
                                                for (int i = 0; i < arStyleCount; i++)
                                                {
                                                    CHtmlCSSRule sPart = arStyle[i] as CHtmlCSSRule;
                                                    if (sPart != null)
                                                    {
                                                        try
                                                        {
                                                            this.___mergeCHtmlStyleElementIntoDocumentStyleSheet(sPart);
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                            {
                                                                commonLog.LogEntry("AfterProcessCHTMLElement Style Merge", ex);
                                                            }
                                                        }
                                                    }
                                                    ___mergedCount++;
                                                }
                                            }
                                            if (arStyle != null)
                                            {
                                                arStyle.Clear();
                                                arStyle = null;
                                            }

                                            if (___mergedCount > 0)
                                            {
                                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                                {
                                                    commonLog.LogEntry("{0} dynamic style Len : {1} Style Mearged : {2}", child, strStyle.Length, ___mergedCount);
                                                }
                                            }

                                        }
                                    }
                                    child.___IsStyleTagElementInnserStyleSheetProcessed = true;
                                }
                                break;
                            case CHtmlElementType.OBJECT:
                            case CHtmlElementType.EMBED:
                            case CHtmlElementType.INPUT:
                                // do later
                                break;
                            case CHtmlElementType.BASE:
                                break;
                            default:
                                break;
                        }
                    SwithDone:
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            if (child.innerHTML.Length != 0)
                            {

                                commonLog.LogEntry("{0} contains innerHTML \"{0}\"", child, child.innerHTML);

                            }
                        }

                    }
                }
			}
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
				{
					commonLog.LogEntry("AfterProcessCHtmlElement", ex);
				}
			}
        
		
			try
			{
                bool IsNoScriptElementChild = false;
                if (___parentElement != null)
                {
                    if (___parentElement.___elementTagType == CHtmlElementType.NOSCRIPT)
                    {
                        IsNoScriptElementChild = true;
                    }
                }
                
				if(commonHTML.elementTagTypesNoStylesheetLookupSortedList.ContainsKey(child.___elementTagType) == false && IsNoScriptElementChild == false)
				{
                    child.___IsNoScriptBlock = IsNoScriptElementChild;
                    child.___IsElementVisible = true;
					if(child.___isApplyElemenetStyleSheetCalled == false)
					{
                        if (commonHTML.elementTagTypesNeverSeachStyleSheetSortedList.ContainsKey(child.___elementTagType) == false)
                        {
                            this.___applyElemenetStyleSheets(child, false, false, false);
                        }
                        else
                        {
                            child.___isApplyElemenetStyleSheetCalled = true;
                        }
					}
				}
				else
				{
                    if (commonHTML.IsElemeneITextOrIDrawOrComment(child) == false && child.___elementTagType != CHtmlElementType._ELEMENT_AFTER && child.___elementTagType != CHtmlElementType._ELEMENT_BEFORE)
                    {
                        child.___IsNoScriptBlock = IsNoScriptElementChild;
                        child.___IsElementVisible = false;
                    }
                    else
                    {
                        child.___IsElementVisible = true;
                    }
				}
			} 
			catch (Exception ex1)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
				{
					commonLog.LogEntry("AfterProcessCHtmlElement ___applyElemenetStyleSheets", ex1);
				}

			}
			try
			{
				if(child.___IsElementVisible == true)
				{
					try
					{
						// bool ___IsGraphicsDisposeRequired = false;
						/*
						if(this.window != null && this.___HtmlGraphics == null)
						{
							___IsGraphicsDisposeRequired = true;
							this.___HtmlGraphics = this.CreateGraphicContainer();
							this.___HtmlGraphics.IsUIThreadPaint = false;
						}
						*/
                        int __childCount = child.___childNodes.Count;
						for(int i = 0; i < __childCount; i ++)
						{
							CHtmlElement element = child.___childNodes[i] as CHtmlElement;
							if(commonHTML.IsElemeneITextOrIDraw(element) == true && element.___drawingObjectList.Count == 0)
							{
								if(element.___isCalculateElementBoundsCalled == false)
								{
									this.___calculateTextElementBounds(element);
								}
							}
						}

                        switch (child.___elementTagType)
                        {
                            case CHtmlElementType.COMMENT:
                                break;
                            case CHtmlElementType._ITEXT:
                            case CHtmlElementType._IDRAW:
                                this.___calculateTextElementBounds(child);
                                break;
                            default:
                                if (commonHTML.elementTagTypesNeverSeachStyleSheetSortedList.ContainsKey(child.___elementTagType) == false)
                                {
                                    ___calculateElementBounds(child);
                                }
                                else
                                {
                                    child.___isCalculateElementBoundsCalled = true;
                                }
                                break;
                        }

						/*
						if(this.___HtmlGraphics != null && ___IsGraphicsDisposeRequired == true)
						{
							this.___HtmlGraphics.Dispose(true);
							this.___HtmlGraphics = null;
						}
						*/
					} 
					catch(Exception ex)
					{
						if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
						{
							commonLog.LogEntry("AfterProcessCHtmlElement ___calculateElementBounds", ex);
						}
					}

					switch(child.___elementTagType)
					{
						case CHtmlElementType.IFRAME:
						case CHtmlElementType.FRAME:
                            if (child.___srcBase != null)
                            {
                                if (string.Equals(child.___srcBase.href, child.___locationBase.href, StringComparison.Ordinal) == false)
                                {
                                    child.___locationBase.___CopyValuesFromCHtmlUri(child.___srcBase);
                                }
                            }
                            if (this.___IsMultiversalDocument == true)
                            {

                                // Dynamically create Element is Multiveral iframe or frame
                                if (child.___iframeMultiversalWindow != null)
                                {
                                    if (child.___iframeMultiversalWindow.___parentMultiversalWindowWeakReference != null)
                                    {
                                        child.___iframeMultiversalWindow.___parentMultiversalWindowWeakReference = null;
                                    }
                                    if (this.___MultiversalWindow != null)
                                    {
                                        child.___iframeMultiversalWindow.___resetParentMultiversalWindow(this.___MultiversalWindow);
                                    }
                                }
                                else
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                    {
                                        commonLog.LogEntry("Strange {0} does not have multiversal iframe window. create now", child);

                                    }
                                    child.___iframeMultiversalWindow = commonHTML.createIFrameMultiversalWindow(this.___MultiversalWindow, this, child);
                                }
                            }
							break;
						case CHtmlElementType.OBJECT:
						case CHtmlElementType.EMBED:
						case CHtmlElementType.INPUT:
							try
							{
								if(child.___elementTagType == CHtmlElementType.INPUT)
								{
                                 
									if(string.Equals(child.type, "hidden", StringComparison.OrdinalIgnoreCase) == true)
									{
										if(child.___IsElementVisible == true)
										{
											child.___IsElementVisible = false;
										}
										goto CompleteBlock;
									}
								}
								if(this.___IsDomModeFullParseMode() == true && this.___ManagedControlPendingElementList != null && this.___ManagedControlPendingElementList.ContainsKey(child.___elementOID) == false)
								{
									if(child.___elementTagType == CHtmlElementType.EMBED)
									{
										if(___parentElement != null)
										{
											if(___parentElement.___elementTagType == CHtmlElementType.OBJECT)
											{
												child.___IsElementVisible = false;
												goto CompleteBlock;
											}
										}
									}


                                    this.___ManagedControlPendingElementList[child.___elementOID] = child;


								}
								if(this.___IsCreateManagedControlRootCompleted == true && this.___IsDomModeFullParseMode() == true && this.___documentDomType == CHtmlDomModeType.HTMLDOM)
								{
									if(child.___ManagedControlHandle == IntPtr.Zero && this.___ManagedControlHandle != IntPtr.Zero)
									{
										try
										{
											bool ___SizeReset = false;
											if(child.___IsElementVisible == true && ___parentElement != null)
											{
												if(child.___offsetWidth == 0)
												{
													child.___offsetWidth = ___parentElement.___availWidth;
													___SizeReset = true;
												}
												if(child.___offsetHeight == 0)
												{
													child.___offsetHeight = ___parentElement.___availHeight;
													___SizeReset = true;
												}
												if(___SizeReset)
												{
													if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
													{
														commonLog.LogEntry("{0} has reise reset {1}", child, child.offsetBounds);
													}
												}
											}
										}
                                        catch (Exception ex)
                                        {
                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                            {
                                                commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                            }
                                        }
						
									}
								}
							}
                            catch (Exception ex)
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                                {
                                    commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                                }
                            }
							break;
					}
				}
			CompleteBlock:
                if (this.___IsDomModeFullParseMode() == true)
                {
                    if (this.___IsOnLoadWindowDocumentCompletedCalled == true)
                    {
                        if (child.___IsNoScriptBlock == false)
                        {
                            if (child.___ElementLoadFunctionWeakReference != null)
                            {

                            }
                            if (child.___ElementReadyStateChangeFunctionWeakReference != null)
                            {
                            }
                            if (child.___elementTagType == CHtmlElementType.VIDEO || child.___elementTagType == CHtmlElementType.AUDIO)
                            {
                                if (child.___ElementCanPlayThroughFunctionWeakReference != null)
                                {
                                    this.___PerformDocumentOrWindowEventFunction(child.___ElementCanPlayThroughFunctionWeakReference.Target, "canplaythrough", child, this.___event, false, child.toLogString() + " canplaythrough");
                                }
                            }
                        }
                    }
                }
              

			}
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
				{
					commonLog.LogEntry("After ProcessCHTMLElement Final Stage : " + child.ToString(), ex);
				}
			}


        CompleteStage:
            TimeSpan tpPostProcessTime = DateTime.Now.Subtract(___postProcessStartTime);
            if (tpPostProcessTime.TotalMilliseconds >= 10000)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("___postprocessDynamicElement({0}) took too long {1} ms...", child, tpPostProcessTime.TotalMilliseconds);
                }
            }
            child.___isCalculateElementBoundsCalled = true;
            child.___IsDynamicProcessDone = true;
		}
        public override string ToString()
        {
            return "[object Document]";
        }
		public new string toLogString()
		{
			int ___allcount = 0;

            string readyStateTemp = this.___readyStateType.ToString();
			if(readyStateTemp == null)
			{
				readyStateTemp = "Disposed";
			}
			return string.Format("CHtmlDocument (display: \'{0}\' state: {1} nodes: {2} mode: {3})", this.___UrlShortName, readyStateTemp , ___allcount, this.___documentDomType);
		}
        internal void ___ResetDocumentTimerInterval(int __StartupMilliseconds, int ___interval)
        {
            if (this.___DocumentTimerThread != null)
            {
               
                try
                {
                        if (___interval < 25)
                        {
                            ___interval = 25;
                        }
                        this.___DocumentTimerThread.Change(__StartupMilliseconds, ___interval);
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 30)
                        {
                            commonLog.LogEntry("Reset DocumentTimerInterval({0}, {1})", __StartupMilliseconds, ___interval);
                        }
                } catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
                    {
                        commonLog.LogEntry("ChangeDocumentTimerInterval Error : {0}. but it is ok.", ex.Message);
                    }
               
                }

            }
        }
		internal void ___InitializeDocumentTimer(int __StartupMilliseconds, int ___interval)
		{
            object ___DocumentTimerLockingObject = new object();
            bool __Entered = false;
            if (this == null || this.___Disposing == true || ___DisableDocumentTimer == true || this.___IsThreadAbortOccurred)
			{
				return;
			}
            try
            {
                if (__StartupMilliseconds <= 50)
                {
                    __StartupMilliseconds = 100;
                }

                if (this.___readyStateType != CHtmlReadytStateType.complete)
                {
                    /*
     
                    if (___interval < commonHTML.TIMER_INTERVAL_BEFORE_COMPLETE)
                    {
                        ___interval = commonHTML.TIMER_INTERVAL_BEFORE_COMPLETE;
                    }
                    if (__StartupMilliseconds != commonHTML.TIMER_STARTUP_BEFORE_COMPLETE)
                    {
                        __StartupMilliseconds = commonHTML.TIMER_STARTUP_BEFORE_COMPLETE;
                    }
                     * */
                }
                else
                {
                    if (___interval < 50)
                    {
                        ___interval = 50;
                    }
                }
               
                if (System.Threading.Monitor.TryEnter(___DocumentTimerLockingObject, 0) == true)
                {
                    __Entered = true;

                    try
                    {
                        if (this.___DocumentTimerThread != null)
                        {


                            goto DoneBlock;

                        }
                        if (this.___IsDocumentTimerTooksTooLong == true)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                            {
                                commonLog.LogEntry("IsDocumentTimerTooksTooLong is TRUE. No timer on this document");
                            }
                            goto DoneBlock;
                        }
                        this.___IsDocumentTimerThreadRunning = true;
                        System.Threading.TimerCallback tcTimerElapsed = new TimerCallback(DocumentTimerThread_Elapsed);
                        if (this.___readyStateType == CHtmlReadytStateType.complete)
                        {
                            this.___DocumentTimerThread = new System.Threading.Timer(tcTimerElapsed, null, __StartupMilliseconds, ___interval);
                            ___IsDocumentTimerStatedBeforeDocumentComelete = false;
                            this.___DocumentTimerOriginalInterval = ___interval;
                            
                        }
                        else
                        {
                            if (commonHTML.AllowTimerStartupBeforeComplete)
                            {
                                this.___DocumentTimerThread = new System.Threading.Timer(tcTimerElapsed, null, commonHTML.TIMER_STARTUP_BEFORE_COMPLETE, commonHTML.TIMER_INTERVAL_BEFORE_COMPLETE);
                                ___IsDocumentTimerStatedBeforeDocumentComelete = true;
                                this.___DocumentTimerOriginalInterval = ___interval;
                            }
                        }


                    }
                    finally
                    {

                        
                    }
                DoneBlock:
                    if (false) { ;}
                }
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 7)
                {
                    commonLog.LogEntry("InitializeDocumentTimer()", ex);
                }

            }
            finally
            {
                if (__Entered)
                {
                    System.Threading.Monitor.Exit(___DocumentTimerLockingObject);
                }

            }
		}
        internal void ___DrawCanvasCreatedElements()
        {
            if (this.___CanvasContextElement2DDrawingPendingList != null && this.___CanvasContextElement2DDrawingPendingList.Count > 0)
            {
                Graphics grc = null;
                try
                {
                  
                }
                finally
                {
                    if (this.___CanvasContextElement2DDrawingPendingList != null)
                    {
                        this.___CanvasContextElement2DDrawingPendingList.Clear();
                    }
                    if (grc != null)
                    {
                        grc.Dispose();
                        grc = null;
                    }
                    this.___IsDocumentPaintProgress = false;
                }
            }
        }
        private object ___DocumentTimerLockingObject =new object();
        private bool ___IsDocumentTimerLocking = false;
        internal void ___processTimerScriptOrFunction(object objFunction)
        {
            if (this.___IsMultiversalDocument == true)
            {
                if (this.___MultiversalWindow != null)
                {
                    IMultiversalScriptProcessor ___processor = this.___MultiversalWindow.getMultiversalScriptProcessorByScriptType("");
                    if (___processor != null)
                    {
                        if (commonHTML.IsObjectStringType(objFunction) == true)
                        {
                            ___processor.execute(commonHTML.GetStringValue(objFunction));
                        }

                    }
                }
                else
                {
                    throw new Exception("Multiversal does not exists.");
                }
            }
   
            
            // DO NOT Catch Exception on this function!
        }
		
		private void DocumentTimerThread_Elapsed(object _o)
		{
            if (___IsDocumentTimerLocking)
            {

                return;
            }
			int ValidScriptCount = 0;
			DateTime ___dtStart = DateTime.Now;
            
            bool ___IsEntered = false;
            if (System.Threading.Monitor.TryEnter(___DocumentTimerLockingObject, 0))
            {
                
                ___IsDocumentTimerLocking = true;
                ___IsEntered = true;
                try
                {
                  

                    ValidScriptCount = 0;
                    ___dtStart = DateTime.Now;
                    if (this.___DocumentTimerThread == null)
                    {
                        goto TimerProcessDone;
                    }
                    //this.___documentTimerTickCount++;
                    try
                    {
                        if (this == null || this.___Disposing == true || this.___IsDocumentTimerTooksTooLong == true || this.___DisableDocumentTimer == true || this.___IsThreadAbortOccurred == true)
                        {
                            try
                            {
                                if (this.___DocumentTimerThread != null)
                                {
                                    try
                                    {
                                        this.___DocumentTimerThread.Dispose();
                                    }
                                    catch { }
                                    finally
                                    {
                                        this.___IsDocumentTimerThreadRunning = false;
                                        this.___DocumentTimerThread = null;
                                        this.___DocumentTimerMimimunIntervalOrTimeout = int.MaxValue;
                                    }
                                }
                            }
                            catch { }
                            goto TimerProcessDone;

                        }
                        // it may be enqueued scripts on queue which remains unprocessed status 
                        // only runs if document.readystate = complete
                        if (this.___readyStateType == CHtmlReadytStateType.complete && this.___IsOnLoadWindowDocumentCompletedCalled == true)
                        {
                            if (this.___DeferredEnqueuedScriptCount > 0)
                            {
                                try
                                {

                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                                    {
                                        commonLog.LogEntry("DocumentTimer has found Queued Script Process Now...");
                                    }
                                    //this.___processDocumentEnqueuedScripts(CHtmlEnqeueStatus.ProcessQueue);
                                }
                                catch { }
                            }
                        }
                        if (this.___DocumentTimerBrandNewIDList != null && this.___DocumentTimerBrandNewIDList.Count > 0)
                        {
                            this.___DocumentTimerBrandNewIDList.Clear();
                        }
                        
                        // [Do not use property value always use .Count
                        //int __CurrentEventCount =  this.___DocumentTimerLiveList.Count;
                        // 
                        for (int i = this.___DocumentTimerLiveList.Count - 1; i >= 0; i--)
                        {
                            if (this == null || this.___Disposing == true || this.___IsThreadAbortOccurred)
                            {
                                try
                                {
                                    if (this.___DocumentTimerThread != null)
                                    {
                                        this.___DocumentTimerThread = null;
                                    }
                                }
                                catch { }
                                this.___IsDocumentTimerThreadRunning = false;
                                this.___DocumentTimerMimimunIntervalOrTimeout = int.MaxValue;
                                goto TimerProcessDone;
                            }
                            int ___timerkey = this.___DocumentTimerLiveList.Keys[i];
                            if(this.___DocumentTimerBrandNewIDList.ContainsKey(___timerkey))
                            {
                                // It is new created event list. do not execute one.
                                continue;
                            }
                            CHtmlEventInfo timerEvt = this.___DocumentTimerLiveList[___timerkey] as CHtmlEventInfo;
                            bool ___IsInterval = false;
                            bool ___IsTimeout = false;
                            bool ___IsEventHasBeenFromLiveList = false;
                            if (timerEvt == null || timerEvt.TimerType == -1)
                                continue;
                            else
                            {
                                if (timerEvt.TimerType  == 10 )
                                {
                                    if (timerEvt.IsCompleted == false)
                                    {
                                        ___IsTimeout = true;
                                        ValidScriptCount++;
                                   }
                                }
                                else if (timerEvt.TimerType == 1)
                                {
                                    if (timerEvt.IsCompleted == false)
                                    {
                                        ___IsInterval = true;
                                        ValidScriptCount++;
                                    }
                                }
                                else
                                {
                                    continue;
                                }
                            }
                            if (___IsTimeout == true && timerEvt.IsCompleted == false)
                            {
                                TimeSpan tpSpan = DateTime.Now.Subtract(timerEvt.LastCallTime);
                                if (Math.Abs(tpSpan.TotalMilliseconds) > timerEvt.Timeout)
                                {
                                    CHtmlScriptResultElement scriptResult = null;
                                    if (commonHTML.MAX_EVENT_RECORD_COUNT < this.___scriptEventList.Count)
                                    {

                                    }
                                    else
                                    {


                                        scriptResult = new CHtmlScriptResultElement();
                                        scriptResult.href = this.___URL;
                                        scriptResult.text =  timerEvt.Name + " " +  timerEvt.ToString() + " " + timerEvt.GetHashCode().ToString();
                                    }
                                    object objFunction = timerEvt.Function;
                                    try
                                    {
                                        this.___processTimerScriptOrFunction(objFunction);
                                        if (scriptResult != null)
                                        {
                                            scriptResult.result = 200;
                                        }
                                                                    

                                    }
                                    catch (Exception ex)
                                    {
                                        if (scriptResult != null)
                                        {
                                            scriptResult.result = 500;

                                            scriptResult.resultText = "Timer Function Error " + timerEvt.ToString() + " Compile Error " + ex.Message.ToString();
                                            scriptResult.errorDetail = commonData.GetExceptionAsString(ex);

                                        }
                                    }
                                    if (scriptResult != null)
                                    {
                                        if (commonHTML.MAX_EVENT_RECORD_COUNT > this.___scriptEventList.Count)
                                        {
                                            this.___scriptEventList.Add(scriptResult);
                                        }
                                    }
                                    else
                                    {

                                    }
                                
                                    timerEvt.LastCallTime = DateTime.Now;
                                    timerEvt.IsCompleted = true;
                                    while (this.___DocumentTimerCompleteList.Count > commonHTML.MAX_TIMER_COPLETE_RECORD_COUNT)
                                    {
                                        this.___DocumentTimerCompleteList.RemoveAt(0);
                                    }
                                    this.___DocumentTimerCompleteList.Add(timerEvt);
                                    if (___IsTimeout == true)
                                    {
                                        if (___IsEventHasBeenFromLiveList == false)
                                        {
                                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1000)
                                            {
                                                commonLog.LogEntry("DocumentTimerLiveList Removing : {0}", ___timerkey);
                                            }
                                            if (System.Threading.Monitor.TryEnter(this.___DocumentTimerLiveLockingObject, 500))
                                            {
                                                this.___DocumentTimerLiveList.Remove(___timerkey);
                                                System.Threading.Monitor.Exit(this.___DocumentTimerLiveLockingObject);
                                            }
                                        }
                                    }

                                }
                                continue;
                            }
                            if (___IsInterval == true && timerEvt.IsCompleted == false)
                            {
                                TimeSpan tpSpan = DateTime.Now.Subtract(timerEvt.LastCallTime);
                                if (Math.Abs(tpSpan.TotalMilliseconds) > timerEvt.Timeout)
                                {
                                    bool __IntervalSuccess = false;
                                    CHtmlScriptResultElement scriptResult = null;
                                    if (commonHTML.MAX_EVENT_RECORD_COUNT < this.___scriptEventList.Count)
                                    {
                                       
                                    }
                                    else
                                    {
                                        scriptResult = new CHtmlScriptResultElement();
                                        scriptResult.text = string.Concat(timerEvt.Name, ' ', timerEvt, ' ', timerEvt.GetHashCode());
                                        scriptResult.href = string.Copy(this.___URL);
                                    }
                               
                                    object objFunction = timerEvt.Function;
                                  
                                    try
                                    {
                                        this.___processTimerScriptOrFunction(objFunction);
                                        scriptResult.result = 200;
                                    }
                                    catch (Exception ex)
                                    {
                                        __IntervalSuccess = false;
                                        if (scriptResult != null)
                                        {
                                            scriptResult.result = 500;

 
                                                scriptResult.resultText = string.Format("Script Onload Segment '{0}' Compile Error {1}", timerEvt, ex.Message);
     
                                        }
                                    }
                                    if (scriptResult != null)
                                    {
                                        if (commonHTML.MAX_EVENT_RECORD_COUNT > this.___scriptEventList.Count)
                                        {
                                            this.___scriptEventList.Add(scriptResult);
                                        }
                                    }
                               
                                    if (__IntervalSuccess == true)
                                    {
                                        timerEvt.LastCallTime = DateTime.Now;
                                        // Do not set is Complete here because timer may cleared during script
                                        //timerEvt.IsCompleted = false;
                                    }
                                    else
                                    {
                                        // If it is unsuccessfull , it complete to true no more exection
                                        timerEvt.LastCallTime = DateTime.Now;
                                        timerEvt.IsCompleted = true;
                                        while (this.___DocumentTimerCompleteList.Count > commonHTML.MAX_TIMER_COPLETE_RECORD_COUNT)
                                        {
                                            this.___DocumentTimerCompleteList.RemoveAt(0);
                                        }
                                        this.___DocumentTimerCompleteList.Add(timerEvt);
                                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1000)
                                        {
                                            commonLog.LogEntry("DocumentTimerLiveList Removing : {0}", ___timerkey);
                                        }
                                        if (System.Threading.Monitor.TryEnter(this.___DocumentTimerLiveLockingObject, 500))
                                        {
                                            this.___DocumentTimerLiveList.Remove(___timerkey);
                                            System.Threading.Monitor.Exit(this.___DocumentTimerLiveLockingObject);
                                        }
                                    }
                                }
                                continue;
                            }

                        }
                    }
                    catch (Exception ex)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                        {
                            commonLog.LogEntry("DocumentTimer_Elapsed Error. ", ex);
                        }
                    }

                    ___DrawCanvasCreatedElements();
                    if (this.___IsDocumentTimerStatedBeforeDocumentComelete == true)
                    {
                        if (this.___readyStateType == CHtmlReadytStateType.complete)
                        {
                            if (this.___IsRenderingFirstCompleted == true)
                            {

                                if (___DocumentTimerThread != null)
                                {
                                    this.___IsDocumentTimerStatedBeforeDocumentComelete = false;
                                    if (this.___DocumentTimerMimimunIntervalOrTimeout < int.MaxValue)
                                    {
                                        this.___DocumentTimerThread.Change(this.___DocumentTimerMimimunIntervalOrTimeout, this.___DocumentTimerMimimunIntervalOrTimeout);
                                    }
                                }
                            }
                        }
                    }

                    if (ValidScriptCount == 0 )
                    {
                        this.___DocumentTimerMimimunIntervalOrTimeout = int.MaxValue;
                        
                        if (this.___documentTimerTickCount >= 5)
                        {
                            if (this.___DocumentTimerLiveList != null && this.___DocumentTimerLiveList.Count > 0)
                            {
                                goto TimerProcessDone;
                            }
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3)
                            {
                                commonLog.LogEntry("No Event DocumentTimer should process...");
                            }
                            if (this.___DocumentTimerThread != null)
                            {
                                this.___DocumentTimerThread.Dispose();
                                this.___DocumentTimerThread = null;
                            }
                            this.___IsDocumentTimerThreadRunning = false;
                            this.___DocumentTimerMimimunIntervalOrTimeout = int.MaxValue;
                            StoreCookieListIfUpdated();
                            goto TimerProcessDone;
                        }

                    }
                    else
                    {
                        TimeSpan tpSpan = DateTime.Now.Subtract(___dtStart);
                        if (tpSpan.TotalSeconds >= commonHTML.MAX_DOCUMENT_TIMER_TIMEOUT_SECONDS )
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("DocumentTimer tooks long to complete. Disable Doucument Timer From now on...");
                            }
                            this.___IsDocumentTimerTooksTooLong = true;
                            try
                            {

                                if (this.___DocumentTimerThread != null)
                                {
                                    this.___DocumentTimerThread.Dispose();
                                    this.___DocumentTimerThread = null;
                                }
                                StoreCookieListIfUpdated();
                            }
                            catch { }
                            this.___IsDocumentTimerThreadRunning = false;
                            this.___DocumentTimerMimimunIntervalOrTimeout = int.MaxValue;
                            goto TimerProcessDone;
                        }
                        else
                        {
                            // There is timer to process

                        }
                    }
                    //WaitForNextLoop:
                    if (this == null || this.___Disposing == true || this.___DocumentTimerThread == null)
                    {
                        goto TimerProcessDone;
                    }




                    TimerProcessDone:
                    if (false) { ;}
                }
                catch (System.Threading.ThreadAbortException)
                {
                    // just cont
                    
                }
                catch (Exception ex)
                {
                    if (ex is System.Threading.ThreadAbortException)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 30)
                        {
                            commonLog.LogEntry("DocumentTimerThread_Elapsed Thread Abort. It is ok!");
                        }
                        
                    }else if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                    {
                        commonLog.LogEntry("DocumentTimerThread_Elapsed", ex);
                    }
                }
                finally
                {
                    if (___IsEntered == true)
                    {
                        System.Threading.Monitor.Exit(___DocumentTimerLockingObject);
                    }
                    ___IsDocumentTimerLocking = false;

                }
            }
          

		}
		internal void StoreCookieListIfUpdated()
		{
			try
			{
                if (this.___cookieList != null)
                {
                    if (this.___cookieUpdatedTime > this.___cookieLastSavedTime)
                    {
                        if (commonLog.LoggingEnabled == true && commonLog.CommonLogLevel > 7)
                        {
                            commonLog.LogEntry("Saving Cookie list {0}", this.___cookieList.Count);
                        }
                        //this.___storeDocumentDataIntoMCS();
                        this.___cookieLastSavedTime = DateTime.Now;
                    }
                }
			}
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                }
            }
		}

		internal void ___StopDocumentTimer()
		{
			if(this.___DocumentTimerThread != null)
			{
				try
				{
					this.___DocumentTimerThread.Dispose();
				}
                catch (Exception ex)
                {
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                    {
                        commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex));
                    }
                }
				{
					this.___DocumentTimerThread = null;
				}
			}
            this.___IsDocumentTimerThreadRunning = false;
            this.___DocumentTimerMimimunIntervalOrTimeout = int.MaxValue;

		}

		

	
		/// <summary>
		/// Just Create Template Script Element Block Entry 
		/// </summary>
		/// <param name="element"></param>
		internal void CreateTemplateScriptBlockEntry(CHtmlElement element, System.Text.StringBuilder sbScript)
		{
			CHtmlScriptResultElement  __templateScript = new CHtmlScriptResultElement();
			__templateScript.href = "InHtml: " + element.ToString() + " " + element.type;
			__templateScript.IsCompiled = true;
			if(sbScript != null)
			{
				__templateScript.text = sbScript.ToString();
			}
			__templateScript.resultText = "Template Section";
			__templateScript.result = 10;
			this.___scriptEventList.Add( __templateScript);
		}
		public CHtmlCSSStyleSheet createStyleSheet()
		{
			return this.createStyleSheet("", -1);
		}
		public CHtmlCSSStyleSheet createStyleSheet(string ___url)
		{
			return this.createStyleSheet (___url, -1);
		}

        public CHtmlTouch createTouch(object obj_view, object obj_target, object obj_identifier, object obj_pageX, object obj_pageY,
                                      object obj_screenX, object obj_screenY, object obj_clientX, object obj_clientY,
                                      object obj_radiusX, object obj_radiusY, object obj_rotationAngle, object obj_force)
        {
            return this.___createTouch_Inner(obj_view, obj_target, obj_identifier, obj_pageX, obj_pageY,
                                       obj_screenX, obj_screenY, obj_clientX, obj_clientY,
                                      obj_radiusX, obj_radiusY, obj_rotationAngle, obj_force);
        }
        public CHtmlTouch ___createTouch_Inner(object obj_view, object obj_target, object obj_identifier, object obj_pageX, object obj_pageY,
                              object obj_screenX, object obj_screenY, object obj_clientX, object obj_clientY,
                              object obj_radiusX, object obj_radiusY, object obj_rotationAngle, object obj_force)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 9)
            {
                commonLog.LogEntry("TODO: {0}.createTouch() is called",this);
            }
            CHtmlTouch ___newTouch = new CHtmlTouch();
            return ___newTouch;
        }
        

		
		public double compareDocumentPosition(object otherNode)
		{
            CHtmlElement __otherNodeElement = null;
            if (otherNode is CHtmlElement)
            {
                __otherNodeElement = otherNode as CHtmlElement;
            }
            if (__otherNodeElement == null)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
                {

                    commonLog.LogEntry(" compareDocumentPosition enment fail");

                }
                return (double)1;
            }
            return commonHTML.compareDocumentPositionInner(this.___documentElement, __otherNodeElement);
		}
		/// <summary>
		/// createStleSheet is implemented in IE. 
		/// </summary>
		/// <param name="___url"></param>
		/// <param name="__StleIndex"></param>
		/// <returns></returns>
		public CHtmlCSSStyleSheet createStyleSheet(string ___url, int __StleIndex)
		{
            CHtmlCSSStyleSheet newPart = new CHtmlCSSStyleSheet(CHtmlElementStyleType.None);
			newPart.___IsDynamicElement = true;
			//newPart.SelectorID = "";
			string _urlLow = ___url;
			bool ___IsURLDownload = false;
			if(___url.Length == 0)
			{
				newPart.___baseUrl = ___url;
				___IsURLDownload  = false;
			}
            else if (_urlLow.IndexOf("javascript:", StringComparison.OrdinalIgnoreCase) > -1 || _urlLow[_urlLow.Length -1] != ')')
			{
				newPart.___baseUrl = ___url;
				___IsURLDownload  = false;
			}
			else
			{
				___IsURLDownload = true;
				newPart.___baseUrl = commonHTML.GetAbsoluteUri(this.___URL, this.___baseUrl, ___url);
				
			}
			if(___IsURLDownload)
			{
				___downloaddirectly(newPart.___baseUrl,null ,null, null , this.___URL, this.___charset, CHtmlThreadPoolQueueObjectType.UrlStyleSheet, this.___URL , null, 0, CHtmlUrlSourceType.Unknown,false);
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
				{
					commonLog.LogEntry("createStyleSheet({0}) is called Download : {1}" , ___url, ___IsURLDownload );
				}
			}

			return newPart;
		}
		private void ___closeRootElementIfOpen()
		{
			DateTime ___dtStart = DateTime.Now;
			try
			{
				// assuming all[0] is html tag
				if(this.___documentElement  != null)
				{
                    int ___htmlLen = this.___HtmlBuilder.Length;
					if(this.___body == null)
					{
						CHtmlElement ___bodyElement = createCHtmlElementWithDomType("BODY",  this.___documentDomType, null);
                        if (this.___MultiversalWindow != null)
                        {
                            this.___MultiversalWindow.___assignElementPrototype(___bodyElement);
                        }
						___bodyElement.___ElementVersion = CHtmlVersionType.Version3;
						___bodyElement.tagName = "BODY";
                        ___bodyElement.___multiversalClassType = IMutilversalObjectType.HTMLBodyElement;
						___bodyElement.id = "BodyEntity";
						___bodyElement.___TagOpenStartPosition = ___htmlLen;
						___bodyElement.___TagCloseEndPosition = ___htmlLen;

						//___bodyElement.ComposeInnnerText();
                        if (___documentElement != null)
                        {
                            ___bodyElement.___parentWeakRef = new WeakReference(this.___documentElement, false);
                        }

						___bodyElement.___style.___Width = "600px";
						___bodyElement.___style.___Height = "480px";
						___bodyElement.___offsetWidth  = 600;
						___bodyElement.___offsetHeight = 480;
                        if (this.___IsElementCreationNeedsToBeDynamic == false)
                        {
                            if (___bodyElement.___isCalculateElementBoundsCalled == false)
                            {
                                this.___calculateElementBounds(___bodyElement);
                            }
                        }
						this.___addToCurrentParentElement(___bodyElement);
						___bodyElement.___ClosedReson = CHtmlTagClosedReasonType.Direct;
						___bodyElement.___IsDynamicElement = true;
						this.___body = ___bodyElement;

					}
					if(this.___body != null && this.___body.___ClosedReson == CHtmlTagClosedReasonType.Open)
					{
						int ___Depth = 0;
						this.CloseElementChildren(this.___body, ___htmlLen, ref ___Depth, 4);
                        if (this.___IsElementCreationNeedsToBeDynamic == false)
                        {
                            if (this.___body.___isCalculateElementBoundsCalled == false)
                            {
                                this.___calculateElementBounds(this.___body);
                            }
                        }
					}
                    CHtmlElement ___topElement = this.___documentElement as CHtmlElement;
                    if (___topElement != null)
                    {
                        ___topElement.___TagCloseStartPosition = ___htmlLen;
                        ___topElement.___TagCloseEndPosition = ___htmlLen;
                        ___topElement.___ClosedReson = CHtmlTagClosedReasonType.ForceCleanup;
                    }
				}
				if(this.___currentParentElement  != null)
				{
					this.___currentParentElement = null;
				}
				this.___currentClosedElement = null;
			} 
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
				{
					commonLog.LogEntry("SetCloseHTMLDocumentIfOpen", ex);
				}
			}
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
			{
				TimeSpan tpSpan = DateTime.Now.Subtract(___dtStart);
				commonLog.LogEntry("Force HTML Close Completed {0} ms...", tpSpan.TotalMilliseconds);
			}
		}

        
        public void scrollTo_viaWindow(object p1, object p2)
        {

        }
		public void captureEvents(object oEvent)
		{
			return;
		}
		internal void ___loadLocalFile(string sPath, bool SaveImage)
		{

			if(System.IO.File.Exists(sPath))
			{
                this.___URL = string.Copy(sPath);
                byte[] bts = System.IO.File.ReadAllBytes(sPath);
                if (bts != null)
                {
                    if (this.___IsHtmlCharSetDetectionCompleted == false)
                    {
                        System.IO.MemoryStream mstream = new System.IO.MemoryStream(bts);
                        if (commonHTML.isUTF8BytesExistsInFirst3Bytes(bts[0], bts[1], bts[2]))
                        {
                            this.___charset = "utf-8";
                            this.___encText = System.Text.UTF8Encoding.UTF8;
                           
                        }
                        else
                        {
                            this.___getHtmlCharsetInMemorySteam(mstream, out this.___charset);
                        }
                    }
                    if(this.___HtmlBuilder == null)
                    {
                        this.___HtmlBuilder = new StringBuilder();
                    }

                    if (Monitor.TryEnter(this.___HtmlBuilderLockObject, 3000))
                    {
                        try
                        {
                            this.___HtmlBuilder.Append(this.___encText.GetString(bts, 0, bts.Length));
                            this.___HtmlBuilderLength = this.___HtmlBuilder.Length;
                        }
                        finally
                        {
                            Monitor.Exit(this.___HtmlBuilderLockObject);
                        }

                    }


                }

                this.___responseStartTime = DateTime.Now;


                this.___IsHtm1stHttpResponseCompleted = true;
				this.___IsHtmlResponseCompleted = true;
				if(___ThreadParseCompleteEvent != null)
				{
					___ThreadParseCompleteEvent.WaitOne(60000, false);
				}

				if(this.___TemporayBitmap !=null)
				{
					try
					{
						this.___TemporayBitmap .Dispose();
					}
                    catch (Exception ex2)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex2));
                        }
                    }
					this.___TemporayBitmap = null;
				}
			}
			else
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
				{
					commonLog.LogEntry("LoadFile File not Found :{0}",sPath);
				}
			}
		}
		
        /// <summary>
        /// This Method check Element is healthy for Document 
        /// </summary>
        /// <param name="?">__elem</param>
        /// <returns>true if is traceable to document</returns>
        public bool ___isElementParentTraceableToDocument(CHtmlElement ___elem)
        {
            if (___elem == null)
                return false;
            uint ___parentLooupCount = 0;
            try
            {
                CHtmlBase ___parentNode = ___elem.___parent;
                ___parentLooupCount++;
                while (___parentNode != null)
                {
                    if (___parentNode is CHtmlDocument && object.ReferenceEquals(___parentNode, this) == true)
                    {
                        return true;
                    }
                    else if (___parentNode.___elementTagType == CHtmlElementType.HTML)
                    {
                        return true;
                    }
                    else if (___parentNode is CHtmlElement)
                    {
                        CHtmlElement ___parentElement = ___parentNode as CHtmlElement;
                        ___parentNode = ___parentElement.___parent as CHtmlBase;
                        ___parentLooupCount++;
                        if (___parentLooupCount >= commonHTML.___TRACE_PARENT_FOR_DOCUMENT_LOOKUP_MAX)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                            {
                                commonLog.LogEntry("___isElementParentTraceableToDocument ({0}) is aborted because lookup is over {1} limit", ___elem, commonHTML.___TRACE_PARENT_FOR_DOCUMENT_LOOKUP_MAX);
                            }
                            break;
                        }
                    }
                    else
                    {
                        break;

                    }
                }
 
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                {
                    commonLog.LogEntry("___isElementParentTraceableToDocument exception", ex);
                }

            }
            return false;
        }

        public static CHtmlElement createCHtmlElementWithDomType(string ___tagNameUpper, CHtmlDomModeType __domType, CHtmlElement ____parentElement)
        {

            switch (__domType)
            {
                case CHtmlDomModeType.XMLDOM:
                    return new CHtmlElement();
                case CHtmlDomModeType.SVGDOM:
                    return new CHtmlSVGElement();
                default:

                    switch (___tagNameUpper)
                    {
                        case "VIDEO":
                        case "AUDIO":
                        case "TRACK":
                        case "SOURCE":
                            return new CHtmlMediaElement();

                        case "SVG":
                            return new CHtmlSVGElement();
                        case "TEMPLATE":
                            return new CHtmlTemplateElement();
                        case "CANVAS":
                            return new CHtmlElement();
                        case "INPUT":
                        case "TEXTAREA":
                            return new CHtmlInputElement();
                    }
                    break;

            }
            if (____parentElement != null)
            {
                if (____parentElement.___isSvgElement == true)
                {
                    return new CHtmlSVGElement();
                }
            }
            return new CHtmlElement();
        }


#region ____defineGetter___ ____defineSetter___
        public void __defineGetter__(string ___propName, object ____getFunction)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("{0}.__defineGetter___({1}, {2})", this, ___propName, ____getFunction);
            }
            this.___getterProperties[___propName] = ____getFunction;
        }
        public void __defineSetter__(string ___propName, object ____getFunction)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("{0}.__defineSetter___({1}, {2})",  this, ___propName, ____getFunction);
            }
            this.___setterProperties[___propName] = ____getFunction;
        }

#endregion


#region IPropertBox �����o


        
        public virtual object ___getPropertyByName(string ___name)
		{
			try
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
				{
					commonLog.LogEntry("get : {0} for {1}",  ___name, this);
				}
				switch(___name)
				{


                    case "title":
                        return this.title;
                    case null:
                    case "":
                        return null;
                    case "implementation":
                        return this.___implementation;
                    case "__iterator__":
                        return null;// commonHTML.rhinoForLoopEnumratorFunction;
					case "referrer":
                        return commonHTML.___convertNullToEmpty(this.___referrer);
					case "webkitvisibilitychange":
                    case "webkitVisibilityChange":
                    case "mozVisibilityChange":
                    case "visibilitychange":
                    case "visibilityChange":
						return this.visibilityChange;
                    case "documentMode":
                        return this.documentMode;
					case "onvisibilitychange":
						return this.onvisibilitychange;
					case "webkitvisibilitystate": // document.webkitVisibilityState
                    case "webkitVisibilityState":
                    case "mozVisibilityState":
					case "visibilitystate":
                    case "visibilityState":
                        return this.___getvisibilityStateString();
					case "webkithidden":  // document.webkitHidden
                    case "webkitHidden":
					case "hidden":
						return this.webkitHidden;
					case "fullscreen":
                    case "FullScreen":
                    case "mozFullScreen":
					case "mozFullscreen":
                    case "webkitIsFullScreen":
						return this.___IsFullScreen;
                    case "fullscreenElement":
                    case "fullScreenElement":
                    case "mozFullScreenElement":
                    case "webkitFullScreenElement":
                    case "webkitFullscreenElement":
                        return this.fullscreenElement;
					case "anchors":
						return this.___anchors;
					case "charset":
					case "characterset":
                    case "characterSet":
						return  commonHTML.___convertNullToEmpty(this.___charset);
                    case "defaultCharset":
                        return commonHTML.___convertNullToEmpty(this.___defaultCharset);
					case "cookie":
						return this.cookie;
					case "dir":
						return commonHTML.___convertNullToEmpty(this.___dir);
                    case "readystate":
                    case "readyState":
                        {
                            switch (___readyStateType)
                            {
                                case  CHtmlReadytStateType.uninitialized:
                                    return "uninitialized";
                                case CHtmlReadytStateType.loading:
                                    return "loading";
                                case CHtmlReadytStateType.interactive:
                                    return "interactive";
                                case CHtmlReadytStateType.complete:
                                    return "complete";
                            }
                            return "comlete";
                        }
                         

						//case "length": Document does not have length property IE. Chrome.
					case "filesize":
					case "contentlength":
                    case "contentLength":
						return this.___ContentLength;
					case "lastmodified":
                    case "lastModified":
                        return commonHTML.___convertNullToEmpty(this.___lastModified);
					case "domain":
						return this.domain;
					case "type":
						return this.type;
					case "protocol":
						return this.location.protocol;
					case "nodetype":
                    case "nodeType":
						return this.nodeType;
					case "nodename":
                    case "nodeName":
						return this.name;
					case "nodevalue":
                    case "nodeValue":
						return this.@value;
					case "url":
                    case "Url":
                    case "URL":
					case "documentUri":
                    case "documenturi":
                        return commonHTML.___convertNullToEmpty(this.___URL);
                    case "baseUrl":
                        return  commonHTML.___convertNullToEmpty(this.___baseUrl);
					case "scripts":
						return this.___scripts;
					case "frames":
                        if (this.___frames != null)
                        {
                            return this.___frames;
                        }
                        else
                        {
                            return this.___framesAsMultiversalWindow;
                        }
					case "forms":
						return this.___forms;
					case "layers":
						return this.___layers;
					case "all":
                        return null;

					case "body":
						return this.body;
					case "head":
						return this.head;
					case "location":
						if(base.___locationBase != null)
						{
							return base.___locationBase;
						}
						else
						{
							if(commonLog.LoggingEnabled && commonLog.CommonLogLevel > 5)
							{
                                commonLog.LogEntry("document.___locationBase is null. disposing : {0}", this.___Disposing);
							}
							return null;
						}
					case "documentelement":
                    case "documentElement":
						if(this.___documentElement == null)
						{
							if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
							{
								commonLog.LogEntry("Strange Document Element is null");
							}
							// access once
							object _oelem = this.documentElement;// <=== DO NOT CHANGE THIS!!!
						}
						return this.___documentElement;
					case "compatmode":
                    case "compatMode":
						return commonHTML.___convertNullToEmpty(this.___compatMode);
					case "parentwindow":
                    case "parentWindow":
                        return this.___getMultiversalWindow();
					case "window":
					case "defaultview":
                    case "defaultView":
                        return this.defaultView;
                    case "mozFullScreenEnabled":
                    case "fullScreenEnabled":
                    case "webkitFullScreenEnabled":
                    case "msFullScreenEnabled":
                    case "fullscreenEnabled":
                        return this.___IsFullScreenEnabled;

					case "designmode":
                    case "designMode":
						return false;
					case "links":
						return this.___links;
					case "embeds":
					case "plugins": // document.plugins == document.embeds are equal
						return this.___embeds;
					case "doctype":
                    case "docType":
						return this.___docTypeElement;
					case "parentnode":
                    case "parentNode":
						return null; // document always null
					case "attributes":
						return this.___attributes; 
					case "contenttype":
                    case "contentType":
						return commonHTML.___convertNullToEmpty(this.___contentType); 
					case "linkcolor":
						return this.linkColor; 
					case "vlinkcolor":
						return this.vlinkColor; 
					case "alinkcolor":
						return this.alinkColor; 
					case "height":
                    case "Height":
						return this.offsetHeight; 
					case "width":
                    case "Width":
						return this.offsetWidth;
					case "onload":
						return this.onload;
					case "onunload":
						return this.onunload;
					case "onclick":
					case "click":
						return this.onclick;
					case "ondblclick":
						return this.ondblclick;
					case "onkeydown":
						return this.onkeydown;
					case "onkeyup":
						return this.onkeyup;
					case "onkeypress":
						return this.onkeypress;
					case "onmousedown":
						return this.onmousedown;
					case "onmouseup":
						return this.onmouseup;
					case "onerror":
						return this.onerror;
                    case "onselectionchange":
                        return this.onselectionchange;
                    case "onselectionstart":
                    case "onselectstart":
                        return this.onselectionstart;
                    case "onselectionend":
                    case "onselectend":
                        return this.onselectionend;
					case "selection":
						return this.selection;
					case "mimetype":
                    case "mimeType":
                        return commonHTML.___convertNullToEmpty(this.___mimeType);
					case "activeelement":
                    case "activeElement":
						return this.___body;
                    /*
					case "namespaces":
						return this.___namespaces;
                     */
					case "images":
						return this.___imageElements;
					case "prefix":
						return commonHTML.___convertNullToEmpty(this.___prefix);
					case "localname":
                    case "localName":
						return commonHTML.___convertNullToEmpty(this.___localName);
					case "xmlencoding":
                    case "xmlEncoding":
						return commonHTML.___convertNullToEmpty(this.___xmlEncoding);
					case "xmlversion":
                    case "xmlVersion":
						return commonHTML.___convertNullToEmpty(this.___xmlVersion);
					case "xmlstandalone":
						return this.___xmlStandalone;
					case "uniqueid":
                    case "uniqueId":
                        return this.uniqueID;
					case "rootelement":
                    case "rootelEment":
						return this.___rootElement;
					case "onreadystatechange":
						return this.___getEventInfo("onreadystatechange");
					case "domcontentloaded":
                    case "DomContentloaded":
                    case "DomContentLoaded":
						return this.___getEventInfo("domcontentloaded");
					case "ownerdocument":
                    case "ownerDocument":
						return null; 
						// Note : ownerdocument is null it is safer for most of the case.
						// if we returns 'this'(document), many scripts will enter infinite loop.
						// TODO: DOM createDocumentType's owerDocument should returns not null. but no now.
					case "childnodes":
                    case "childNodes":
                        if (this.___documentElement != null)
                        {
                            return this.___documentElement.___childNodes;
                        }
                        else
                        {
                            return this.___childNodes;
                        }
                    case "childelementcount":
                    case "childElementCount":
                        return base.childElementCount;
                    case "textcontent":
                    case "textContent":
                        return null; // Chrome will returns null for document.textcontent
					case "children":
                        if (this.___documentElement != null)
                        {
                            return this.___documentElement.___getChildrenList();
                        }
                        else
                        {
                            return this.___getChildrenList();
                        }
                    case "scrollingElement":
                        return this.scrollingElement;
                    case "firstchild":
                    case "firstChild":
					case "firstnode":
                    case "firstNode":
						return this.firstChild;
					case "lastchild":
					case "lastnode":
                    case "lastChild":
                    case "lastNode":
						return this.lastChild;
                    case "styleSheets":
						return this.___styleSheets;
					case "fgcolor":
                    case "FGColor":
                    case "FGcolor":
					case "foregroundcolor":
                    case "ForeGroundcolor":
					case "forecolor":
                    case "ForeColor":
						return commonHTML.___convertNullToEmpty(this.___FGColorString);
					case "bgcolor":
                    case "BGColor":
					case "backgroundcolor":
						return commonHTML.___convertNullToEmpty(this.___BGColorString);
					case "write":
						return null;
                    case "pointerLockElement":
                        return this.pointerLockElement;
					case "id":  // Some Script document.id to store value. we will allow.
                    case "Id":
                    case "ID":
						CHtmlAttribute idAttr = null;
                        if (this.___attributes.Count > 0 && this.___attributes.TryGetValue("id", out idAttr) == true)
                        {
                            if (idAttr != null)
                            {
                                return idAttr.___value;
                            }
                            else
                            {
                                return null;
                            }
                        }
                        return null;

					default:
						if(this.___attributes != null)
						{
							CHtmlAttribute attr  = null;
                            if (this.___attributes.Count > 0 && this.___attributes.TryGetValue(___name, out attr) == true)
                            {
                                if (attr != null)
                                {
                                    return attr.value;
                                }
                            }
						}
						if(this.___forms != null && this.___forms.Count > 0 && this.___forms.ContainsKey(___name) == true)
						{
                            return this.___forms.GetValueByKey(___name);
						}
 
                        

                        break;
				}

				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
				{
					commonLog.LogEntry("GetPropertyValue for {0} {1} {2} failed",this.GetType(), this, ___name);
				}
			}
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
				{
					commonLog.LogEntry("x_GetPropertyValue", ex);
				}
			}
			return null;
		}
		
		public virtual void ___setPropertyByName(string ___name, object val)
		{
          
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
                commonLog.LogEntry("calling {0}.___setPropertyByIndex({1}, {2})", this, ___name, val);
			}

            FunctionPreCheckDone:
			switch(___name)
			{
				case "id":
                case "Id":
                case "ID":
					this.CreateCHtmlAttributeEntry(___name, val);
					return;
				case "url":
					return;
				case "charset":
                case "charSet":
					this.___charset = commonHTML.GetStringValue(val);
					break;
				case "type":
					this.@type = commonHTML.GetStringValue(val);
					break;
				case "cookie":
					this.cookie = commonHTML.GetStringValue(val);
					break;
				case "title":
					this.___title = commonHTML.GetStringValue(val);
					break;
				case "domain":
					this.___domain =  commonHTML.GetStringValue(val);
					break;
					/*
					case "doctype":
						try
						{
							this._docTypeElement = val as CHtmlDTD;
						}
						catch{}
						break;
					*/
				case "location":
					if(val is string)
					{
						this.___locationBase.href = commonHTML.GetStringValue(val);
					}
					break;
				
				case "onreadystatechange":
					this.onreadystatechange = value;
					break;
				case "domcontentloaded":
                case "DOMContentLoaded":
                case "DOMContentloaded":
					this.DOMContentLoaded  = value;
					break;
				case "onload":
                case "onLoad":
					this.onload = value;
					break;
				case "onunload":
					this.onunload = value;
					break;
				case "fgcolor":
                case "fgColor":
				case "foregroundcolor":
                case "foregroundColor":
					this.___FGColorString = commonHTML.GetStringValue(val);
					break;
				case "bgcolor":
                case "bgColor":
				case "backgroundcolor":
                case "backgroundColor":
					this.___BGColorString = commonHTML.GetStringValue(val);
					break;
				// Rhino may calls "write() function through _x_SetPropertyValue() with Function
				case "write":
					//this.write(val);
					break;
				case "onkeydown":
					this.onkeydown = val;
					break;
				case "onkeyup":
					this.onkeyup = val;
					break;
				case "onkeypress":
					this.onkeypress = val;
					break;
				case "onmouseover":
					this.onmouseover = val;
					break;
				case "onmousehover":
					this.onmouseover = val;
					break;
				case "onmousedown":
					this.onmousedown = val;
					break;
				case "onmousewheel":
					this.onmousewheel = val;
					break;
                case "onwheel":
                    this.onwheel = val;
                    break;
				case "onmouseup":
					this.onmouseup = val;
					break;
				case "onmouseout":
					this.onmouseout = val;
					break;
				case "oncontextmenu":
					this.oncontextmenu = val;
					break;
				case "onpaint":
					this.onpaste =val;
					break;
				case "onpropertychange":
					this.onpropertychange = val;
					break;
				case "onresizestart":
					this.onresizestart = val;
					break;
				case "onresizeend":
					this.onresizeend = val;
					break;
				case "onselectionchange":
					this.onselectionchange = val;
					break;
                case "onselectionstart":
                case "onselectstart":
                    this.onselectionstart = val;
                    break;
                case "onselectionend":
                case "onselectend":
                    this.onselectionend = val;
                    break;
				case "onerror":
					this.onerror = val;
					break;
				case "onactivate":
					this.onactivate =val;
					break;
				case "onbeforepaste":
					this.onbeforepaste = val;
					break;
				case "onbeforeactivate":
					this.onbeforeactivate = val;
					break;
				case "onmove":
					this.onmove = val;
					break;
				case "onpaste":
					this.onpaste = val;
					break;
				case "ondragend":
					this.ondragend = val;
					break;
				case "ondragstart":
					this.ondragstart = val;
					break;
				case "ondragover":
					this.ondragover = val;
					break;
				case "ondragleave":
					this.ondragleave = val;
					break;
				case "ondragenter":
					this.ondragenter = val;
					break;
				case "ondeactivate":
					this.ondeactivate = val;
					break;
				case "ondrop":
					this.ondrop = val;
					break;
				case "onstop":
					this.onstop = val;
					break;
				case "onhelp":
					this.onhelp = val;
					break;
                case "onclick":
                    this.onclick = val;
                    break;
                case "onmousemove":
                    this.onmousemove = val;
                    break;

				case "webkitvisibilitychange":
                case "webkitVisibilityChange":
					this.webkitVisibilityChange = val;
					break;
				case "visibilitychange":
                case "visibilityChange":
					this.visibilityChange = val;
					break;
				case "onvisibilitychange":
                case "onVisibilityChange":
					this.onvisibilitychange = val;
					break;

                case "writeln":
                    // rhino may put wirteln to document sometimes. Just ignore it.
                    return;
                case "styleSheets":
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 7)
                    {
                        commonLog.LogEntry("Attempting directly set document.styleSheets. ignore.", this, ___name, val);
                    }
                    return;
                case "pointerLockElement":
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 7)
                    {
                        commonLog.LogEntry("Attempting directly set pointerLockElement. ignore.", this, ___name, val);
                    }
                    return;
                case "head":
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 7)
                    {
                        commonLog.LogEntry("Attempting directly set CHtmlDocument Property head {0} {1} = {2}", this, ___name, val);
                    }
                    if (val != null)
                    {
                        object __UnwrappedHead = commonData.convertObjectIntoCHtmlElement(val);
                        if (__UnwrappedHead != null)
                        {
                            if (object.ReferenceEquals(__UnwrappedHead, this.___head) == true)
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 7)
                                {
                                    commonLog.LogEntry("CHtmlDocument already contains head which is reference is samle. exit");
                                }
                                return;
                            }
                            else
                            {
                                if (this.___head == null)
                                {
                                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 7)
                                    {
                                        commonLog.LogEntry("TODO: CHtmlDocument already contains head which is reference is not samle. Store Now?");
                                    }
                                    return;
                                }
                            }

                        }
                    }
                    return;
				default:
					PropertyInfo pInfo= null ;
					try
					{

					}
                    catch (Exception ex2)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
                        {
                            commonLog.LogEntry("{0} has error {1}", this, commonData.GetExceptionAsString(ex2));
                        }
                    }
					bool ___ValueStored = false;

					try
					{
						CHtmlAttribute attr = null;
                        if (this.___attributes.TryGetValue(___name, out attr) == true)
                        {
                            if (attr == null)
                            {
                                attr = new CHtmlAttribute();
                                attr.name = ___name;
                                attr.parentNode = this;
                                attr.___value = val;
                                this.___attributes[___name] = attr;
                            }
                            else
                            {
                                attr.@value = val;
                            }
                        }
                        else
                        {
                            attr = new CHtmlAttribute();
                            attr.name = ___name;
                            attr.parentNode = this;
                            attr.___value = val;
                            this.___attributes[___name] = attr;
                        }
						___ValueStored  = true;
					}
					catch
					{
						___ValueStored  = false;
					}
					
					
					if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
					{
						commonLog.LogEntry("SetPropertyValue for {0} {1}  {2} = {3} Success : {4}",this.GetType(), this, ___name, val, ___ValueStored );
					}
					break;
			}
		}
        /// <summary>
        /// performs object seek baseupon document Element
        /// </summary>
        /// <param name="__seek"></param>
        /// <returns></returns>
        public bool contains(object __seek)
        {
            if(this.___documentElement != null)
            {
                return ___documentElement.contains(__seek);
            }
            return false;
        }
		internal void CreateCHtmlAttributeEntry(string ___nameLow, object val)
		{
			bool ___ValueStored = false;
			try
			{
                CHtmlAttribute attr = null;
                if(this.___attributes.TryGetValue(___nameLow, out attr) == false)
				{
					attr = new CHtmlAttribute();
					attr.name = ___nameLow;
					attr.parentNode = this;
				
					attr.@value = val;
					this.___attributes[___nameLow] = attr;
				}
				else
				{
					attr.@value = val;
				}
				___ValueStored  = true;
			}
			catch
			{
				___ValueStored  = false;
			}
					
					
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
                commonLog.LogEntry("CreateCHtmlAttributeEntry for {0} {1}  {2} = {3} Success : {4}", this.GetType(), this, ___nameLow, val, ___ValueStored);
			}
		}
		
        public virtual  void ___setPropertyByIndex(int ___index, object val)
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				commonLog.LogEntry("SetPropertyValueIndex for {0} \'{1}\' {2} = {3} failed",this.GetType(), this, ___index, val);
			}
			
		}
        public virtual object ___getPropertyByIndex(int ___index)
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				commonLog.LogEntry("___getPropertyByName by index {0} {1} {2} failed",this.GetType(), this, ___index);
			}
			return null;
		}

        public virtual bool ___hasPropertyByName(string ___name)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 5)
            {
                commonLog.LogEntry("{0}._x__HasProperty {1} ", this, ___name);
            }
            return false;

        }		
        public new IMutilversalObjectType multiversalClassType
        {
            get
            {
                return IMutilversalObjectType.HTMLDocument;
            }
        }
        public virtual bool ___hasPropertyByIndex(int ___index)
		{
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("calling {0}._x__HasProperty({1})", this, ___index );
            }
			return true;
		}
		public virtual object ___common_object_clone()
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				commonLog.LogEntry("x__Clone {0} {1} called",this.GetType(), this);
			}
			return this;
		}
        public virtual void ___deleteByIndex(int ___index)
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				commonLog.LogEntry("___deleteByIndex {0} {1} called : {2}",this.GetType(), this, ___index);
			}
		}
        public virtual void ___deleteByName(string ___name)
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				commonLog.LogEntry("___deleteByName {0} {1} called : {2}",this.GetType(), this, ___name);
			}

		}
        public virtual object[] ___getByIds()
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				commonLog.LogEntry("___getByIds() {0} {1} called",this.GetType(), this);
			}
			return null;

		}
        public virtual  string ___getClassName()
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				commonLog.LogEntry("___getClassName {0} {1} called",this.GetType(), this);
			}
			return this.GetType().Name;
		}
        public virtual  object ___getDefaultValue()
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				commonLog.LogEntry("___getDefaultValue {0} {1} called",this.GetType(), this);
			}
			return null;
		}
        public virtual  object ___getParentScope()
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				commonLog.LogEntry("___getParentScope {0} {1} called",this.GetType(), this);
			}
			return null;
		}
        public virtual  void ___setParentScope(object ___object)
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				commonLog.LogEntry("___setParentScope {0} {1} called : {2}",this.GetType(), this, ___object);
			}
		}
        public virtual  object ___getProtoType()
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				commonLog.LogEntry("___getProtoType {0} {1} called",this.GetType(), this);
			}
            if (this.___prototypeWeakReference != null)
            {
                return this.___prototypeWeakReference.Target;
            }
            return null;
		}
        public virtual  bool ___hasInstance(object ___object)
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				commonLog.LogEntry("___hasInstance {0} {1} called : {2}",this.GetType(), this, ___object);
			}
			return false;
		}
        public virtual bool ___instanceEquals(object ___object)
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				commonLog.LogEntry("___instanceEquals {0} {1} called : {2}",this.GetType(), this, ___object);
			}
			return object.ReferenceEquals(this, ___object);
		}
        public virtual  void ___setProtoType(object ___object)
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
			{
				commonLog.LogEntry("___setProtoType {0} {1} called : {2}",this.GetType(), this, ___object);
			}
		}




#endregion

#region WindowWrapperCallerMethods
		// =======================================================================================
		// +------------------------------------------+
		// | CHtmlDocumentRenderer                    |
		// +------------------------------------------+
		// | +---CHTMDocument--------------------+    |
		// | |                                   |    |
		// | |  ScriptEngine                     |    |
		// | |                                   |    |
		// | |        Call   ------------------> |    |
		// | |                    OK             |    |
		// | |        Call   -----------------------> |  
		// | |                    Not Good       |    |
		// | |        Call as Window  ---------->| -- |
		// | |                    OK             |    |
		// | |-----------------------------------+    |
		// +------------------------------------------+
		// =======================================================================================

        /*
		public double parseFloat_viaWindow(object p1, object p2)
		{
			return parseInt_inner(p1, p2);
		}
		public double parseFloat_viaWindow(object p1)
		{
			return this.parseInt_inner(p1, null);
		}
		
		public double parseInt_viaWindow(object p1, object p2)
		{
			return parseInt_inner(p1, p2);
		}
		public double parseInt_viaWindow(object p1)
		{
			return this.parseInt_inner(p1, null);
		*/
		/// <summary>
		/// Executes the specified script in the provided language.
		/// </summary>
		/// <param name="_oFunction"></param>
		/// <param name="_oLanguage"></param>
		/// <returns>[out, retval] Address of a VARIANT of type VT_EMPTY. This method always returns VT_EMPTY</returns>
		
		public object execScript_viaWindow(object _oFunction)
		{
			return this.execScript_viaWindow(_oFunction, "javascript");
		}
        //
        // 
        // 
        
        public CHtmlCSSStyleSheet getComputedStyle(object _oElement, object _oParam)
        {
            return ___getComputedStyle_viaWindow(_oElement, _oParam);
        }
		
		internal static CHtmlCSSStyleSheet ___getComputedStyle_viaWindow(object ___objectElment, object ___objectParam)
		{
            if (___objectElment != null)
            {

                CHtmlElement _Element = commonData.convertObjectIntoCHtmlElement(___objectElment);
                if (_Element != null && _Element.___style != null)
                {
                    return _Element.___style;
                }

            }
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("BUGBUG!!!   getComputedStyle_viaWindow(\'{0}\', \'{1}\') returns null", ___objectElment, ___objectParam);
            }
            
            return null;
    	}
		/// <summary>
		/// Rhino Specific function returns window top most 
		/// </summary>
		/// <returns></returns>
		
		public object get_top_viaWindow()
		{
			if(this.___WindowReferenceContainer != null && this.___WindowReferenceContainer.____RhinoTopWindowScriptableReference != null)
			{
				return this.___WindowReferenceContainer.____RhinoTopWindowScriptableReference.Target;
			}
			else
			{
				return null;
			}
		}
		/// <summary>
		/// Rhino Specific function returns window parent
		/// </summary>
		/// <returns></returns>
		
		public object get_parent_viaWindow()
		{
			try
			{
				if(this.___WindowReferenceContainer != null )
				{
					if(this.___WindowReferenceContainer.____RhinoParentWindowScriptableReference != null)
					{
						return this.___WindowReferenceContainer.____RhinoParentWindowScriptableReference.Target;
					}
					if(this.___WindowReferenceContainer.____RhinoTopWindowScriptableReference != null)
					{
						return this.___WindowReferenceContainer.____RhinoTopWindowScriptableReference.Target;
					}
				}
			}
			catch(Exception ex)
			{
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
				{
					commonLog.LogEntry("get_parent_viaWindow via Window() {0} {1}", this, commonData.GetExceptionAsString(ex));
				}
			}
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
			{
				commonLog.LogEntry("get_parent_viaWindow returns null. okay?", this);
			}
			return null;
		}

        /// <summary>
        /// Confirms Function target is already called or not.
        /// </summary>
        /// <param name="___checkReference"></param>
        /// <returns></returns>
        internal bool ___IsCalledFunctionContainsOnCalledList(object ___objectToCheck)
        {
            if (___objectToCheck != null)
            {
                if (this.___CalledFunctionHashtable.Count > 0 && this.___CalledFunctionHashtable.ContainsKey(___objectToCheck) == true)
                {
                    return true;
                }
            }
            return false;
        }
        public bool isEqualNode(object ___obj)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("calling {0}.isEqualNode(\'{1}\'}\')", this, ___obj );
            }
            if (___obj == null)
                return false;
            return object.Equals(this, ___obj);
        }

		
		public object execScript_viaWindow(object _oFunction, object _oLang)
		{
            try
            {
                string _oLanguage = "";
                _oLanguage = commonHTML.GetStringValue(_oLang);
                CHtmlScriptResultElement _scriptElement = new CHtmlScriptResultElement();
                _scriptElement.text = string.Format("execScript via Window : {0}", _oFunction);

                _scriptElement.IsCompiled = false;
                _scriptElement.result = -1;
                this.___scriptEventList.Add(_scriptElement);

                DateTime ___dtStart = DateTime.Now;
                TimeSpan ___tpSpan;
                _scriptElement.IsCompiled = true;
                try
                {
                    string functionType = commonHTML.FasterToLower(_oFunction.GetType().ToString());
                    ___tpSpan = DateTime.Now.Subtract(___dtStart);
                    _scriptElement.result = 200;
                    _scriptElement.resultText = string.Format("[execScript via Window Success] '{0}' {1} ms", _scriptElement.text, ___tpSpan.TotalMilliseconds);
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                    {
                        commonLog.LogEntry(_scriptElement.resultText);
                    }
                }
                catch (Exception ex)
                {
                    _scriptElement.result = 500;
                    ___tpSpan = DateTime.Now.Subtract(___dtStart);
                    System.Text.StringBuilder sbError = new StringBuilder();
                    sbError.Append(string.Format("[execScript via Window Error] '{0}' {1} ms", _scriptElement.text, ___tpSpan.TotalMilliseconds));

                    _scriptElement.resultText = sbError.ToString();
                    _scriptElement.errorDetail = commonData.GetExceptionAsString(ex);
                    _scriptElement.IsCompiled = true;
                    _scriptElement.result = 500;

                    if (commonLog.LoggingEnabled)
                    {
                        commonLog.LogEntry(sbError.ToString());
                    }

                }




            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                {
                    commonLog.LogEntry("execScript via Window() {0} {1}", this, commonData.GetExceptionAsString(ex));
                }
            }
			return null;
		}


		
		public int setInterval_viaWindow(object _p1, object _p2)
		{
			return this.setIntervalInner(_p1,   commonHTML.GetIntFromObject(_p2, 1000),  "javascript");
		}
		
		public int setInterval_viaWindow(object _p1, object _p2, object p3)
		{
			return this.setIntervalInner(_p1, commonHTML.GetIntFromObject(_p2, 1000), commonHTML.GetStringValue(p3));
		}
		/*
		
		public int setTimeout_viaWindow(object __script, int __mseconds)
		{
			return this.setTimeoutInner( __script,  __mseconds, "javascript");
		}
		*/
		
		public int setTimeout_viaWindow(object _p1, object _p2)
		{
			return this.setTimeoutInner(_p1,   commonHTML.GetIntFromObject(_p2, 1000),  "javascript", false);
		}
		
		
		public int setTimeout_viaWindow(object _p1, object _p2, object p3)
		{
			
			return this.setTimeoutInner(_p1,  commonHTML.GetIntFromObject(_p2, 1000), commonHTML.GetStringValue(p3), false);
		}
		
		private int setIntervalInner(object __script, int __mseconds, string __language)
		{
            if (this == null || this.___Disposing == true || this.___IsThreadAbortOccurred == true)
            {
                return -1;
            }
            try
            {
                this.___DocumentTimerMimimunIntervalOrTimeout = Math.Min(this.___DocumentTimerMimimunIntervalOrTimeout, __mseconds);

                CHtmlEventInfo evtTimer = new CHtmlEventInfo();
                evtTimer.Name = "interval";
                evtTimer.TimerType = 1;
                evtTimer.Timeout = __mseconds;
                evtTimer.Function = __script;
                evtTimer.LastCallTime = DateTime.Now;
                // Timer may be set multiple times 
                int timerKey = commonHTML.getDocumentTimerAdhocRandomNumber();
                while (this.___DocumentTimerLiveList.ContainsKey(timerKey) == true)
                {
                    // Generated Number may be has been created one.
                    timerKey = commonHTML.getDocumentTimerAdhocRandomNumber();
                }
                evtTimer.DocumentIndex = timerKey;
                if (System.Threading.Monitor.TryEnter(this.___DocumentTimerLiveLockingObject, 500))
                {
                    this.___DocumentTimerLiveList[evtTimer.DocumentIndex] = evtTimer;
                    this.___DocumentTimerBrandNewIDList[evtTimer.DocumentIndex] = null;
                    System.Threading.Monitor.Exit(this.___DocumentTimerLiveLockingObject);
                }

                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1000)
                {
                    commonLog.LogEntry("setting window.setInternal({0}, {1}, {2}) = {3}", __script, __mseconds, __language, evtTimer.DocumentIndex);
                }

                if (this.___IsMultiversalDocument == false)
                {
                    if (this.___DocumentTimerThread == null)
                    {
                        if (this.___IsRenderingFirstCompleted == true && this.___readyStateType == CHtmlReadytStateType.complete && this.___IsOnLoadWindowDocumentCompletedCalled == true && this.___DisableDocumentTimer == false)
                        {
                            this.___InitializeDocumentTimer(__mseconds, __mseconds);
                        }
                        else if (commonHTML.AllowTimerStartupBeforeComplete == true)
                        {
                            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 5)
                            {
                                commonLog.LogEntry("setIntaval() may start timer...");
                            }
                            this.___InitializeDocumentTimer(__mseconds, __mseconds);

                        }
                    }
                    else if (__mseconds < this.___DocumentTimerOriginalInterval)
                    {
                        try
                        {
                            if (this.___readyStateType == CHtmlReadytStateType.complete)
                            {
                                this.___DocumentTimerThread.Change(__mseconds, __mseconds);
                            }
                        }
                        catch { }
                        this.___DocumentTimerOriginalInterval = __mseconds;
                    }
                }
                return evtTimer.DocumentIndex;
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 5)
                {
                    commonLog.LogEntry("setTimeout() may start timer errror :" + ex.Message);
                }
            }
            return -1;
		}
		
		private int setTimeoutInner(object __script, int __mseconds, string __language, bool isFrameTimer)
		{
            if (this == null || this.___Disposing == true || this.___IsThreadAbortOccurred == true)
            {
                return -1;
            }
            try
            {
                this.___DocumentTimerMimimunIntervalOrTimeout = Math.Min(this.___DocumentTimerMimimunIntervalOrTimeout, __mseconds);

                CHtmlEventInfo evtTimer = new CHtmlEventInfo();
                evtTimer.Name = "timeout";
                evtTimer.Timeout = __mseconds;
                evtTimer.Function = __script;
                evtTimer.LastCallTime = DateTime.Now;
                evtTimer.TimerType = 10;
                // Timer may be set multiple times 
                int timerKey = commonHTML.getDocumentTimerAdhocRandomNumber();
                while (this.___DocumentTimerLiveList.ContainsKey(timerKey) == true)
                {
                    // Generated Number may be has been created one.
                    timerKey = commonHTML.getDocumentTimerAdhocRandomNumber();
                }
                evtTimer.DocumentIndex = timerKey;
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1000)
                {
                    commonLog.LogEntry("setting window.setTimeout({0}, {1}, {2}) = {3}", __script, __mseconds, __language, evtTimer.DocumentIndex);
                }
                evtTimer.IsAnimationFrameTimer = isFrameTimer;

                if (System.Threading.Monitor.TryEnter(this.___DocumentTimerLiveLockingObject, 500))
                {
                    this.___DocumentTimerLiveList[evtTimer.DocumentIndex] = evtTimer;
                    this.___DocumentTimerBrandNewIDList[evtTimer.DocumentIndex] = null;
                    System.Threading.Monitor.Exit(this.___DocumentTimerLiveLockingObject);
                }

                if (this.___IsMultiversalDocument == false)
                {
                    if (this.___DocumentTimerThread == null)
                    {
                        if (this.___IsRenderingFirstCompleted == true && this.___readyStateType == CHtmlReadytStateType.complete && this.___IsOnLoadWindowDocumentCompletedCalled == true && this.___DisableDocumentTimer == false)
                        {
                            this.___InitializeDocumentTimer(__mseconds, __mseconds);
                        }
                        else if (commonHTML.AllowTimerStartupBeforeComplete == true)
                        {
                            if (isFrameTimer == false)
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 5)
                                {
                                    commonLog.LogEntry("setTimeout() may start timer...");
                                }
                                this.___InitializeDocumentTimer(__mseconds, __mseconds);
                            }
                        }

                    }
                    else if (__mseconds < this.___DocumentTimerOriginalInterval)
                    {
                        try
                        {
                            if (this.___readyStateType == CHtmlReadytStateType.complete)
                            {
                                this.___DocumentTimerThread.Change(__mseconds, __mseconds);
                            }
                        }
                        catch { }
                        this.___DocumentTimerOriginalInterval = __mseconds;
                    }
                }

                return evtTimer.DocumentIndex;
            }
            catch (Exception ex)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 5)
                {
                    commonLog.LogEntry("setIntaval() may start timer errror :" +  ex.Message );
                }
                
            }
            return -1;
		}
        
        public void clear()
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
            {
                commonLog.LogEntry("document.clear() is deprecated. This method doesn't do anything. ");
            }
        }
        
		
		public void clearInterval_viaWindow(object _tid)
		{
			this.___clearDocumentTimerInner(_tid, "interval");
		}

		
		public void clearTimeout_viaWindow(object _tid)
		{

			this.___clearDocumentTimerInner(_tid, "timeout");
		}
		
		private void ___clearDocumentTimerInner(object timerID, string _name)
		{
			int ___clearedTimerCount = 0;
            //int SearchingTimerType = 0;
			
			int  ___timerHash = -99999999;
			if(timerID != null)
			{
				if(timerID is String)
				{
					string sValue = commonHTML.GetStringValue(timerID);
					if(sValue.Length == 0)
					{
						goto LookUpEvents;

					}
                }

				___timerHash =	commonHTML.GetIntFromObject(timerID, -99999999);
			}

            /*
            if (string.Compare(_name, "interval", StringComparison.OrdinalIgnoreCase) == 0)
            {
                SearchingTimerType = 1;
            }
            else if(string.Compare(_name, "timeout", StringComparison.OrdinalIgnoreCase) == 0)
            {
                 SearchingTimerType = 10;
            }
             */
			LookUpEvents:
            if (___timerHash == -99999999 || ___timerHash == 0)
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                {
                    commonLog.LogEntry("___clearDocumentTimerInner is called but no timer id {0}", timerID);
                }
                if (this.___DocumentTimerClearSequentailMissCount < int.MaxValue)
                {
                    this.___DocumentTimerClearSequentailMissCount++;
                }
                if (this.___DocumentTimerClearTotalMissCount < int.MaxValue)
                {
                    this.___DocumentTimerClearTotalMissCount++;
                }
                if (this.___DocumentTimerClearTotalMissCount == 25 || this.___DocumentTimerClearTotalMissCount == 50 || this.___DocumentTimerClearTotalMissCount == 100 || this.___DocumentTimerClearTotalMissCount == 150 ||this.___DocumentTimerClearTotalMissCount == 200 || this.___DocumentTimerClearSequentailMissCount >= 5)
                {
                    if (this.___DocumentTimerLiveList != null && this.___DocumentTimerLiveList.Count > 0)
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                        {
                            commonLog.LogEntry("___clearDocumentTimerInner is called many times (Sequential: {0} Total : {1}), there is live timer exists. clear all now...", this.___DocumentTimerClearSequentailMissCount, this.___DocumentTimerClearTotalMissCount);

                        }

                        if (System.Threading.Monitor.TryEnter(this.___DocumentTimerLiveLockingObject, 500))
                        {
                            try
                            {
                                for (int i = this.___DocumentTimerLiveList.Count - 1; i >= 0; i--)
                                {
                                    CHtmlEventInfo timerEvt = this.___DocumentTimerLiveList.Values[i];
                                    if (timerEvt != null)
                                    {
                                        timerEvt.IsCompleted = true;
                                        this.___DocumentTimerCompleteList.Add(timerEvt);
                                    }
                                    this.___DocumentTimerLiveList.RemoveAt(i);
                                    ___clearedTimerCount++;
                                }
                                this.___DocumentTimerLiveList.Clear();
                                this.___DocumentTimerBrandNewIDList.Clear();
                                this.___DocumentTimerClearTotalMissCount = 0;
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                                {
                                    commonLog.LogEntry("___clearDocumentTimerInner clear all timer success. ");
                                }
                            }
                            catch (Exception exTimerClear)
                            {
                                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                                {
                                    commonLog.LogEntry("___clearDocumentTimerInner timer clear exception. ", exTimerClear);
                                }
                            }
                            finally
                            {
                                System.Threading.Monitor.Exit(this.___DocumentTimerLiveLockingObject);
                            }
                        }
                        

                    }
                    else
                    {
                        if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                        {
                            commonLog.LogEntry("___clearDocumentTimerInner is called many times (Sequential: {0} Total : {1}), there is no live timer events exists", this.___DocumentTimerClearSequentailMissCount, this.___DocumentTimerClearTotalMissCount);

                        }
                    }
                }
                
            }
            else
            {
                try
                {

                    if (this.___DocumentTimerLiveList.ContainsKey(___timerHash) == true)
                    {
                        CHtmlEventInfo timerEvt = this.___DocumentTimerLiveList[___timerHash];
                        if (timerEvt != null)
                        {
                            if (System.Threading.Monitor.TryEnter(this.___DocumentTimerLiveLockingObject, 500))
                            {
                                this.___DocumentTimerLiveList.Remove(___timerHash);
                                this.___DocumentTimerBrandNewIDList.Remove(___timerHash);
                                System.Threading.Monitor.Exit(this.___DocumentTimerLiveLockingObject);
                            }
                            this.___DocumentTimerCompleteList.Add(timerEvt);
                            ___clearedTimerCount++;
                            this.___DocumentTimerClearSequentailMissCount = 0;
                        }
                    }
                }
                catch (Exception ex)
                {
                    if (this.___DocumentTimerClearSequentailMissCount < int.MaxValue)
                    {
                        this.___DocumentTimerClearSequentailMissCount++;
                    }
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                    {
                        commonLog.LogEntry("___clearDocumentTimerInner Exception ", ex);
                    }
                }
            }
			//ClearDone:
				if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
				{
					commonLog.LogEntry("___clearDocumentTimerInner({0}, {1})  Cleared : {2}", timerID, _name, ___clearedTimerCount);
				}
		}

		
		public void attachEvent_viaWindow(object __Name, object ___function)
		{
			this.___attachEventForElement(commonHTML.GetStringValue(__Name), ___function, (int)CHtmlEventOriginatorType.CHTMLWindow);
		}
		
		public void addEventListener_viaWindow(object __Name, object ___function)
		{
            this.___attachEventForElement(commonHTML.GetStringValue(__Name), ___function, (int)CHtmlEventOriginatorType.CHTMLWindow);
		}
        public void postMessage_viaWindow(object __message,object  __targetOrigin,object  __transfer)
        {
            this.postMessage_inner(__message, __targetOrigin, __transfer);
        }
        public void postMessage_viaWindow(object __message, object __targetOrigin)
        {
            this.postMessage_inner(__message, __targetOrigin, null);
        }
        private void postMessage_inner(object __message, object __targetOrigin, object __transfer)
        {
            try
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                {
                    commonLog.LogEntry("postMessage({0}, {1}, {2})", __message, __targetOrigin, __transfer);
                }
            }
            finally
            {
            }
        }

		
		public object onload_viaWindow
		{
			get
			{
				return this.___getEventForElement("onload", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                this.___attachEventForElement("onload", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object load_viaWindow
		{
			get
			{
				return this.___getEventForElement("load", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                this.___attachEventForElement("load", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onunload_viaWindow
		{
			get
			{
				return this.___getEventForElement("onunload", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                ___attachEventForElement("onunload", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object unload_viaWindow
		{
			get
			{
                return this.___getEventForElement("unload", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                ___attachEventForElement("unload", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onreset_viaWindow
		{
			get
			{
                return this.___getEventForElement("onreset", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                ___attachEventForElement("onreset", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onabort_viaWindow
		{
			get
			{
                return this.___getEventForElement("onabort", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                ___attachEventForElement("onabort", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onbeforeunload_viaWindow
		{
			get
			{
                return this.___getEventForElement("onbeforeunload", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                ___attachEventForElement("onbeforeunload", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onblur_viaWindow
		{
			get
			{
                return this.___getEventForElement("onblur", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                ___attachEventForElement("onblur", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onchange_viaWindow
		{
			get
			{
                return this.___getEventForElement("onchange", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                ___attachEventForElement("onchange", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onclick_viaWindow
		{
			get
			{
                return this.___getEventForElement("onclick", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                ___attachEventForElement("onclick", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
        
        public object onplaying_viaWindow
        {
            get
            {
                return this.___getEventForElement("onplaying", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("onplaying", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
		
		public object onclose_viaWindow
		{
			get
			{
                return this.___getEventForElement("onclose", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                ___attachEventForElement("onclose", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object oncontextmenu_viaWindow
		{
			get
			{
                return this.___getEventForElement("oncontextmenu", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                ___attachEventForElement("oncontextmenu", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object ondevicelight_viaWindow
		{
			get
			{
                return this.___getEventForElement("ondevicelight", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                ___attachEventForElement("ondevicelight", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onerror_viaWindow
		{
			get
			{
                return this.___getEventForElement("onerror", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
				___attachEventForElement("onerror", value,(int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onfocus_viaWindow
		{
			get
			{
				return this.___getEventForElement("onfocus", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
				___attachEventForElement("onfocus", value,(int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
        
        public object onfocusout_viaWindow
        {
            get
            {
                return this.___getEventForElement("onfocusout", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("onfocusout", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onfocusin_viaWindow
        {
            get
            {
                return this.___getEventForElement("onfocusin", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("onfocusin", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onended_viaWindow
        {
            get
            {
                return this.___getEventForElement("onended", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("onended", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object ondurationchange_viaWindow
        {
            get
            {
                return this.___getEventForElement("ondurationchange", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("ondurationchange", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object ondrag_viaWindow
        {
            get
            {
                return this.___getEventForElement("ondrag", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("ondrag", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object ondrop_viaWindow
        {
            get
            {
                return this.___getEventForElement("ondrop", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("ondrop", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object ondragover_viaWindow
        {
            get
            {
                return this.___getEventForElement("ondragover", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("ondragover", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object ondragstart_viaWindow
        {
            get
            {
                return this.___getEventForElement("ondragstart", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("ondragstart", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object ondragleave_viaWindow
        {
            get
            {
                return this.___getEventForElement("ondragleave", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("ondragleave", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object ondragenter_viaWindow
        {
            get
            {
                return this.___getEventForElement("ondragenter", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("ondragenter", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object oncuechange_viaWindow
        {
            get
            {
                return this.___getEventForElement("oncuechange", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("oncuechange", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onbeforescriptexecute_viaWindow
        {
            get
            {
                return this.___getEventForElement("onbeforescriptexecute", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onbeforescriptexecute", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object  onafterscriptexecute_viaWindow
        {
            get
            {
                return this.___getEventForElement("onafterscriptexecute", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onafterscriptexecute", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object  onpointerdown_viaWindow
        {
            get
            {
                return this.___getEventForElement("onpointerdown", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onpointerdown", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onpointerup_viaWindow
        {
            get
            {
                return this.___getEventForElement("onpointerup", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onpointerup", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onpointermove_viaWindow
        {
            get
            {
                return this.___getEventForElement("onpointermove", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onpointermove", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onpointerover_viaWindow
        {
            get
            {
                return this.___getEventForElement("onpointerover", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onpointerover", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onpointercancel_viaWindow
        {
            get
            {
                return this.___getEventForElement("onpointercancel", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onpointercancel", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        public object onprogress_viaWindow
        {
            get
            {
                return this.___getEventForElement("onprogress", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onprogress", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        public object onratechange_viaWindow
        {
            get
            {
                return this.___getEventForElement("onratechange", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onratechange", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        public object onpopstate_viaWindow
        {
            get
            {
                return this.___getEventForElement("onpopstate", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onpopstate", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onpointerout_viaWindow
        {
            get
            {
                return this.___getEventForElement("onpointerout", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onpointerout", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onpointerleave_viaWindow
        {
            get
            {
                return this.___getEventForElement("onpointerleave", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onpointerleave", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onpointerenter_viaWindow
        {
            get
            {
                return this.___getEventForElement("onpointerenter", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onpointerenter", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
		
		public object ondragdrop_viaWindow
		{
			get
			{
				return this.___getEventForElement("ondragdrop", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                this.___attachEventForElement("ondragdrop", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onkeydown_viaWindow
		{
			get
			{
				return this.___getEventForElement("onkeydown", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                this.___attachEventForElement("onkeydown", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onkeyup_viaWindow
		{
			get
			{
				return this.___getEventForElement("onkeyup", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                this.___attachEventForElement("onkeyup", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onkeypress_viaWindow
		{
			get
			{
				return this.___getEventForElement("onkeypress", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                this.___attachEventForElement("onkeypress", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onmousedown_viaWindow
		{
			get
			{
				return this.___getEventForElement("onmousedown", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                this.___attachEventForElement("onmousedown", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onmouseup_viaWindow
		{
			get
			{
				return this.___getEventForElement("onmouseup", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                this.___attachEventForElement("onmouseup", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onmousemove_viaWindow
		{
			get
			{
				return this.___getEventForElement("onmousemove", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                ___attachEventForElement("onmousemove", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onmouseout_viaWindow
		{
			get
			{
                return this.___getEventForElement("onmouseout", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                ___attachEventForElement("onmouseout", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
        
        public object onmouseenter_viaWindow
        {
            get
            {
                return this.___getEventForElement("onmouseenter", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("onmouseenter", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
		
		public object onmouseover_viaWindow
		{
			get
			{
                return this.___getEventForElement("onmouseover", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                ___attachEventForElement("onmouseover", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
        
        public object onmouseleave_viaWindow
        {
            get
            {
                return this.___getEventForElement("onmouseleave", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("onmouseleave", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
      
       
        public object oncanplaythrough_viaWindow
        {
            get
            {
                return this.___getEventForElement("oncanplaythrough", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("oncanplaythrough", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onplay_viaWindow
        {
            get
            {
                return this.___getEventForElement("onplay", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("onplay", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
      
       
        public object  onwebkittransitione_viaWindow
        {
            get
            {
                return this.___getEventForElement("onwebkittransitione", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("onwebkittransitione", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }

       
       public object onwebkitanimationstart_viaWindow
       {
           get
           {
               return this.___getEventForElement("onwebkitanimationstart", (int)CHtmlEventOriginatorType.CHTMLWindow);
           }
           set
           {
               ___attachEventForElement("onwebkitanimationstart", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
           }
       }
        
        public object ontouchstart
        {
            get
            {
                return this.___getEventForElement("ontouchstart", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("ontouchstart", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object ontouchend
        {
            get
            {
                return this.___getEventForElement("ontouchend", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("ontouchend", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
       public object ontanimationstart_viaWindow
       {
           get
           {
               return this.___getEventForElement("ontanimationstart", (int)CHtmlEventOriginatorType.CHTMLWindow);
           }
           set
           {
               ___attachEventForElement("ontanimationstart", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
           }
       }
       
       public object onwebkitanimationend_viaWindow
       {
           get
           {
               return this.___getEventForElement("onwebkitanimationend", (int)CHtmlEventOriginatorType.CHTMLWindow);
           }
           set
           {
               ___attachEventForElement("onwebkitanimationend", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
           }
       }
          
       public object onuserproximity_viaWindow
       {
           get
           {
               return this.___getEventForElement("onuserproximity", (int)CHtmlEventOriginatorType.CHTMLWindow);
           }
           set
           {
               ___attachEventForElement("onuserproximity", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
           }
       }
          
          public object ondeviceproximity_viaWindow
          {
              get
              {
                  return this.___getEventForElement("ondeviceproximity", (int)CHtmlEventOriginatorType.CHTMLWindow);
              }
              set
              {
                  ___attachEventForElement("ondeviceproximity", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
              }
          }
          
          public object ondevicemotion_viaWindow
          {
              get
              {
                  return this.___getEventForElement("ondevicemotion", (int)CHtmlEventOriginatorType.CHTMLWindow);
              }
              set
              {
                  ___attachEventForElement("ondevicemotion", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
              }
          }
          
          public object onemptied_viaWindow
          {
              get
              {
                  return this.___getEventForElement("onemptied", (int)CHtmlEventOriginatorType.CHTMLWindow);
              }
              set
              {
                  ___attachEventForElement("onemptied", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
              }
          }

        /// <summary>
        /// get window.onXYZ function object
        /// </summary>
        /// <param name="___name">name of function</param>
        /// <returns>function if exists</returns>
          
          internal object ___get_onfunction_viaWindow(string ___name)
          {
              return this.___getEventForElement(___name, (int)CHtmlEventOriginatorType.CHTMLWindow);
          }
          /// <summary>
          /// set window.onXYZ function object by name
          /// </summary>
          /// <param name="___name">name of function</param>
          /// <param name="___func">function object</param>
          
          internal void ___set_onfunction_viaWindow(string ___name, object ___func)
          {
              this.___attachEventForElement(___name, ___func, (int)CHtmlEventOriginatorType.CHTMLWindow);
          }
          
          public object ontransitionend_viaWindow
          {
              get
              {
                  return this.___getEventForElement("ontransitionend", (int)CHtmlEventOriginatorType.CHTMLWindow);
              }
              set
              {
                  this.___attachEventForElement("ontransitionend", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
              }
          }
          
          public object ontransitionstart_viaWindow
          {
              get
              {
                  return this.___getEventForElement("ontransitonstart", (int)CHtmlEventOriginatorType.CHTMLWindow);
              }
              set
              {
                  this.___attachEventForElement("ontransitonstart", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
              }
          }
       
       public object onwebkitanimationiteration_viaWindow
       {
           get
           {
               return this.___getEventForElement("onwebkitanimationiteration", (int)CHtmlEventOriginatorType.CHTMLWindow);
           }
           set
           {
               ___attachEventForElement("onwebkitanimationiteration", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
           }
       }
        
        public object oncanplay_viaWindow
        {
            get
            {
                return this.___getEventForElement("oncanplay", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                ___attachEventForElement("oncanplay", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
		
		public object onmousewheel_viaWindow
		{
			get
			{
                return this.___getEventForElement("onmousewheel", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                ___attachEventForElement("onmousewheel", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onmessage_viaWindow
		{
			get
			{
                return this.___getEventForElement("onmessage", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                ___attachEventForElement("onmessage", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onscroll_viaWindow
		{
			get
			{
				return this.___getEventForElement("onscroll", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                this.___attachEventForElement("onscroll", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onsubmit_viaWindow
		{
			get
			{
				return this.___getEventForElement("onsubmit", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                this.___attachEventForElement("onsubmit", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
        
        public object onwaiting_viaWindow
        {
            get
            {
                return this.___getEventForElement("onwaiting", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onwaiting", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onstalled_viaWindow
        {
            get
            {
                return this.___getEventForElement("onstalled", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onstalled", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onshow_viaWindow
        {
            get
            {
                return this.___getEventForElement("onshow", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onshow", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onseeking_viaWindow
        {
            get
            {
                return this.___getEventForElement("onseeking", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onseeking", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onseeked_viaWindow
        {
            get
            {
                return this.___getEventForElement("onseeked", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onseeked", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onvolumechange_viaWindow
        {
            get
            {
                return this.___getEventForElement("onvolumechange", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onvolumechange", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object ontimeupdate_viaWindow
        {
            get
            {
                return this.___getEventForElement("ontimeupate", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("ontimeupdate", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onsuspend_viaWindow
        {
            get
            {
                return this.___getEventForElement("onsuspend", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onsuspend", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onstorage_viaWindow
        {
            get
            {
                return this.___getEventForElement("onstorage", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onstorage", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onsearch_viaWindow
        {
            get
            {
                return this.___getEventForElement("onsearch", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onsearch", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onprint_viaWindow
        {
            get
            {
                return this.___getEventForElement("onprint", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onprint", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onpause_viaWindow
        {
            get
            {
                return this.___getEventForElement("onpause", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onpause", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onpageshow_viaWindow
        {
            get
            {
                return this.___getEventForElement("onpageshow", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onpageshow", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onpagehide_viaWindow
        {
            get
            {
                return this.___getEventForElement("onpagehide", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onpagehide", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object ononline_viaWindow
        {
            get
            {
                return this.___getEventForElement("ononline", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("ononline", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onoffline_viaWindow
        {
            get
            {
                return this.___getEventForElement("onoffline", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onoffline", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object oncancel_viaWindow
        {
            get
            {
                return this.___getEventForElement("oncancel", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("oncancel", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object ondblclick_viaWindow
        {
            get
            {
                return this.___getEventForElement("ondblclick", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("ondblclick", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onhelp_viaWindow
        {
            get
            {
                return this.___getEventForElement("onhelp", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onhelp", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onhashchange_viaWindow
        {
            get
            {
                return this.___getEventForElement("onhashchange", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onhashchange", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object oninput_viaWindow
        {
            get
            {
                return this.___getEventForElement("oninput", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("oninput", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
		
		public object onselect_viaWindow
		{
			get
			{
				return this.___getEventForElement("onselect", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                this.___attachEventForElement("onselect", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
        
        public object onlostpointercapture_viaWindow
        {
            get
            {
                return this.___getEventForElement("onlostpointercapture", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onlostpointercapture", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onloadstart_viaWindow
        {
            get
            {
                return this.___getEventForElement("onloadstart", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onloadstart", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onloadeddata_viaWindow
        {
            get
            {
                return this.___getEventForElement("onloadeddata", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onloadeddata", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onloadedmetadata_viaWindow
        {
            get
            {
                return this.___getEventForElement("onloadedmetadata", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onloadedmetadata", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
		
		public object onpaint_viaWindow
		{
			get
			{
				return this.___getEventForElement("onpaint", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                this.___attachEventForElement("onpaint", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
        
        public object oninvalid_viaWindow
        {
            get
            {
                return this.___getEventForElement("oninvalid", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("oninvalid", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
        
        public object onfullscreenchange_viaWindow
        {
            get
            {
                return this.___getEventForElement("onfullscreenchange", (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
            set
            {
                this.___attachEventForElement("onfullscreenchange", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
            }
        }
		public object onmozbeforepaint_viaWindow
		{
			get
			{
				return this.___getEventForElement("onbeforepaint", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                this.___attachEventForElement("onbeforepaint", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		public object onbeforepaint_viaWindow
		{
			get
			{
				return this.___getEventForElement("onbeforepaint", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                this.___attachEventForElement("onbeforepaint", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}
		
		public object onresize_viaWindow
		{
			get
			{
				return this.___getEventForElement("onresize", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                this.___attachEventForElement("onresize", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}

		
		public object ondeviceorientation_viaWindow
		{
			get
			{
				return this.___getEventForElement("ondeviceorientation", (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
			set
			{
                this.___attachEventForElement("ondeviceorientation", value, (int)CHtmlEventOriginatorType.CHTMLWindow);
			}
		}

        ICHtmlElementInterface ICHtmlDocumentInterface.activeElement => throw new NotImplementedException();

        ICHtmlElementInterface ICHtmlDocumentInterface.firstChild => throw new NotImplementedException();

        ICHtmlElementInterface ICHtmlDocumentInterface.lastChild => throw new NotImplementedException();

        /// <summary>
        /// Returns Event object
        /// </summary>
        /// <returns></returns>
        public CHtmlWindowEvent ___get_event_viaWindow()
        {
            return this.___event;
        }
        public CHtmlWindowURL ___get_window_URL_viaWindow()
        {
            return this.___WindowURLObjectInstance;
        }
        public CHtmlNavigator ___get_navigator_viaWindow()
        {
            if (this.___WindowReferenceContainer != null)
            {
                if (this.___WindowReferenceContainer.____NavigotorObjectReference != null)
                {
                    return this.___WindowReferenceContainer.____NavigotorObjectReference.Target as CHtmlNavigator;
                }
            }
            return null;
        }
        
        public CHtmlConsole ___get_console_viaWindow()
        {
            if (this.___WindowReferenceContainer != null)
            {
                if (this.___WindowReferenceContainer.____ConsoleObjectReference  != null)
                {
                    return this.___WindowReferenceContainer.____ConsoleObjectReference.Target as CHtmlConsole;
                }
            }
            return null;
        }
        /// <summary>
        /// Returns window.history scriptableobject
        /// </summary>
        /// <returns></returns>
        public CHtmlHistoryList ___get_history_viaWindow()
        {
            if (this.___WindowReferenceContainer != null)
            {
                if (this.___WindowReferenceContainer.____HistoryReference  != null)
                {
                    return this.___WindowReferenceContainer.____HistoryReference.Target as CHtmlHistoryList;
                }
            }

            return null;
        }


        public CHtmlWebStorage ___get_localStorage_viaWindow()
        {
            if (this.___localStorage != null)
            {
                return this.___localStorage;
            }
            else
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
                {
                    commonLog.LogEntry("Strange.... ___get_localStorage_viaWindow() will returns null...");
                }
                return null;
            }
        }
        public CHtmlWebStorage ___get_sessionStorage_viaWindow()
        {
            if (this.___sessionStorage != null)
            {
                return this.___sessionStorage;
            }
            else
            {
                if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
                {
                    commonLog.LogEntry("Strange.... ___get_sessionStorage_viaWindow() will returns null...");
                }
                return null;
            }
        }
#if false
        public CHtmlWindowScreen ___get_screen_viaWindow()
        {
            if (this.___WindowReferenceContainer != null)
            {
                if (this.___WindowReferenceContainer.____ScreenObjectReference != null)
                {
                    return this.___WindowReferenceContainer.____ScreenObjectReference.Target as CHtmlWindowScreen;
                }
            }
            return null;
        }
#endif
        /*
		
		public void addEventListener_viaWindow(string __Name, object ___function, bool ___bool)
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3 )
			{
				commonLog.LogEntry("addEventListener for '{0} : {1} {2}'", __Name,___function, ___function.GetType());
			}
			attachEventForElement(__Name, ___function, (int)HTML.CHtmlEventOriginatorType.CHTMLWindow);
		}
         */
        
        public object ___open_viaWindow()
        {
            return this.___open_viaWindow_Inner(null, null, null, null);
        }
        public object ___open_viaWindow(object param1)
        {
            return this.___open_viaWindow_Inner(param1, null, null, null);
        }
        public object ___open_viaWindow(object param1, object param2)
        {
            return this.___open_viaWindow_Inner(param1, param2, null, null);
        }
        public object ___open_viaWindow(object param1, object param2, object param3)
        {
            return this.___open_viaWindow_Inner(param1, param2, param3, null);
        }
        private object ___open_viaWindow_Inner(object param1, object param2, object param3, object param4)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 1)
            {
                commonLog.LogEntry("calling {0}.___open_viaWindow_Inner({1}, {2} , {3} , {4}) readyState : {5}", this, param1,  param2,  param3,  param4, this.___readyStateType);
            }
            throw new System.NotSupportedException("Bill Gates does not like Popup.");
            
        }

		
		public void addEventListener_viaWindow(object __Name, object ___function, object boolObj)
		{
			if(commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 3 )
			{
                if (___function != null)
                {
                    commonLog.LogEntry("addEventListener for '{0} : {1} {2}'", __Name, ___function, ___function.GetType());
                }else
                {
                    commonLog.LogEntry("addEventListener for '{0} : {1} {2}'", __Name, null, null);
                }
			}
            string strName = commonHTML.GetStringValue(__Name);
            this.___attachEventForElement(strName, ___function, (int)CHtmlEventOriginatorType.CHTMLWindow);
		}
		
		public void addEventListener_viaWindow(object __Name, object __Name2, object ___function, object boolObj)
		{
			string sName = commonHTML.GetStringValue( __Name);
			if(sName.Length ==0)
			{
				sName = commonHTML.GetStringValue(__Name2);
			}
            this.___attachEventForElement(sName, ___function, (int)CHtmlEventOriginatorType.CHTMLWindow);
		}
		
		public void detachEvent_viaWindow(object __Name, object ___function)
		{
			removeEventInner(commonHTML.GetStringValue(__Name), ___function, (int)CHtmlEventOriginatorType.CHTMLWindow);
		}
		
		public void removeEventListener_viaWindow(object __Name, object ___function, object boolObj)
		{
			this.removeEventInner(commonHTML.GetStringValue(__Name), ___function, (int)CHtmlEventOriginatorType.CHTMLWindow);
		}
		
		public void removeEventListener_viaWindow(object __Name, object ___function)
		{
			this.removeEventInner(commonHTML.GetStringValue(__Name), ___function, (int)CHtmlEventOriginatorType.CHTMLWindow);
		}


		/// <summary>
		/// Decode Base64 to Text
		/// </summary>
		/// <param name="__str"></param>
		/// <returns></returns>
		
		public string GetAtoBString_viaWindow(string __str)
		{
			byte [] bs = System.Convert.FromBase64String(__str);
 
			string result  = System.Text.Encoding.UTF8.GetString(bs);
 
			return result;
		}
		/// <summary>
		/// Encode Text -> Base64
		/// </summary>
		/// <param name="__str"></param>
		/// <returns></returns>
		
		public string GetBtoAString_viaWindow(string __str)
		{

			byte [] bytesD;
			bytesD = System.Text.Encoding.UTF8.GetBytes(__str);
 
			string result;
			result = System.Convert.ToBase64String(bytesD);
 
			return result;
		}
        public object ___get_window_frames_viaWindow()
        {
            if (this.___IsMultiversalDocument == true)
            {
                return this.___framesAsMultiversalWindow;
            }
            else
            {
                return this.___frames;
            }
        }
        /// <summary>
        /// tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. The method takes as an argument a callback to be invoked before the repaint.
        /// </summary>
        /// <param name="___callback">function object to be processed</param>
        /// <returns>double to be cancelID </returns>
        
        public double  ___requestAnimationFrame_viaWindow(object ___callback)
        {
      

            double ret =  (double)this.setTimeoutInner(___callback, commonHTML.WINDOW_MULTIMEDIA_TIMER_MINUMUM, null, true);
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 1000)
            {
                commonLog.LogEntry("requestAnimationFrame is called : {0} => {1}", ___callback, ret);
            }
            return ret;
            
        }
        /// <summary>
        /// cancel requestAnimationFrame
        /// </summary>
        /// <param name="___cancelID"></param>
        /// <returns></returns>
        
        public void ___cancelAnimationFrame_viaWindow(object ___cancelID)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel > 1000)
            {
                commonLog.LogEntry("cancelAnimationFrame is called : {0}", ___cancelID);
            }
            this.___clearDocumentTimerInner(___cancelID, "timeout");
        }






        #endregion
        /// <summary>
        /// This method is temporarily implemented for project migraration. Should not be used.
        /// </summary>
        internal void ___drawTextElement(CHtmlElement ___tagElement, GraphicCotainer _grCon, bool b)
        { 
        }


        internal void ___createDocumentAllElementListFromDocumentElementIncludingITextBeforeAfter()
        {
            if (this.___getElementsByTagNameWildCardSearchIncludingITextLastResult == null)
            {
                this.___getElementsByTagNameWildCardSearchIncludingITextLastResult = new CHtmlCollection();
                this.___getElementsByTagNameWildCardSearchIncludingITextLastResultUpdateTime = DateTime.Now;
            }
            else
            {
                if (this.___getElementsByTagNameWildCardSearchIncludingITextLastResult.Count > 0)
                {
                    TimeSpan tpSpanLastCollectionCreated = DateTime.Now.Subtract(___getElementsByTagNameWildCardSearchIncludingITextLastResultUpdateTime);
                    if (tpSpanLastCollectionCreated.TotalMilliseconds >= 5000 && commonHTML.isElementAdHocNumberIsEqualToCurrent(this.___getElementsByTagNameWildCardSearchIncludingITextLastResultElementOID) == false)
                    {
                        this.___getElementsByTagNameWildCardSearchIncludingITextLastResult.Clear();
                    }
                    else
                    {
                        return;
                    }
                }


            }
            if (this.___documentElement != null)
            {
                this.___documentElement.___createChildElementListWithEnqueueDequeue(this.___getElementsByTagNameWildCardSearchIncludingITextLastResult, CHtmlElementQueryType.All_Including_IText_Before_After, null);

                this.___getElementsByTagNameWildCardSearchIncludingITextLastResult_ALL_Count = this.___getElementsByTagNameWildCardSearchIncludingITextLastResult.Count;
                if (this.___getElementsByTagNameWildCardSearchIncludingITextLastResult_ALL_Count > 0)
                {
                    CHtmlElement __lastElement = this.___getElementsByTagNameWildCardSearchIncludingITextLastResult[this.___getElementsByTagNameWildCardSearchIncludingITextLastResult_ALL_Count - 1] as CHtmlElement;
                    if (__lastElement != null)
                    {
                        this.___getElementsByTagNameWildCardSearchIncludingITextLastResultElementOID = __lastElement.___elementOID;
                        ___getElementsByTagNameWildCardSearchIncludingITextLastResultUpdateTime = DateTime.Now;
                    }
                    else
                    {
                        this.___getElementsByTagNameWildCardSearchIncludingITextLastResultElementOID = -1;
                    }
                }
            }



            return;
        }
        public bool isPrototypeOf(object ___protoObject)
        {
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
            {
                commonLog.LogEntry("calling {0}.isPrototpyeOf('{1}') ", this, ___protoObject);
            }
            switch (commonHTML.isPrototypeOf_precheck(this, ___protoObject))
            {
                case 0:
                default:
                    if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 8)
                    {
                        commonLog.LogEntry("TODO:  {0}.isPrototpyeOf('{1}') test needs more test. returns true for now... ", this, ___protoObject);
                    }
                    break;
                case 1:
                    return true;
                case 2:
                    return false;
            }
            return true;
        }
        


#region CSS Deep Lookup Thread
        internal void ___startCSSDeepLookupThread()
        {
            this.___isCSSSearchDeepExecutionThreadRunning = true;
            System.Threading.ThreadStart st = new ThreadStart(___performCSSDeepElementLookup);
            this.___CSSSearchDeepExecutionThread = new Thread(st);
            if (this.___CSSSearchDeepExecutionThreadStartupCount < int.MaxValue)
            {
                this.___CSSSearchDeepExecutionThreadStartupCount++;
            }
            
            this.___CSSSearchDeepExecutionThread.Name = string.Concat("DeepCSSLookupExecutionThead for " , this.___UrlShortName, "[",this.___CSSSearchDeepExecutionThreadStartupCount, "]");
            this.___CSSSearchDeepExecutionThread.IsBackground = true;
            this.___CSSSearchDeepExecutionThread.Priority = ThreadPriority.Lowest;
            //this.___CSSSearchDeepExecutionThread.ApartmentState = ApartmentState.MTA;
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                commonLog.LogEntry("starting CSS Deep Lookup Execution Thread : {0}", this.___CSSSearchDeepExecutionThread.Name );
            }
            this.___CSSSearchDeepExecutionThread.Start();
        }
        internal void ___performCSSDeepElementLookup()
        {
            DateTime __CSSDeepSearchStartTime = DateTime.Now;
            int ___lookupElementCount = 0;
            try
            {
                if (this.___CSSSearchDeepPendingElementList != null)
                {
                    int ___queueItemsCount = this.___CSSSearchDeepPendingElementList.Count;
                    if (___queueItemsCount > 0)
                    {
                        for (int i = 0; i < ___queueItemsCount; i++)
                        {
                            bool ___isCSSLookupedElementNeedsToBeRemove = false;
                            bool ___isCSSLookupedAllElemntsNeedsToBeClear = false;
                            System.WeakReference ___elementRef = this.___CSSSearchDeepPendingElementList.Values[i];
                            if (___elementRef != null)
                            {
                                CHtmlElement ___elemenetCSSLookup = ___elementRef.Target as CHtmlElement;
                                if (___elemenetCSSLookup != null)
                                {
                                    if (___elemenetCSSLookup.___elementTagType == CHtmlElementType.BODY || ___elemenetCSSLookup.___elementTagType == CHtmlElementType.HTML)
                                    {
                                        ___isCSSLookupedAllElemntsNeedsToBeClear = true;
                                        ___lookupElementCount++;
                                        this.___applyElementsStyleSheetsForRecaluculationForRootChangedElement(___elemenetCSSLookup);
                                    }
                                    else
                                    {
                                        ___isCSSLookupedElementNeedsToBeRemove = true;
                                        ___lookupElementCount++;
                                        this.___applyElementsStyleSheetsForRecaluculationForRootChangedElement(___elemenetCSSLookup);
                                    }
                                }
                                else
                                {
                                    ___isCSSLookupedElementNeedsToBeRemove = true;
                                }
                            }
                            else
                            {
                                ___isCSSLookupedElementNeedsToBeRemove = true;
                            }
                            if (___isCSSLookupedElementNeedsToBeRemove == true || ___isCSSLookupedAllElemntsNeedsToBeClear == true)
                            {
                                if(System.Threading.Monitor.TryEnter(this.___CSSSearchDeepPendingElementList_LockingObject , 1000) == true)
                                {
                                    try
                                    {
                                        if (___isCSSLookupedElementNeedsToBeRemove == true)
                                        {
                                            this.___CSSSearchDeepPendingElementList.RemoveAt(i);
                                            ___queueItemsCount = this.___CSSSearchDeepPendingElementList.Count;
                                            i--;
                                        }
                                        else if (___isCSSLookupedAllElemntsNeedsToBeClear == true)
                                        {
                                            this.___CSSSearchDeepPendingElementList.Clear();
                                            ___queueItemsCount = 0;
                                        }
                                        else
                                        {
                                            this.___CSSSearchDeepPendingElementList.Clear();
                                            ___queueItemsCount = 0;
                                        }
                                    }
                                    finally
                                    {
                                        System.Threading.Monitor.Exit(this.___CSSSearchDeepPendingElementList_LockingObject);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                commonLog.LogEntry(" ___performCSSDeepElementLookup() exception. ", ex);
            }
            if (commonLog.LoggingEnabled && commonLog.CommonLogLevel >= 10)
            {
                TimeSpan tpSpan = DateTime.Now.Subtract(__CSSDeepSearchStartTime);
                if (this.___CSSSearchDeepExecutionThread != null)
                {
                    commonLog.LogEntry("___performCSSDeepElementLookup() [{0}] completed with {1} items {2} ms...", this.___CSSSearchDeepExecutionThread.Name, ___lookupElementCount, tpSpan.TotalMilliseconds);
                }
            }
            this.___isCSSSearchDeepExecutionThreadRunning = false;
        }
#endregion
    }



}
